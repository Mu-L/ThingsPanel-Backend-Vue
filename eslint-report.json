[{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\dual-data-display\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\dual-data-display\\index.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":48,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":48,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":64},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":49,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":49,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":70},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'previewMode' is not defined.","line":108,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":61},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'interactionConfigs' is not defined.","line":112,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":130,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":130,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":22},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'componentId' is not defined.","line":188,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":188,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is assigned a value but never used.","line":259,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":259,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is assigned a value but never used.","line":259,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":259,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script setup lang=\"ts\">\n/**\n * dual-data-display 主组件\n * 基于新的三文件结构标准，支持 CustomConfig 类型配置和属性绑定\n */\n\nimport { computed, reactive, getCurrentInstance, onMounted, onUnmounted } from 'vue'\nimport type { InteractionProps, InteractionEmits } from '@/card2.1/types/interaction-component'\nimport type { DualDataDisplayConfig, DualDataDisplayCustomize } from './settingConfig'\n\n// 组件状态接口\ninterface ComponentState {\n  isActive: boolean\n  clickCount: number\n}\n\n// 交互状态接口\ninterface InteractionState {\n  lastInteractionTime: string | null\n  interactionCount: number\n}\n\n// 组件props - 支持新的CustomConfig结构\ninterface Props extends InteractionProps {\n  /** 新的CustomConfig结构配置 */\n  customConfig?: DualDataDisplayConfig\n  /** 向后兼容：旧的config结构 */\n  config?: Partial<DualDataDisplayCustomize>\n  /** 数据源1的数据 */\n  dataSource1?: any\n  /** 数据源2的数据 */\n  dataSource2?: any\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  componentId: '',\n  customConfig: undefined,\n  config: () => ({}),\n  allowExternalControl: true,\n  showInteractionIndicator: false,\n  previewMode: false,\n  dataSource1: null,\n  dataSource2: null\n})\n\n// 组件事件定义 - 继承交互系统标准事件\ninterface Emits extends InteractionEmits {\n  (e: 'click', data: { componentId: string; timestamp: string }): void\n  (e: 'hover', data: { componentId: string; type: 'enter' | 'leave' }): void\n}\n\nconst emit = defineEmits<Emits>()\n\n// 组件状态管理\nconst componentState = reactive<ComponentState>({\n  isActive: true,\n  clickCount: 0\n})\n\n// 交互状态管理\nconst interactionState = reactive<InteractionState>({\n  lastInteractionTime: null,\n  interactionCount: 0\n})\n\n/**\n * 获取组件配置 - 支持新旧格式\n * 优先使用 customConfig.customize，回退到 config\n */\nconst currentCustomize = computed((): DualDataDisplayCustomize => {\n  // 优先使用新的customConfig结构\n  if (props.customConfig?.customize) {\n    return props.customConfig.customize\n  }\n\n  // 回退到旧的config结构（向后兼容）\n  return {\n    title: props.config?.title || '双数据展示',\n    themeColor: props.config?.themeColor || '#2080f0',\n    fontSize: props.config?.fontSize || 16,\n    showBorder: props.config?.showBorder ?? true,\n    dataSource1Label: props.config?.dataSource1Label || '数据源A',\n    dataSource2Label: props.config?.dataSource2Label || '数据源B',\n    numberFormat: props.config?.numberFormat || 'raw',\n    unit: props.config?.unit || ''\n  }\n})\n\n/**\n * 获取变换配置\n */\nconst currentTransform = computed(() => {\n  return props.customConfig?.root?.transform || { rotate: 0, scale: 1 }\n})\n\n// 计算属性：从customize中提取各个属性\nconst currentTitle = computed(() => currentCustomize.value.title)\nconst themeColor = computed(() => currentCustomize.value.themeColor)\nconst fontSize = computed(() => currentCustomize.value.fontSize)\nconst showBorder = computed(() => currentCustomize.value.showBorder)\nconst dataSource1Label = computed(() => currentCustomize.value.dataSource1Label)\nconst dataSource2Label = computed(() => currentCustomize.value.dataSource2Label)\nconst numberFormat = computed(() => currentCustomize.value.numberFormat)\nconst unit = computed(() => currentCustomize.value.unit)\n\n// 计算属性：交互指示器\nconst showInteractionIndicator = computed(() => {\n  return props.showInteractionIndicator && props.previewMode && hasActiveInteractions.value\n})\n\nconst hasActiveInteractions = computed(() => {\n  return props.interactionConfigs?.some(config => config.enabled) || false\n})\n\n/**\n * 数据格式化 - 支持对象数据提取\n */\nconst formatData = (data: any): string => {\n  if (data === null || data === undefined) {\n    return '暂无数据'\n  }\n\n  // 🔥 修复：处理对象类型的数据源\n  let actualValue = data\n  if (typeof data === 'object' && data !== null) {\n    // 🔥 新增：处理 Card2Wrapper 传递的嵌套数据结构 {type: 'json', data: {...}}\n    if (data.type && data.data && typeof data.data === 'object') {\n      // 尝试从data对象中提取第一个数值字段\n      const dataObj = data.data\n      for (const [key, val] of Object.entries(dataObj)) {\n        if (typeof val === 'number') {\n          actualValue = val\n          break\n        }\n        if (typeof val === 'string' && !isNaN(parseFloat(val as string))) {\n          actualValue = parseFloat(val as string)\n          break\n        }\n      }\n\n      // 如果data对象中没有找到数值，显示第一个字符串值\n      if (actualValue === data && Object.keys(dataObj).length > 0) {\n        const firstValue = Object.values(dataObj)[0]\n        actualValue = String(firstValue)\n      }\n    }\n    // 🔥 保持原有逻辑：处理简单的数据字段\n    else if (typeof data.value === 'number' || typeof data.value === 'string') {\n      actualValue = data.value\n    } else if (typeof data.data === 'number' || typeof data.data === 'string') {\n      actualValue = data.data\n    } else if (typeof data.val === 'number' || typeof data.val === 'string') {\n      actualValue = data.val\n    } else if (typeof data.number === 'number' || typeof data.number === 'string') {\n      actualValue = data.number\n    } else {\n      // 如果是纯对象，显示友好的提示\n      return '[需要配置数据字段]'\n    }\n  }\n\n  if (typeof actualValue === 'number') {\n    const num = Number(actualValue)\n    switch (numberFormat.value) {\n      case 'thousands':\n        return num.toLocaleString()\n      case 'decimal2':\n        return num.toFixed(2)\n      case 'percentage':\n        return (num * 100).toFixed(1) + '%'\n      default:\n        return actualValue.toString()\n    }\n  }\n\n  return String(actualValue)\n}\n\n/**\n * 更新交互状态\n */\nconst updateInteractionState = (eventType: string) => {\n  interactionState.lastInteractionTime = new Date().toISOString()\n  interactionState.interactionCount++\n\n  // 发送交互状态变化事件\n  emit('interaction-state-change', {\n    componentId: props.componentId || '',\n    state: 'active',\n    lastEventType: eventType as any,\n    timestamp: Date.now()\n  })\n}\n\n/**\n * 点击处理 - 支持交互系统\n */\nconst handleClick = () => {\n  // 更新组件状态\n  componentState.clickCount++\n  updateInteractionState('click')\n\n  // 发送标准点击事件\n  emit('click', {\n    componentId: props.componentId || '',\n    timestamp: new Date().toISOString()\n  })\n\n  // 发送交互事件（用于交互系统处理）\n  if (props.previewMode) {\n    emit('interaction-event', 'click', {\n      componentId: props.componentId,\n      clickCount: componentState.clickCount,\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\n/**\n * 悬停处理 - 支持交互系统\n */\nconst handleMouseEnter = () => {\n  updateInteractionState('hover')\n\n  emit('hover', {\n    componentId: props.componentId || '',\n    type: 'enter'\n  })\n\n  if (props.previewMode) {\n    emit('interaction-event', 'hover', {\n      componentId: props.componentId,\n      hoverType: 'enter',\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\nconst handleMouseLeave = () => {\n  emit('hover', {\n    componentId: props.componentId || '',\n    type: 'leave'\n  })\n\n  if (props.previewMode) {\n    emit('interaction-event', 'hover', {\n      componentId: props.componentId,\n      hoverType: 'leave',\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\n/**\n * 🔥 新增：监听组件属性更新事件\n * 支持跨组件属性绑定\n */\nconst handlePropertyUpdate = (event: CustomEvent) => {\n  const { propertyPath, value } = event.detail\n\n  // 根据属性路径更新本地状态\n  if (propertyPath.startsWith('customize.')) {\n    // 这里可以添加响应式更新逻辑\n    // 由于我们使用的是computed，prop变化会自动触发重新渲染\n  }\n}\n\n/**\n * 组件挂载时监听属性更新事件\n */\nonMounted(() => {\n  const element = getCurrentInstance()?.proxy?.$el\n  if (element) {\n    element.addEventListener('componentPropertyUpdate', handlePropertyUpdate)\n  }\n})\n\n/**\n * 组件卸载时移除事件监听\n */\nonUnmounted(() => {\n  const element = getCurrentInstance()?.proxy?.$el\n  if (element) {\n    element.removeEventListener('componentPropertyUpdate', handlePropertyUpdate)\n  }\n})\n</script>\n\n<template>\n  <div\n    class=\"dual-data-display\"\n    :class=\"{\n      'interaction-active': hasActiveInteractions,\n      'preview-mode': previewMode,\n      'show-indicator': showInteractionIndicator,\n      'show-border': showBorder\n    }\"\n    :style=\"{\n      '--theme-color': themeColor,\n      '--font-size': `${fontSize}px`,\n      transform: `rotate(${currentTransform.rotate}deg) scale(${currentTransform.scale})`\n    }\"\n    :data-component-id=\"componentId\"\n    @click=\"handleClick\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <div class=\"header\">\n      <h3>{{ currentTitle }}</h3>\n    </div>\n\n    <div class=\"content-section\">\n      <div class=\"data-grid\">\n        <!-- 数据源1 -->\n        <div class=\"data-item\">\n          <div class=\"data-label\">{{ dataSource1Label }}</div>\n          <div class=\"data-value\">\n            {{ formatData(dataSource1) }}\n            <span v-if=\"unit\" class=\"data-unit\">{{ unit }}</span>\n          </div>\n        </div>\n\n        <!-- 数据源2 -->\n        <div class=\"data-item\">\n          <div class=\"data-label\">{{ dataSource2Label }}</div>\n          <div class=\"data-value\">\n            {{ formatData(dataSource2) }}\n            <span v-if=\"unit\" class=\"data-unit\">{{ unit }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"info-panel\">\n        <div class=\"info-item\">\n          <span class=\"label\">组件类型:</span>\n          <span class=\"value\">双数据展示</span>\n        </div>\n        <div class=\"info-item\">\n          <span class=\"label\">数据格式:</span>\n          <span class=\"value\">{{ numberFormat }}</span>\n        </div>\n        <div class=\"info-item\">\n          <span class=\"label\">状态:</span>\n          <span class=\"value status-ready\">就绪</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- 交互指示器 -->\n    <div v-if=\"showInteractionIndicator\" class=\"interaction-indicator\">\n      <div class=\"indicator-dot\"></div>\n      <span class=\"indicator-text\">支持交互</span>\n    </div>\n\n    <!-- 组件信息和状态 -->\n    <div class=\"component-info\">\n      <div class=\"basic-info\">\n        <small>组件ID: {{ props.componentId || '未设置' }}</small>\n      </div>\n\n      <!-- 开发/调试模式下显示状态信息 -->\n      <div v-if=\"previewMode\" class=\"state-info\">\n        <div class=\"state-item\">\n          <small>点击次数: {{ componentState.clickCount }}</small>\n        </div>\n        <div class=\"state-item\">\n          <small>交互次数: {{ interactionState.interactionCount }}</small>\n        </div>\n        <div v-if=\"interactionState.lastInteractionTime\" class=\"state-item\">\n          <small>最后交互: {{ new Date(interactionState.lastInteractionTime).toLocaleTimeString() }}</small>\n        </div>\n      </div>\n\n      <!-- 🔥 新增：配置结构信息（调试用） -->\n      <div v-if=\"previewMode\" class=\"config-debug\">\n        <small>配置类型: {{ customConfig ? 'CustomConfig' : 'Legacy Config' }}</small>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.dual-data-display {\n  padding: 20px;\n  background: var(--card-color);\n  border-radius: var(--border-radius);\n  font-size: var(--font-size, 16px);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative;\n}\n\n.dual-data-display.show-border {\n  border: 1px solid var(--border-color);\n}\n\n.dual-data-display:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-color: var(--theme-color);\n}\n\n/* 交互激活状态 */\n.dual-data-display.interaction-active {\n  position: relative;\n}\n\n.dual-data-display.interaction-active:hover {\n  border-color: var(--success-color);\n  box-shadow: 0 4px 16px rgba(24, 160, 88, 0.2);\n}\n\n.header {\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--theme-color);\n}\n\n.header h3 {\n  margin: 0;\n  color: var(--text-color);\n  font-size: calc(var(--font-size, 16px) + 4px);\n  font-weight: bold;\n}\n\n.content-section {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.data-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n\n.data-item {\n  padding: 16px;\n  background: var(--body-color);\n  border-radius: 6px;\n  border-left: 4px solid var(--theme-color);\n  text-align: center;\n}\n\n.data-label {\n  font-size: calc(var(--font-size, 16px) - 2px);\n  color: var(--text-color-2);\n  margin-bottom: 8px;\n  font-weight: 500;\n}\n\n.data-value {\n  font-size: calc(var(--font-size, 16px) + 6px);\n  color: var(--text-color);\n  font-weight: bold;\n  word-break: break-all;\n}\n\n.data-unit {\n  font-size: calc(var(--font-size, 16px) + 2px);\n  color: var(--text-color-2);\n  margin-left: 4px;\n}\n\n.info-panel {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 16px;\n  background: var(--body-color);\n  border-radius: 6px;\n}\n\n.info-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n}\n\n.info-item .label {\n  color: var(--text-color-2);\n  font-weight: 500;\n}\n\n.info-item .value {\n  color: var(--text-color);\n  font-weight: bold;\n}\n\n.status-ready {\n  color: var(--success-color) !important;\n}\n\n/* 交互指示器 */\n.interaction-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  background: var(--success-color);\n  color: white;\n  font-size: 10px;\n  border-radius: 12px;\n  opacity: 0.8;\n  transition: all 0.3s ease;\n}\n\n.dual-data-display:hover .interaction-indicator {\n  opacity: 1;\n  transform: scale(1.05);\n}\n\n.indicator-dot {\n  width: 6px;\n  height: 6px;\n  background: white;\n  border-radius: 50%;\n  animation: indicator-blink 1.5s infinite;\n}\n\n@keyframes indicator-blink {\n  0%,\n  50% {\n    opacity: 1;\n  }\n  51%,\n  100% {\n    opacity: 0.3;\n  }\n}\n\n.indicator-text {\n  font-weight: 500;\n  letter-spacing: 0.5px;\n}\n\n/* 组件信息区域 */\n.component-info {\n  margin-top: 16px;\n  padding-top: 12px;\n  border-top: 1px solid var(--border-color);\n  color: var(--text-color-3);\n  font-size: calc(var(--font-size, 16px) - 4px);\n}\n\n.basic-info {\n  text-align: center;\n  margin-bottom: 8px;\n}\n\n/* 状态信息 */\n.state-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  justify-content: center;\n  padding: 8px;\n  background: var(--body-color);\n  border-radius: 4px;\n  border: 1px solid var(--border-color);\n  margin-bottom: 8px;\n}\n\n.state-item {\n  padding: 2px 6px;\n  background: var(--tag-color, var(--card-color));\n  border-radius: 3px;\n  font-size: 10px;\n  color: var(--text-color-2);\n}\n\n.state-item small {\n  font-weight: 500;\n}\n\n/* 配置调试信息 */\n.config-debug {\n  text-align: center;\n  padding: 4px 8px;\n  background: var(--info-color-suppl);\n  border-radius: 4px;\n  font-size: 10px;\n  color: var(--info-color);\n  font-weight: 500;\n}\n\n/* 响应式设计 */\n@media (max-width: 600px) {\n  .dual-data-display {\n    padding: 16px;\n  }\n\n  .data-grid {\n    grid-template-columns: 1fr;\n    gap: 16px;\n  }\n\n  .info-item {\n    flex-direction: column;\n    gap: 4px;\n    text-align: center;\n  }\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\dual-data-display\\setting.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":32,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":57},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":33,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":34,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":34,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":34,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":78},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":35,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":35,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":46}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div class=\"dual-data-display-setting\">\n    <AutoFormGenerator\n      :setting-config=\"settingConfig\"\n      :model-value=\"localConfig\"\n      @update:model-value=\"handleConfigChange\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n/**\n * dual-data-display 组件设置面板\n * 基于 settingConfig 自动生成设置界面\n */\n\nimport { reactive, watch, nextTick } from 'vue'\nimport { dualDataDisplaySettingConfig } from './settingConfig'\nimport type { DualDataDisplayConfig } from './settingConfig'\nimport AutoFormGenerator from '@/card2.1/core/AutoFormGenerator.vue'\n\n// Props接口\ninterface Props {\n  modelValue?: DualDataDisplayConfig\n  config?: DualDataDisplayConfig\n  widget?: any\n  readonly?: boolean\n}\n\n// Emits接口\ninterface Emits {\n  (e: 'update:modelValue', config: DualDataDisplayConfig): void\n  (e: 'update:config', config: DualDataDisplayConfig): void\n  (e: 'change', value: DualDataDisplayConfig, oldValue: DualDataDisplayConfig): void\n  (e: 'update', config: DualDataDisplayConfig): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  readonly: false\n})\n\nconst emit = defineEmits<Emits>()\n\n// 设置配置\nconst settingConfig = dualDataDisplaySettingConfig\n\n// 获取默认配置\nconst getDefaultConfig = (): DualDataDisplayConfig => ({\n  ...settingConfig.customConfig\n})\n\n// 本地配置状态\nconst localConfig = reactive<DualDataDisplayConfig>(props.modelValue || props.config || getDefaultConfig())\n\n// 防循环更新标志\nlet isUpdatingFromProps = false\n\n/**\n * 配置变更处理\n */\nconst handleConfigChange = (newConfig: DualDataDisplayConfig) => {\n  if (isUpdatingFromProps) return\n\n  // 更新本地配置\n  Object.assign(localConfig, newConfig)\n\n  // 发送更新事件\n  emit('update:modelValue', { ...localConfig })\n  emit('update:config', { ...localConfig })\n  emit('change', { ...localConfig }, { ...localConfig })\n  emit('update', { ...localConfig })\n}\n\n/**\n * 监听props配置变化\n */\nwatch(\n  [() => props.modelValue, () => props.config],\n  ([newModelValue, newConfig]) => {\n    if (isUpdatingFromProps) return\n\n    const sourceConfig = newModelValue || newConfig\n    if (sourceConfig) {\n      isUpdatingFromProps = true\n      try {\n        // 合并配置，保持完整的结构\n        const mergedConfig = {\n          ...getDefaultConfig(),\n          ...sourceConfig,\n          customize: {\n            ...getDefaultConfig().customize,\n            ...sourceConfig.customize\n          }\n        }\n\n        Object.assign(localConfig, mergedConfig)\n      } finally {\n        nextTick(() => {\n          setTimeout(() => {\n            isUpdatingFromProps = false\n          }, 10)\n        })\n      }\n    }\n  },\n  { deep: true, immediate: true }\n)\n</script>\n\n<style scoped>\n.dual-data-display-setting {\n  padding: 16px;\n}\n\n/* 为AutoFormGenerator提供样式支持 */\n:deep(.auto-form-generator) {\n  width: 100%;\n}\n\n:deep(.n-form-item) {\n  margin-bottom: 16px;\n}\n\n:deep(.n-form-item-label) {\n  font-weight: 500;\n  color: var(--text-color-2);\n}\n\n:deep(.form-group) {\n  margin-bottom: 20px;\n}\n\n:deep(.form-group-title) {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-color);\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid var(--border-color);\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\dual-data-display\\settingConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\simple-display\\definition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\simple-display\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\simple-display\\index.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":42,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":42,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":64},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":43,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":43,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":70},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'previewMode' is not defined.","line":98,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":98,"endColumn":61},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'interactionConfigs' is not defined.","line":102,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":34},{"ruleId":"vue/no-undef-properties","severity":1,"message":"'componentId' is not defined.","line":114,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is assigned a value but never used.","line":185,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'value' is assigned a value but never used.","line":185,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script setup lang=\"ts\">\n/**\n * simple-display 主组件\n * 基于新的三文件结构标准，支持 CustomConfig 类型配置和属性绑定\n */\n\nimport { computed, reactive, getCurrentInstance, onMounted, onUnmounted } from 'vue'\nimport type { InteractionProps, InteractionEmits } from '@/card2.1/types/interaction-component'\nimport type { SimpleDisplayConfig, SimpleDisplayCustomize } from './settingConfig'\n\n// 组件状态接口\ninterface ComponentState {\n  isActive: boolean\n  clickCount: number\n}\n\n// 交互状态接口\ninterface InteractionState {\n  lastInteractionTime: string | null\n  interactionCount: number\n}\n\n// 组件props - 支持新的CustomConfig结构\ninterface Props extends InteractionProps {\n  /** 新的CustomConfig结构配置 */\n  customConfig?: SimpleDisplayConfig\n  /** 向后兼容：旧的config结构 */\n  config?: Partial<SimpleDisplayCustomize>\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  componentId: '',\n  customConfig: undefined,\n  config: () => ({}),\n  allowExternalControl: true,\n  showInteractionIndicator: false,\n  previewMode: false\n})\n\n// 组件事件定义 - 继承交互系统标准事件\ninterface Emits extends InteractionEmits {\n  (e: 'click', data: { componentId: string; timestamp: string }): void\n  (e: 'hover', data: { componentId: string; type: 'enter' | 'leave' }): void\n}\n\nconst emit = defineEmits<Emits>()\n\n// 组件状态管理\nconst componentState = reactive<ComponentState>({\n  isActive: true,\n  clickCount: 0\n})\n\n// 交互状态管理\nconst interactionState = reactive<InteractionState>({\n  lastInteractionTime: null,\n  interactionCount: 0\n})\n\n/**\n * 获取组件配置 - 支持新旧格式\n * 优先使用 customConfig.customize，回退到 config\n */\nconst currentCustomize = computed((): SimpleDisplayCustomize => {\n  // 优先使用新的customConfig结构\n  if (props.customConfig?.customize) {\n    return props.customConfig.customize\n  }\n\n  // 回退到旧的config结构（向后兼容）\n  return {\n    title: props.config?.title || '简单展示组件',\n    content: props.config?.content || '这是一个静态展示组件，不需要数据源',\n    themeColor: props.config?.themeColor || '#2080f0',\n    fontSize: props.config?.fontSize || 16,\n    showIcon: props.config?.showIcon ?? true,\n    iconName: props.config?.iconName || '📊'\n  }\n})\n\n/**\n * 获取变换配置\n */\nconst currentTransform = computed(() => {\n  return props.customConfig?.root?.transform || { rotate: 0, scale: 1 }\n})\n\n// 计算属性：从customize中提取各个属性\nconst currentTitle = computed(() => currentCustomize.value.title)\nconst currentContent = computed(() => currentCustomize.value.content)\nconst themeColor = computed(() => currentCustomize.value.themeColor)\nconst fontSize = computed(() => currentCustomize.value.fontSize)\nconst showIcon = computed(() => currentCustomize.value.showIcon)\nconst iconName = computed(() => currentCustomize.value.iconName)\n\n// 计算属性：交互指示器\nconst showInteractionIndicator = computed(() => {\n  return props.showInteractionIndicator && props.previewMode && hasActiveInteractions.value\n})\n\nconst hasActiveInteractions = computed(() => {\n  return props.interactionConfigs?.some(config => config.enabled) || false\n})\n\n/**\n * 更新交互状态\n */\nconst updateInteractionState = (eventType: string) => {\n  interactionState.lastInteractionTime = new Date().toISOString()\n  interactionState.interactionCount++\n\n  // 发送交互状态变化事件\n  emit('interaction-state-change', {\n    componentId: props.componentId || '',\n    state: 'active',\n    lastEventType: eventType as any,\n    timestamp: Date.now()\n  })\n}\n\n/**\n * 点击处理 - 支持交互系统\n */\nconst handleClick = () => {\n  // 更新组件状态\n  componentState.clickCount++\n  updateInteractionState('click')\n\n  // 发送标准点击事件\n  emit('click', {\n    componentId: props.componentId || '',\n    timestamp: new Date().toISOString()\n  })\n\n  // 发送交互事件（用于交互系统处理）\n  if (props.previewMode) {\n    emit('interaction-event', 'click', {\n      componentId: props.componentId,\n      clickCount: componentState.clickCount,\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\n/**\n * 悬停处理 - 支持交互系统\n */\nconst handleMouseEnter = () => {\n  updateInteractionState('hover')\n\n  emit('hover', {\n    componentId: props.componentId || '',\n    type: 'enter'\n  })\n\n  if (props.previewMode) {\n    emit('interaction-event', 'hover', {\n      componentId: props.componentId,\n      hoverType: 'enter',\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\nconst handleMouseLeave = () => {\n  emit('hover', {\n    componentId: props.componentId || '',\n    type: 'leave'\n  })\n\n  if (props.previewMode) {\n    emit('interaction-event', 'hover', {\n      componentId: props.componentId,\n      hoverType: 'leave',\n      timestamp: new Date().toISOString()\n    })\n  }\n}\n\n/**\n * 🔥 新增：监听组件属性更新事件\n * 支持跨组件属性绑定\n */\nconst handlePropertyUpdate = (event: CustomEvent) => {\n  const { propertyPath, value } = event.detail\n\n  // 根据属性路径更新本地状态\n  if (propertyPath.startsWith('customize.')) {\n    // 这里可以添加响应式更新逻辑\n    // 由于我们使用的是computed，prop变化会自动触发重新渲染\n  }\n}\n\n/**\n * 组件挂载时监听属性更新事件\n */\nonMounted(() => {\n  const element = getCurrentInstance()?.proxy?.$el\n  if (element) {\n    element.addEventListener('componentPropertyUpdate', handlePropertyUpdate)\n  }\n})\n\n/**\n * 组件卸载时移除事件监听\n */\nonUnmounted(() => {\n  const element = getCurrentInstance()?.proxy?.$el\n  if (element) {\n    element.removeEventListener('componentPropertyUpdate', handlePropertyUpdate)\n  }\n})\n</script>\n\n<template>\n  <div\n    class=\"simple-display\"\n    :class=\"{\n      'interaction-active': hasActiveInteractions,\n      'preview-mode': previewMode,\n      'show-indicator': showInteractionIndicator\n    }\"\n    :style=\"{\n      '--theme-color': themeColor,\n      '--font-size': `${fontSize}px`,\n      transform: `rotate(${currentTransform.rotate}deg) scale(${currentTransform.scale})`\n    }\"\n    :data-component-id=\"componentId\"\n    @click=\"handleClick\"\n    @mouseenter=\"handleMouseEnter\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <div class=\"header\">\n      <div class=\"title-section\">\n        <span v-if=\"showIcon\" class=\"icon\">{{ iconName }}</span>\n        <h3>{{ currentTitle }}</h3>\n      </div>\n    </div>\n\n    <div class=\"content-section\">\n      <p class=\"main-content\">{{ currentContent }}</p>\n\n      <div class=\"info-panel\">\n        <div class=\"info-item\">\n          <span class=\"label\">组件类型:</span>\n          <span class=\"value\">静态展示</span>\n        </div>\n        <div class=\"info-item\">\n          <span class=\"label\">数据源:</span>\n          <span class=\"value\">无需数据源</span>\n        </div>\n        <div class=\"info-item\">\n          <span class=\"label\">状态:</span>\n          <span class=\"value status-ready\">就绪</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- 交互指示器 -->\n    <div v-if=\"showInteractionIndicator\" class=\"interaction-indicator\">\n      <div class=\"indicator-dot\"></div>\n      <span class=\"indicator-text\">支持交互</span>\n    </div>\n\n    <!-- 组件信息和状态 -->\n    <div class=\"component-info\">\n      <div class=\"basic-info\">\n        <small>组件ID: {{ props.componentId || '未设置' }}</small>\n      </div>\n\n      <!-- 开发/调试模式下显示状态信息 -->\n      <div v-if=\"previewMode\" class=\"state-info\">\n        <div class=\"state-item\">\n          <small>点击次数: {{ componentState.clickCount }}</small>\n        </div>\n        <div class=\"state-item\">\n          <small>交互次数: {{ interactionState.interactionCount }}</small>\n        </div>\n        <div v-if=\"interactionState.lastInteractionTime\" class=\"state-item\">\n          <small>最后交互: {{ new Date(interactionState.lastInteractionTime).toLocaleTimeString() }}</small>\n        </div>\n      </div>\n\n      <!-- 🔥 新增：配置结构信息（调试用） -->\n      <div v-if=\"previewMode\" class=\"config-debug\">\n        <small>配置类型: {{ customConfig ? 'CustomConfig' : 'Legacy Config' }}</small>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.simple-display {\n  padding: 20px;\n  background: var(--card-color);\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  font-size: var(--font-size, 16px);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  position: relative; /* 为属性绑定事件定位 */\n}\n\n.simple-display:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  border-color: var(--theme-color);\n}\n\n/* 交互激活状态 */\n.simple-display.interaction-active {\n  position: relative;\n}\n\n.simple-display.interaction-active:hover {\n  border-color: var(--success-color);\n  box-shadow: 0 4px 16px rgba(24, 160, 88, 0.2);\n}\n\n/* 预览模式样式 */\n.simple-display.preview-mode.interaction-active {\n  cursor: pointer;\n}\n\n.simple-display.preview-mode.interaction-active::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  border: 2px solid transparent;\n  border-radius: calc(var(--border-radius) + 2px);\n  transition: all 0.3s ease;\n}\n\n.simple-display.preview-mode.interaction-active:hover::before {\n  border-color: var(--success-color);\n  animation: interaction-pulse 2s infinite;\n}\n\n@keyframes interaction-pulse {\n  0%,\n  100% {\n    border-color: var(--success-color);\n    opacity: 1;\n  }\n  50% {\n    border-color: var(--info-color);\n    opacity: 0.6;\n  }\n}\n\n.header {\n  margin-bottom: 20px;\n  padding-bottom: 12px;\n  border-bottom: 2px solid var(--theme-color);\n}\n\n.title-section {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.icon {\n  font-size: calc(var(--font-size, 16px) + 8px);\n  color: var(--theme-color);\n}\n\n.title-section h3 {\n  margin: 0;\n  color: var(--text-color);\n  font-size: calc(var(--font-size, 16px) + 4px);\n  font-weight: bold;\n}\n\n.content-section {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.main-content {\n  margin: 0;\n  color: var(--text-color);\n  line-height: 1.6;\n  padding: 16px;\n  background: var(--body-color);\n  border-radius: 6px;\n  border-left: 4px solid var(--theme-color);\n}\n\n.info-panel {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 16px;\n  background: var(--body-color);\n  border-radius: 6px;\n}\n\n.info-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 0;\n}\n\n.info-item .label {\n  color: var(--text-color-2);\n  font-weight: 500;\n}\n\n.info-item .value {\n  color: var(--text-color);\n  font-weight: bold;\n}\n\n.status-ready {\n  color: var(--success-color) !important;\n}\n\n/* 交互指示器 */\n.interaction-indicator {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n  background: var(--success-color);\n  color: white;\n  font-size: 10px;\n  border-radius: 12px;\n  opacity: 0.8;\n  transition: all 0.3s ease;\n}\n\n.simple-display:hover .interaction-indicator {\n  opacity: 1;\n  transform: scale(1.05);\n}\n\n.indicator-dot {\n  width: 6px;\n  height: 6px;\n  background: white;\n  border-radius: 50%;\n  animation: indicator-blink 1.5s infinite;\n}\n\n@keyframes indicator-blink {\n  0%,\n  50% {\n    opacity: 1;\n  }\n  51%,\n  100% {\n    opacity: 0.3;\n  }\n}\n\n.indicator-text {\n  font-weight: 500;\n  letter-spacing: 0.5px;\n}\n\n/* 组件信息区域 */\n.component-info {\n  margin-top: 16px;\n  padding-top: 12px;\n  border-top: 1px solid var(--border-color);\n  color: var(--text-color-3);\n  font-size: calc(var(--font-size, 16px) - 4px);\n}\n\n.basic-info {\n  text-align: center;\n  margin-bottom: 8px;\n}\n\n/* 状态信息 */\n.state-info {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  justify-content: center;\n  padding: 8px;\n  background: var(--body-color);\n  border-radius: 4px;\n  border: 1px solid var(--border-color);\n  margin-bottom: 8px;\n}\n\n.state-item {\n  padding: 2px 6px;\n  background: var(--tag-color, var(--card-color));\n  border-radius: 3px;\n  font-size: 10px;\n  color: var(--text-color-2);\n}\n\n.state-item small {\n  font-weight: 500;\n}\n\n/* 配置调试信息 */\n.config-debug {\n  text-align: center;\n  padding: 4px 8px;\n  background: var(--info-color-suppl);\n  border-radius: 4px;\n  font-size: 10px;\n  color: var(--info-color);\n  font-weight: 500;\n}\n\n/* 响应式设计 */\n@media (max-width: 600px) {\n  .simple-display {\n    padding: 16px;\n  }\n\n  .title-section {\n    flex-direction: column;\n    gap: 8px;\n    text-align: center;\n  }\n\n  .info-item {\n    flex-direction: column;\n    gap: 4px;\n    text-align: center;\n  }\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\simple-display\\setting.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":32,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":33,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":34,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":34,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":34,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":74},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":35,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":35,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div class=\"simple-display-setting\">\n    <AutoFormGenerator\n      :setting-config=\"settingConfig\"\n      :model-value=\"localConfig\"\n      @update:model-value=\"handleConfigChange\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n/**\n * simple-display 组件设置面板\n * 基于 settingConfig 自动生成设置界面\n */\n\nimport { reactive, watch, nextTick } from 'vue'\nimport { simpleDisplaySettingConfig } from './settingConfig'\nimport type { SimpleDisplayConfig } from './settingConfig'\nimport AutoFormGenerator from '@/card2.1/core/AutoFormGenerator.vue'\n\n// Props接口\ninterface Props {\n  modelValue?: SimpleDisplayConfig\n  config?: SimpleDisplayConfig\n  widget?: any\n  readonly?: boolean\n}\n\n// Emits接口\ninterface Emits {\n  (e: 'update:modelValue', config: SimpleDisplayConfig): void\n  (e: 'update:config', config: SimpleDisplayConfig): void\n  (e: 'change', value: SimpleDisplayConfig, oldValue: SimpleDisplayConfig): void\n  (e: 'update', config: SimpleDisplayConfig): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  readonly: false\n})\n\nconst emit = defineEmits<Emits>()\n\n// 设置配置\nconst settingConfig = simpleDisplaySettingConfig\n\n// 获取默认配置\nconst getDefaultConfig = (): SimpleDisplayConfig => ({\n  ...settingConfig.customConfig\n})\n\n// 本地配置状态\nconst localConfig = reactive<SimpleDisplayConfig>(props.modelValue || props.config || getDefaultConfig())\n\n// 防循环更新标志\nlet isUpdatingFromProps = false\n\n/**\n * 配置变更处理\n */\nconst handleConfigChange = (newConfig: SimpleDisplayConfig) => {\n  if (isUpdatingFromProps) return\n\n  // 更新本地配置\n  Object.assign(localConfig, newConfig)\n\n  // 发送更新事件\n  emit('update:modelValue', { ...localConfig })\n  emit('update:config', { ...localConfig })\n  emit('change', { ...localConfig }, { ...localConfig })\n  emit('update', { ...localConfig })\n}\n\n/**\n * 监听props配置变化\n */\nwatch(\n  [() => props.modelValue, () => props.config],\n  ([newModelValue, newConfig]) => {\n    if (isUpdatingFromProps) return\n\n    const sourceConfig = newModelValue || newConfig\n    if (sourceConfig) {\n      isUpdatingFromProps = true\n      try {\n        // 合并配置，保持完整的结构\n        const mergedConfig = {\n          ...getDefaultConfig(),\n          ...sourceConfig,\n          customize: {\n            ...getDefaultConfig().customize,\n            ...sourceConfig.customize\n          }\n        }\n\n        Object.assign(localConfig, mergedConfig)\n      } finally {\n        nextTick(() => {\n          setTimeout(() => {\n            isUpdatingFromProps = false\n          }, 10)\n        })\n      }\n    }\n  },\n  { deep: true, immediate: true }\n)\n</script>\n\n<style scoped>\n.simple-display-setting {\n  padding: 16px;\n}\n\n/* 为AutoFormGenerator提供样式支持 */\n:deep(.auto-form-generator) {\n  width: 100%;\n}\n\n:deep(.n-form-item) {\n  margin-bottom: 16px;\n}\n\n:deep(.n-form-item-label) {\n  font-weight: 500;\n  color: var(--text-color-2);\n}\n\n:deep(.form-group) {\n  margin-bottom: 20px;\n}\n\n:deep(.form-group-title) {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-color);\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid var(--border-color);\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\simple-display\\settingConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\triple-data-display\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\triple-data-display\\index.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":92,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":92,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":93,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":93,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":76},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":94,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":94,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":95,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":95,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is defined but never used.","line":205,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is defined but never used.","line":205,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":210,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":210,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":214,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":214,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":220,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":220,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":223,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'key' is assigned a value but never used.","line":223,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":305,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":305,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":305,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":305,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[9972,9972],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":317,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":317,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":317,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":317,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[10149,10149],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'newConfig' is defined but never used.","line":326,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":326,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newConfig' is defined but never used.","line":326,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":12}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div :class=\"['triple-data-display-component', layoutClass]\" :style=\"componentStyle\" @click=\"handleClick\">\n    <!-- 组件标题 -->\n    <div v-if=\"currentConfig.customize.title\" class=\"component-title\">\n      {{ currentConfig.customize.title }}\n    </div>\n\n    <!-- 三个数据源展示区域 -->\n    <div class=\"data-sources-container\">\n      <!-- 数据源1 -->\n      <div class=\"data-source-item\">\n        <div class=\"data-label\">{{ currentConfig.customize.dataSource1Label }}</div>\n        <div class=\"data-value\">\n          {{ formatNumber(dataSource1, 0) }}\n          <span v-if=\"currentConfig.customize.unit\" class=\"data-unit\">{{ currentConfig.customize.unit }}</span>\n        </div>\n      </div>\n\n      <!-- 数据源2 -->\n      <div class=\"data-source-item\">\n        <div class=\"data-label\">{{ currentConfig.customize.dataSource2Label }}</div>\n        <div class=\"data-value\">\n          {{ formatNumber(dataSource2, 1) }}\n          <span v-if=\"currentConfig.customize.unit\" class=\"data-unit\">{{ currentConfig.customize.unit }}</span>\n        </div>\n      </div>\n\n      <!-- 数据源3 -->\n      <div class=\"data-source-item\">\n        <div class=\"data-label\">{{ currentConfig.customize.dataSource3Label }}</div>\n        <div class=\"data-value\">\n          {{ formatNumber(dataSource3, 2) }}\n          <span v-if=\"currentConfig.customize.unit\" class=\"data-unit\">{{ currentConfig.customize.unit }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- JSON数据显示 -->\n    <div v-if=\"dataSource1\" class=\"json-display\">\n      <pre>{{ JSON.stringify(dataSource1, null, 2) }}</pre>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n/**\n * triple-data-display 组件\n * 展示三个数据源的数据对比，支持多种布局模式和主题定制\n */\n\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport { interactionManager } from '@/card2.1/core/interaction-manager'\nimport type { InteractionConfig } from '@/card2.1/core/interaction-types'\nimport type { TripleDataDisplayConfig } from './settingConfig'\nimport { tripleDataDisplaySettingConfig } from './settingConfig'\n\n// 组件属性接口 - 支持新的 CustomConfig 结构\ninterface Props {\n  componentId?: string\n  // 数据源\n  dataSource1?: any\n  dataSource2?: any\n  dataSource3?: any\n  // 新的配置结构（优先）\n  modelValue?: TripleDataDisplayConfig\n  // 向后兼容的配置结构\n  config?:\n    | TripleDataDisplayConfig\n    | {\n        title?: string\n        themeColor?: string\n        fontSize?: number\n        showBorder?: boolean\n        layout?: 'grid' | 'horizontal' | 'vertical'\n      }\n  // 交互配置\n  interactionConfigs?: InteractionConfig[]\n  // 调试模式\n  debugMode?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  componentId: '',\n  dataSource1: null,\n  dataSource2: null,\n  dataSource3: null,\n  debugMode: false\n})\n\n// 事件定义\ninterface Emits {\n  (e: 'update:modelValue', config: TripleDataDisplayConfig): void\n  (e: 'click', data: { componentId: string; dataSource: string; data: any }): void\n  (e: 'refresh', componentId: string): void\n  (e: 'interaction', data: { type: string; componentId: string; payload: any }): void\n}\n\nconst emit = defineEmits<Emits>()\n\n/**\n * 配置计算 - 支持新旧配置格式\n */\nconst currentConfig = computed<TripleDataDisplayConfig>(() => {\n  // 优先使用 modelValue（新格式）\n  if (props.modelValue) {\n    return props.modelValue\n  }\n\n  // 其次使用 config\n  if (props.config) {\n    // 检查是否是新的 CustomConfig 格式\n    if ('customize' in props.config) {\n      return props.config as TripleDataDisplayConfig\n    }\n\n    // 🔥 修复：检查是否是扁平化配置（从Card2Wrapper传来的）\n    const configKeys = Object.keys(props.config)\n    const hasExpectedFlatKeys = ['title', 'dataSource1Label', 'dataSource2Label', 'dataSource3Label'].some(key =>\n      configKeys.includes(key)\n    )\n\n    if (hasExpectedFlatKeys) {\n      // 扁平化配置转换为嵌套格式\n      const flatConfig = props.config as any\n      return {\n        ...tripleDataDisplaySettingConfig.customConfig,\n        customize: {\n          ...tripleDataDisplaySettingConfig.customConfig.customize,\n          // 从扁平化配置中提取值\n          title: flatConfig.title || tripleDataDisplaySettingConfig.customConfig.customize.title,\n          themeColor: flatConfig.themeColor || tripleDataDisplaySettingConfig.customConfig.customize.themeColor,\n          fontSize: flatConfig.fontSize || tripleDataDisplaySettingConfig.customConfig.customize.fontSize,\n          showBorder:\n            flatConfig.showBorder !== undefined\n              ? flatConfig.showBorder\n              : tripleDataDisplaySettingConfig.customConfig.customize.showBorder,\n          layout: flatConfig.layout || tripleDataDisplaySettingConfig.customConfig.customize.layout,\n          dataSource1Label:\n            flatConfig.dataSource1Label || tripleDataDisplaySettingConfig.customConfig.customize.dataSource1Label,\n          dataSource2Label:\n            flatConfig.dataSource2Label || tripleDataDisplaySettingConfig.customConfig.customize.dataSource2Label,\n          dataSource3Label:\n            flatConfig.dataSource3Label || tripleDataDisplaySettingConfig.customConfig.customize.dataSource3Label,\n          numberFormat: flatConfig.numberFormat || tripleDataDisplaySettingConfig.customConfig.customize.numberFormat,\n          unit: flatConfig.unit || tripleDataDisplaySettingConfig.customConfig.customize.unit\n        }\n      }\n    }\n\n    // 转换旧格式到新格式（保持向后兼容）\n    const legacyConfig = props.config as any\n    return {\n      ...tripleDataDisplaySettingConfig.customConfig,\n      customize: {\n        ...tripleDataDisplaySettingConfig.customConfig.customize,\n        title: legacyConfig.title || tripleDataDisplaySettingConfig.customConfig.customize.title,\n        themeColor: legacyConfig.themeColor || tripleDataDisplaySettingConfig.customConfig.customize.themeColor,\n        fontSize: legacyConfig.fontSize || tripleDataDisplaySettingConfig.customConfig.customize.fontSize,\n        showBorder:\n          legacyConfig.showBorder !== undefined\n            ? legacyConfig.showBorder\n            : tripleDataDisplaySettingConfig.customConfig.customize.showBorder,\n        layout: legacyConfig.layout || tripleDataDisplaySettingConfig.customConfig.customize.layout\n      }\n    }\n  }\n\n  // 使用默认配置\n  return tripleDataDisplaySettingConfig.customConfig\n})\n\n/**\n * 布局样式类名\n */\nconst layoutClass = computed(() => {\n  const layout = currentConfig.value.customize.layout\n  return `layout-${layout}`\n})\n\n/**\n * 组件样式计算\n */\nconst componentStyle = computed(() => {\n  const customize = currentConfig.value.customize\n  return {\n    '--theme-color': customize.themeColor,\n    '--font-size': `${customize.fontSize}px`,\n    border: customize.showBorder ? '1px solid var(--border-color)' : 'none'\n  }\n})\n\n/**\n * 数字格式化工具 - 支持对象数据提取和多字段智能分配\n */\nconst formatNumber = (value: any, dataSourceIndex: number = 0): string => {\n  if (value === null || value === undefined || value === '') return '--'\n\n  // 🔥 修复：处理对象类型的数据源\n  let actualValue = value\n  if (typeof value === 'object' && value !== null) {\n    // 🔥 新增：处理 Card2Wrapper 传递的嵌套数据结构 {type: 'json', data: {...}}\n    if (value.type && value.data && typeof value.data === 'object') {\n      const dataObj = value.data\n      const numericEntries = Object.entries(dataObj).filter(\n        ([key, val]) => typeof val === 'number' || (typeof val === 'string' && !isNaN(parseFloat(val as string)))\n      )\n\n      // 🎯 智能字段分配：根据数据源索引分配不同字段\n      if (numericEntries.length > dataSourceIndex) {\n        const [key, val] = numericEntries[dataSourceIndex]\n        actualValue = typeof val === 'number' ? val : parseFloat(val as string)\n      } else if (numericEntries.length > 0) {\n        // 如果没有足够的数字字段，使用第一个\n        const [key, val] = numericEntries[0]\n        actualValue = typeof val === 'number' ? val : parseFloat(val as string)\n      } else {\n        // 如果没有数字字段，使用所有字段中的某个\n        const allEntries = Object.entries(dataObj)\n        if (allEntries.length > dataSourceIndex) {\n          const [key, val] = allEntries[dataSourceIndex]\n          actualValue = String(val)\n        } else if (allEntries.length > 0) {\n          const [key, val] = allEntries[0]\n          actualValue = String(val)\n        }\n      }\n    }\n    // 🔥 保持原有逻辑：处理简单的数据字段\n    else if (typeof value.value === 'number' || typeof value.value === 'string') {\n      actualValue = value.value\n    } else if (typeof value.data === 'number' || typeof value.data === 'string') {\n      actualValue = value.data\n    } else if (typeof value.val === 'number' || typeof value.val === 'string') {\n      actualValue = value.val\n    } else if (typeof value.number === 'number' || typeof value.number === 'string') {\n      actualValue = value.number\n    } else {\n      return '[需要配置数据字段]'\n    }\n  }\n\n  const numValue = typeof actualValue === 'number' ? actualValue : parseFloat(String(actualValue))\n  if (isNaN(numValue)) {\n    return String(actualValue)\n  }\n\n  const format = currentConfig.value.customize.numberFormat\n\n  switch (format) {\n    case 'thousands':\n      return numValue.toLocaleString()\n    case 'decimal2':\n      return numValue.toFixed(2)\n    case 'percentage':\n      return `${(numValue * 100).toFixed(1)}%`\n    default:\n      return String(numValue)\n  }\n}\n\n// 交互系统状态\nconst isInteractionEnabled = ref(false)\nconst registeredEvents = ref<Set<string>>(new Set())\n\n/**\n * 点击事件处理\n */\nconst handleClick = () => {\n  // 发送点击事件\n  emit('click', {\n    componentId: props.componentId,\n    dataSource: 'triple-data-display',\n    data: {\n      dataSource1: props.dataSource1,\n      dataSource2: props.dataSource2,\n      dataSource3: props.dataSource3\n    }\n  })\n}\n\n/**\n * 监听属性更新事件（用于跨组件属性绑定）\n */\nconst handlePropertyUpdate = (data: any) => {\n  if (data && typeof data === 'object') {\n    // 更新配置并触发事件\n    const newConfig = { ...currentConfig.value, ...data }\n    emit('update:modelValue', newConfig)\n  }\n}\n\n/**\n * 组件挂载时的初始化\n */\nonMounted(() => {\n  // 注册属性更新监听器（用于跨组件属性绑定）\n  if (props.componentId) {\n    interactionManager.watchComponentProperty(props.componentId, handlePropertyUpdate)\n  }\n\n  // 初始化交互配置\n  if (props.interactionConfigs && props.interactionConfigs.length > 0) {\n    try {\n      isInteractionEnabled.value = true\n    } catch (error) {}\n  }\n})\n\n/**\n * 组件卸载时清理\n */\nonUnmounted(() => {\n  // 清理交互系统监听器\n  if (props.componentId && registeredEvents.value.size > 0) {\n    try {\n      // 这里可以添加清理逻辑\n    } catch (error) {}\n  }\n})\n\n/**\n * 监听配置变化\n */\nwatch(\n  () => currentConfig.value,\n  newConfig => {},\n  { deep: true }\n)\n</script>\n\n<style scoped>\n.triple-data-display-component {\n  width: 100%;\n  height: 100%;\n  padding: 16px;\n  background: var(--card-color);\n  border-radius: var(--border-radius);\n  display: flex;\n  flex-direction: column;\n  font-size: var(--font-size, 16px);\n  color: var(--text-color);\n  position: relative;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.triple-data-display-component:hover {\n  box-shadow: var(--box-shadow);\n}\n\n.component-title {\n  font-size: calc(var(--font-size, 16px) + 2px);\n  font-weight: 600;\n  color: var(--theme-color);\n  margin-bottom: 16px;\n  text-align: center;\n}\n\n.data-sources-container {\n  flex: 1;\n  display: flex;\n  gap: 12px;\n  align-items: center;\n  justify-content: space-between;\n}\n\n/* 网格布局 */\n.layout-grid .data-sources-container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 16px;\n  align-items: stretch;\n}\n\n/* 水平布局 */\n.layout-horizontal .data-sources-container {\n  flex-direction: row;\n}\n\n/* 垂直布局 */\n.layout-vertical .data-sources-container {\n  flex-direction: column;\n  align-items: stretch;\n}\n\n.data-source-item {\n  flex: 1;\n  padding: 12px;\n  background: var(--body-color);\n  border-radius: calc(var(--border-radius) * 0.5);\n  border: 1px solid var(--border-color);\n  text-align: center;\n  transition: all 0.2s ease;\n}\n\n.data-source-item:hover {\n  border-color: var(--theme-color);\n  transform: translateY(-1px);\n}\n\n.data-label {\n  font-size: calc(var(--font-size, 16px) - 2px);\n  color: var(--text-color-2);\n  margin-bottom: 8px;\n}\n\n.data-value {\n  font-size: calc(var(--font-size, 16px) + 6px);\n  font-weight: 600;\n  color: var(--theme-color);\n}\n\n.data-unit {\n  font-size: calc(var(--font-size, 16px) - 2px);\n  font-weight: 400;\n  color: var(--text-color-3);\n  margin-left: 4px;\n}\n\n.json-display {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  background: var(--body-color);\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  padding: 12px;\n  z-index: 10;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.json-display pre {\n  font-size: 10px;\n  margin: 0;\n  color: var(--text-color-2);\n  overflow: auto;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n/* 响应式调整 */\n@media (max-width: 600px) {\n  .layout-grid .data-sources-container,\n  .layout-horizontal .data-sources-container {\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  .data-source-item {\n    margin-bottom: 8px;\n  }\n}\n\n/* 暗色主题适配 */\n[data-theme='dark'] .triple-data-display-component {\n  border-color: var(--border-color);\n}\n\n[data-theme='dark'] .data-source-item {\n  background: var(--modal-color);\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\triple-data-display\\setting.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":32,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":32,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":33,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":33,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":34,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":34,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":34,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":82},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":35,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":35,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div class=\"triple-data-display-setting\">\n    <AutoFormGenerator\n      :setting-config=\"settingConfig\"\n      :model-value=\"localConfig\"\n      @update:model-value=\"handleConfigChange\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n/**\n * triple-data-display 组件设置面板\n * 基于 settingConfig 自动生成设置界面\n */\n\nimport { reactive, watch, nextTick } from 'vue'\nimport { tripleDataDisplaySettingConfig } from './settingConfig'\nimport type { TripleDataDisplayConfig } from './settingConfig'\nimport AutoFormGenerator from '@/card2.1/core/AutoFormGenerator.vue'\n\n// Props接口\ninterface Props {\n  modelValue?: TripleDataDisplayConfig\n  config?: TripleDataDisplayConfig\n  widget?: any\n  readonly?: boolean\n}\n\n// Emits接口\ninterface Emits {\n  (e: 'update:modelValue', config: TripleDataDisplayConfig): void\n  (e: 'update:config', config: TripleDataDisplayConfig): void\n  (e: 'change', value: TripleDataDisplayConfig, oldValue: TripleDataDisplayConfig): void\n  (e: 'update', config: TripleDataDisplayConfig): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  readonly: false\n})\n\nconst emit = defineEmits<Emits>()\n\n// 设置配置\nconst settingConfig = tripleDataDisplaySettingConfig\n\n// 获取默认配置\nconst getDefaultConfig = (): TripleDataDisplayConfig => ({\n  ...settingConfig.customConfig\n})\n\n// 本地配置状态\nconst localConfig = reactive<TripleDataDisplayConfig>(props.modelValue || props.config || getDefaultConfig())\n\n// 防循环更新标志\nlet isUpdatingFromProps = false\n\n/**\n * 配置变更处理\n */\nconst handleConfigChange = (newConfig: TripleDataDisplayConfig) => {\n  if (isUpdatingFromProps) return\n\n  // 更新本地配置\n  Object.assign(localConfig, newConfig)\n\n  // 发送更新事件\n  emit('update:modelValue', { ...localConfig })\n  emit('update:config', { ...localConfig })\n  emit('change', { ...localConfig }, { ...localConfig })\n  emit('update', { ...localConfig })\n}\n\n/**\n * 监听props配置变化\n */\nwatch(\n  [() => props.modelValue, () => props.config],\n  ([newModelValue, newConfig]) => {\n    if (isUpdatingFromProps) return\n\n    const sourceConfig = newModelValue || newConfig\n    if (sourceConfig) {\n      isUpdatingFromProps = true\n      try {\n        // 合并配置，保持完整的结构\n        const mergedConfig = {\n          ...getDefaultConfig(),\n          ...sourceConfig,\n          customize: {\n            ...getDefaultConfig().customize,\n            ...sourceConfig.customize\n          }\n        }\n\n        Object.assign(localConfig, mergedConfig)\n      } finally {\n        nextTick(() => {\n          setTimeout(() => {\n            isUpdatingFromProps = false\n          }, 10)\n        })\n      }\n    }\n  },\n  { deep: true, immediate: true }\n)\n</script>\n\n<style scoped>\n.triple-data-display-setting {\n  padding: 16px;\n}\n\n/* 为AutoFormGenerator提供样式支持 */\n:deep(.auto-form-generator) {\n  width: 100%;\n}\n\n:deep(.n-form-item) {\n  margin-bottom: 16px;\n}\n\n:deep(.n-form-item-label) {\n  font-weight: 500;\n  color: var(--text-color-2);\n}\n\n:deep(.form-group) {\n  margin-bottom: 20px;\n}\n\n:deep(.form-group-title) {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-color);\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid var(--border-color);\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\components\\triple-data-display\\settingConfig.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\AutoFormGenerator.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'FormValidationError' is defined but never used.","line":195,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FormValidationError' is defined but never used.","line":195,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":216,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":216,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validationErrors' is defined but never used.","line":396,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":396,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div class=\"auto-form-generator\">\n    <n-form\n      ref=\"formRef\"\n      :model=\"localValue\"\n      :label-placement=\"labelPlacement\"\n      :label-width=\"labelWidth\"\n      :disabled=\"disabled\"\n    >\n      <!-- 按组分组显示设置项 -->\n      <div v-for=\"groupName in groupNames\" :key=\"groupName\" class=\"form-group\">\n        <!-- 组标题 -->\n        <div v-if=\"groupName !== 'default'\" class=\"form-group-title\">\n          {{ groupName }}\n        </div>\n\n        <!-- 组内的表单项 -->\n        <n-form-item\n          v-for=\"setting in getSettingsByGroup(groupName)\"\n          :key=\"setting.path\"\n          :label=\"setting.label\"\n          :path=\"setting.path\"\n          :rule=\"getValidationRules(setting)\"\n        >\n          <!-- 输入框 -->\n          <n-input\n            v-if=\"setting.controlType === 'INPUT' || setting.controlType === 'input'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :placeholder=\"setting.options?.placeholder\"\n            :disabled=\"setting.options?.disabled\"\n            :clearable=\"setting.options?.clearable ?? true\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 文本域 -->\n          <n-input\n            v-else-if=\"setting.controlType === 'TEXTAREA' || setting.controlType === 'textarea'\"\n            type=\"textarea\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :placeholder=\"setting.options?.placeholder\"\n            :rows=\"setting.options?.rows || 3\"\n            :disabled=\"setting.options?.disabled\"\n            :clearable=\"setting.options?.clearable ?? true\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 数字输入 -->\n          <n-input-number\n            v-else-if=\"setting.controlType === 'INPUT_NUMBER' || setting.controlType === 'input-number'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :min=\"setting.options?.min\"\n            :max=\"setting.options?.max\"\n            :step=\"setting.options?.step\"\n            :precision=\"setting.options?.precision\"\n            :disabled=\"setting.options?.disabled\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 开关 -->\n          <n-switch\n            v-else-if=\"setting.controlType === 'SWITCH' || setting.controlType === 'switch'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :disabled=\"setting.options?.disabled\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 选择器 -->\n          <n-select\n            v-else-if=\"setting.controlType === 'SELECT' || setting.controlType === 'select'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :options=\"setting.options?.options || []\"\n            :placeholder=\"setting.options?.placeholder\"\n            :disabled=\"setting.options?.disabled\"\n            :clearable=\"setting.options?.clearable ?? true\"\n            :multiple=\"setting.options?.multiple\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 颜色选择器 -->\n          <n-color-picker\n            v-else-if=\"setting.controlType === 'COLOR_PICKER' || setting.controlType === 'color-picker'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :disabled=\"setting.options?.disabled\"\n            :show-alpha=\"setting.options?.showAlpha\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 滑块 -->\n          <n-slider\n            v-else-if=\"setting.controlType === 'SLIDER' || setting.controlType === 'slider'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :min=\"setting.options?.min || 0\"\n            :max=\"setting.options?.max || 100\"\n            :step=\"setting.options?.step || 1\"\n            :disabled=\"setting.options?.disabled\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 日期选择器 -->\n          <n-date-picker\n            v-else-if=\"setting.controlType === 'DATE_PICKER' || setting.controlType === 'date-picker'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :type=\"setting.options?.type || 'date'\"\n            :placeholder=\"setting.options?.placeholder\"\n            :disabled=\"setting.options?.disabled\"\n            :clearable=\"setting.options?.clearable ?? true\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 时间选择器 -->\n          <n-time-picker\n            v-else-if=\"setting.controlType === 'TIME_PICKER' || setting.controlType === 'time-picker'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :placeholder=\"setting.options?.placeholder\"\n            :disabled=\"setting.options?.disabled\"\n            :clearable=\"setting.options?.clearable ?? true\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 评分 -->\n          <n-rate\n            v-else-if=\"setting.controlType === 'RATE' || setting.controlType === 'rate'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :count=\"setting.options?.count || 5\"\n            :disabled=\"setting.options?.disabled\"\n            :allow-half=\"setting.options?.allowHalf\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          />\n\n          <!-- 复选框组 -->\n          <n-checkbox-group\n            v-else-if=\"setting.controlType === 'CHECKBOX_GROUP' || setting.controlType === 'checkbox-group'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :disabled=\"setting.options?.disabled\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          >\n            <n-space>\n              <n-checkbox\n                v-for=\"option in setting.options?.options || []\"\n                :key=\"option.value\"\n                :value=\"option.value\"\n                :label=\"option.label\"\n              />\n            </n-space>\n          </n-checkbox-group>\n\n          <!-- 单选框组 -->\n          <n-radio-group\n            v-else-if=\"setting.controlType === 'RADIO_GROUP' || setting.controlType === 'radio-group'\"\n            :value=\"getNestedValue(localValue, setting.path)\"\n            :disabled=\"setting.options?.disabled\"\n            @update:value=\"val => updateNestedValue(setting.path, val)\"\n          >\n            <n-space>\n              <n-radio v-for=\"option in setting.options?.options || []\" :key=\"option.value\" :value=\"option.value\">\n                {{ option.label }}\n              </n-radio>\n            </n-space>\n          </n-radio-group>\n\n          <!-- 未知控件类型提示 -->\n          <n-text v-else type=\"warning\">未支持的控件类型: {{ setting.controlType }}</n-text>\n        </n-form-item>\n      </div>\n    </n-form>\n  </div>\n</template>\n\n<script setup lang=\"ts\" generic=\"T extends Record<string, any>\">\n/**\n * 自动表单生成器\n * 根据 ComponentSettingConfig 自动生成配置表单\n */\n\nimport { computed, reactive, watch, nextTick, ref } from 'vue'\nimport {\n  NForm,\n  NFormItem,\n  NInput,\n  NInputNumber,\n  NSwitch,\n  NSelect,\n  NColorPicker,\n  NSlider,\n  NDatePicker,\n  NTimePicker,\n  NRate,\n  NCheckboxGroup,\n  NCheckbox,\n  NRadioGroup,\n  NRadio,\n  NSpace,\n  NText,\n  type FormInst,\n  type FormValidationError,\n  type FormItemRule\n} from 'naive-ui'\nimport type { ComponentSettingConfig, Setting } from '@/card2.1/types/setting-config'\n\n// Props接口\ninterface Props<T extends Record<string, any> = Record<string, any>> {\n  /** 设置配置 */\n  settingConfig: ComponentSettingConfig<T>\n  /** 当前值 */\n  modelValue?: T\n  /** 表单标签位置 */\n  labelPlacement?: 'left' | 'top'\n  /** 标签宽度 */\n  labelWidth?: number | string\n  /** 是否禁用 */\n  disabled?: boolean\n}\n\n// Emits接口\ninterface Emits<T extends Record<string, any> = Record<string, any>> {\n  (e: 'update:modelValue', value: T): void\n}\n\nconst props = withDefaults(defineProps<Props<T>>(), {\n  labelPlacement: 'left',\n  labelWidth: 120,\n  disabled: false\n})\n\nconst emit = defineEmits<Emits<T>>()\n\n// 表单引用\nconst formRef = ref<FormInst>()\n\n// 本地值管理\nconst localValue = reactive<T>(\n  (props.modelValue ? { ...props.modelValue } : { ...props.settingConfig.customConfig }) as T\n)\n\n// 防循环更新标志\nlet isUpdatingFromProps = false\n\n/**\n * 获取设置项分组\n */\nconst settingGroups = computed(() => {\n  const groups: Record<string, Setting[]> = {}\n\n  for (const setting of props.settingConfig.settings) {\n    const groupName = setting.options?.group || 'default'\n    if (!groups[groupName]) {\n      groups[groupName] = []\n    }\n\n    // 转换设置项，将 type 映射为 controlType，path 映射为 field\n    const transformedSetting = {\n      ...setting,\n      controlType: setting.type, // 映射字段名\n      path: setting.field, // 映射字段名\n      label: setting.label,\n      options: setting.options\n    }\n\n    groups[groupName].push(transformedSetting as Setting)\n  }\n\n  return groups\n})\n\n/**\n * 获取所有分组名称\n */\nconst groupNames = computed(() => {\n  const names = Object.keys(settingGroups.value)\n  // 将 'default' 组放在最前面，其他按字母顺序排序\n  return names.sort((a, b) => {\n    if (a === 'default') return -1\n    if (b === 'default') return 1\n    return a.localeCompare(b)\n  })\n})\n\n/**\n * 根据分组获取设置项\n */\nconst getSettingsByGroup = (groupName: string): Setting[] => {\n  return settingGroups.value[groupName] || []\n}\n\n/**\n * 获取嵌套对象的值\n */\nconst getNestedValue = <V = any,>(obj: Record<string, any>, path: string): V => {\n  return path.split('.').reduce((current, key) => {\n    return current && typeof current === 'object' ? current[key] : undefined\n  }, obj)\n}\n\n/**\n * 设置嵌套对象的值\n */\nconst setNestedValue = (obj: Record<string, any>, path: string, value: any) => {\n  const keys = path.split('.')\n  const lastKey = keys.pop()!\n\n  const target = keys.reduce((current, key) => {\n    if (!current[key] || typeof current[key] !== 'object') {\n      current[key] = {}\n    }\n    return current[key]\n  }, obj)\n\n  target[lastKey] = value\n}\n\n/**\n * 更新嵌套值并触发事件\n */\nconst updateNestedValue = (path: string, value: any) => {\n  if (isUpdatingFromProps) return\n\n  setNestedValue(localValue, path, value)\n\n  // 发送更新事件\n  emit('update:modelValue', { ...localValue } as T)\n}\n\n/**\n * 获取表单验证规则\n */\nconst getValidationRules = (setting: Setting): FormItemRule[] => {\n  const rules: FormItemRule[] = []\n\n  // 必填验证\n  if (setting.options?.required) {\n    rules.push({\n      required: true,\n      message: `请${setting.controlType === 'SELECT' ? '选择' : '输入'}${setting.label}`,\n      trigger: ['blur', 'change']\n    })\n  }\n\n  // 长度验证\n  if (setting.options?.minLength !== undefined || setting.options?.maxLength !== undefined) {\n    rules.push({\n      validator: (rule, value: string) => {\n        if (!value && !setting.options?.required) return true\n\n        const len = value?.length || 0\n        const min = setting.options?.minLength\n        const max = setting.options?.maxLength\n\n        if (min !== undefined && len < min) {\n          return new Error(`${setting.label}长度不能少于${min}个字符`)\n        }\n        if (max !== undefined && len > max) {\n          return new Error(`${setting.label}长度不能超过${max}个字符`)\n        }\n\n        return true\n      },\n      trigger: ['blur', 'change']\n    })\n  }\n\n  // 数值范围验证\n  if (\n    setting.controlType === 'INPUT_NUMBER' &&\n    (setting.options?.min !== undefined || setting.options?.max !== undefined)\n  ) {\n    rules.push({\n      validator: (rule, value: number) => {\n        if (value == null && !setting.options?.required) return true\n\n        const min = setting.options?.min\n        const max = setting.options?.max\n\n        if (min !== undefined && value < min) {\n          return new Error(`${setting.label}不能小于${min}`)\n        }\n        if (max !== undefined && value > max) {\n          return new Error(`${setting.label}不能大于${max}`)\n        }\n\n        return true\n      },\n      trigger: ['blur', 'change']\n    })\n  }\n\n  return rules\n}\n\n/**\n * 表单验证\n */\nconst validate = async (): Promise<boolean> => {\n  try {\n    await formRef.value?.validate()\n    return true\n  } catch (validationErrors: any) {\n    return false\n  }\n}\n\n/**\n * 重置表单\n */\nconst resetForm = () => {\n  // 重置为默认配置\n  Object.assign(localValue, props.settingConfig.customConfig)\n  emit('update:modelValue', { ...localValue } as T)\n}\n\n/**\n * 监听props变化\n */\nwatch(\n  () => props.modelValue,\n  newValue => {\n    if (isUpdatingFromProps || !newValue) return\n\n    isUpdatingFromProps = true\n    try {\n      Object.assign(localValue, newValue)\n    } finally {\n      nextTick(() => {\n        setTimeout(() => {\n          isUpdatingFromProps = false\n        }, 10)\n      })\n    }\n  },\n  { deep: true, immediate: true }\n)\n\n// 暴露方法给父组件\ndefineExpose({\n  validate,\n  resetForm,\n  formRef\n})\n</script>\n\n<style scoped>\n.auto-form-generator {\n  width: 100%;\n}\n\n.form-group {\n  margin-bottom: 20px;\n}\n\n.form-group:last-child {\n  margin-bottom: 0;\n}\n\n.form-group-title {\n  font-size: 14px;\n  font-weight: 600;\n  color: var(--text-color);\n  margin-bottom: 12px;\n  padding-bottom: 8px;\n  border-bottom: 1px solid var(--border-color);\n}\n\n:deep(.n-form-item) {\n  margin-bottom: 16px;\n}\n\n:deep(.n-form-item:last-child) {\n  margin-bottom: 0;\n}\n\n:deep(.n-form-item-label) {\n  font-weight: 500;\n  color: var(--text-color-2);\n}\n\n/* 响应式设计 */\n@media (max-width: 600px) {\n  .auto-form-generator {\n    padding: 0 8px;\n  }\n\n  .form-group-title {\n    font-size: 13px;\n  }\n\n  :deep(.n-form-item) {\n    margin-bottom: 12px;\n  }\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\FlexibleConfigForm.vue","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":50,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":50,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":51,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":51,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":52,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":52,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":119,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":15},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":119,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":119,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2723,2723],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":129,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":129,"endColumn":15},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":129,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":129,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3015,3015],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":130,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":130,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":130,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3036,3036],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div class=\"flexible-config-form\">\n    <!-- 模式指示器 -->\n    <div v-if=\"showModeIndicator\" class=\"mode-indicator\">\n      <n-tag :type=\"getModeTagType()\" size=\"small\">\n        {{ getModeLabel() }}\n      </n-tag>\n    </div>\n\n    <!-- 自动表单生成器 -->\n    <AutoFormGenerator\n      v-model=\"configValues\"\n      :ts-config=\"tsConfig\"\n      :vue-config=\"vueConfig\"\n      :mode=\"detectedMode\"\n      :readonly=\"readonly\"\n      @change=\"handleConfigChange\"\n      @validate=\"handleValidate\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted } from 'vue'\nimport { NTag } from 'naive-ui'\nimport type { Component } from 'vue'\nimport AutoFormGenerator from './AutoFormGenerator.vue'\nimport type { TSConfig, ConfigMode, ConfigValues } from './config-types'\nimport { FlexibleConfigManager } from './config-manager'\n\ninterface Props {\n  // 组件类型（用于自动检测配置）\n  componentType?: string\n\n  // 直接传入配置（可选）\n  tsConfig?: TSConfig\n  vueConfig?: Component\n\n  // 当前配置值\n  modelValue?: ConfigValues\n\n  // 是否只读\n  readonly?: boolean\n\n  // 是否显示模式指示器\n  showModeIndicator?: boolean\n}\n\ninterface Emits {\n  (event: 'update:modelValue', value: ConfigValues): void\n  (event: 'change', value: ConfigValues): void\n  (event: 'validate', result: { valid: boolean; errors: string[] }): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  modelValue: () => ({}),\n  readonly: false,\n  showModeIndicator: false\n})\n\nconst emit = defineEmits<Emits>()\n\n// 响应式数据\nconst configValues = ref<ConfigValues>({})\nconst tsConfig = ref<TSConfig>()\nconst vueConfig = ref<Component>()\n\n// 检测到的配置模式\nconst detectedMode = computed<ConfigMode>(() => {\n  try {\n    return FlexibleConfigManager.detectConfigMode(vueConfig.value, tsConfig.value)\n  } catch {\n    return 'vue-only'\n  }\n})\n\n// 模式标签类型\nconst getModeTagType = () => {\n  switch (detectedMode.value) {\n    case 'ts-only':\n      return 'info'\n    case 'vue-only':\n      return 'success'\n    case 'hybrid':\n      return 'warning'\n    default:\n      return 'default'\n  }\n}\n\n// 模式标签文本\nconst getModeLabel = () => {\n  switch (detectedMode.value) {\n    case 'ts-only':\n      return 'TS配置'\n    case 'vue-only':\n      return 'Vue配置'\n    case 'hybrid':\n      return '混合配置'\n    default:\n      return '未知模式'\n  }\n}\n\n// 自动检测组件配置\nconst detectComponentConfig = async () => {\n  if (!props.componentType) return\n\n  try {\n    // 尝试动态导入TS配置\n    try {\n      // 使用动态导入，支持任意组件类型\n      const tsConfigPath = `/src/card2.1/components/${props.componentType}/config.ts`\n      const tsModule = await import(/* @vite-ignore */ tsConfigPath)\n\n      if (tsModule.testComponentTSConfig || tsModule.default) {\n        tsConfig.value = tsModule.testComponentTSConfig || tsModule.default\n      }\n    } catch (e) {}\n\n    // 尝试动态导入Vue配置\n    try {\n      const vueConfigPath = `/src/card2.1/components/${props.componentType}/config.vue`\n      const vueModule = await import(/* @vite-ignore */ vueConfigPath)\n\n      if (vueModule.default) {\n        vueConfig.value = vueModule.default\n      }\n    } catch (e) {}\n  } catch (error) {}\n}\n\n// 处理配置变化\nconst handleConfigChange = (newValues: ConfigValues) => {\n  configValues.value = { ...newValues }\n  emit('update:modelValue', newValues)\n  emit('change', newValues)\n}\n\n// 处理验证结果\nconst handleValidate = (result: { valid: boolean; errors: string[] }) => {\n  emit('validate', result)\n}\n\n// 监听外部值变化\nwatch(\n  () => props.modelValue,\n  newValue => {\n    if (newValue) {\n      configValues.value = { ...newValue }\n    }\n  },\n  { immediate: true, deep: true }\n)\n\n// 监听组件类型变化\nwatch(\n  () => props.componentType,\n  () => {\n    detectComponentConfig()\n  },\n  { immediate: true }\n)\n\n// 监听直接传入的配置\nwatch(\n  () => [props.tsConfig, props.vueConfig],\n  () => {\n    if (props.tsConfig) tsConfig.value = props.tsConfig\n    if (props.vueConfig) vueConfig.value = props.vueConfig\n  },\n  { immediate: true }\n)\n\n// 组件挂载\nonMounted(() => {\n  // 设置初始值\n  if (props.modelValue) {\n    configValues.value = { ...props.modelValue }\n  }\n})\n</script>\n\n<style scoped>\n.flexible-config-form {\n  width: 100%;\n}\n\n.mode-indicator {\n  margin-bottom: 12px;\n  text-align: right;\n}\n</style>\n","usedDeprecatedRules":[{"ruleId":"vue/component-tags-order","replacedBy":["block-order"]}]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\auto-registry.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'filterComponentsByPermission' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'filterComponentsByPermission' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":65,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":65,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":65,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1914,1914],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card 2.1 自动注册系统\n * 支持目录扫描、自动分类和树形结构生成\n */\n\nimport type { ComponentDefinition, IComponentRegistry } from './types'\nimport { filterComponentsByPermission, getUserAuthorityFromStorage } from './permission-utils'\n\nexport interface ComponentCategory {\n  id: string\n  name: string\n  description?: string\n  icon?: string\n  children?: ComponentCategory[]\n}\n\nexport interface ComponentTree {\n  categories: ComponentCategory[]\n  components: ComponentDefinition[]\n  totalCount: number\n}\n\nexport class AutoRegistry {\n  private registry: IComponentRegistry\n  private componentModules: Map<string, any> = new Map()\n  private categoryTree: ComponentCategory[] = []\n  private allComponents: ComponentDefinition[] = [] // 存储所有组件（包括无权限的）\n\n  constructor(registry: IComponentRegistry) {\n    this.registry = registry\n  }\n\n  /**\n   * 自动扫描并注册组件\n   * @param componentModules 组件模块映射\n   */\n  async autoRegister(componentModules: Record<string, any>) {\n    const registeredComponents: ComponentDefinition[] = []\n    const userAuthority = getUserAuthorityFromStorage()\n    for (const [componentId, module] of Object.entries(componentModules)) {\n      try {\n        // 获取默认导出（组件定义）\n        const definition = module.default || module\n\n        if (this.isValidComponentDefinition(definition)) {\n          // 检查权限\n          const hasPermission = this.checkComponentPermission(definition, userAuthority)\n\n          if (hasPermission) {\n            // 检查是否应该注册\n            if (this.shouldRegisterComponent(definition)) {\n              // 自动生成分类信息\n              this.autoGenerateCategories(definition)\n\n              // 注册组件\n              this.registry.register(componentId, definition)\n              registeredComponents.push(definition)\n              this.allComponents.push(definition)\n            }\n          } else {\n            // 记录被权限过滤的组件\n            this.allComponents.push(definition)\n          }\n        }\n      } catch (error) {}\n    }\n    return registeredComponents\n  }\n\n  /**\n   * 检查组件权限\n   */\n  private checkComponentPermission(definition: ComponentDefinition, userAuthority: string): boolean {\n    const permission = definition.permission || '不限'\n\n    // 如果组件权限是\"不限\"，则所有用户都可以访问\n    if (permission === '不限') {\n      return true\n    }\n\n    // 如果用户权限是\"不限\"，则不能访问任何有权限限制的组件\n    if (userAuthority === '不限') {\n      return false\n    }\n\n    // 权限等级检查\n    const permissionLevels = {\n      SYS_ADMIN: 4,\n      TENANT_ADMIN: 3,\n      TENANT_USER: 2,\n      不限: 1\n    }\n\n    const componentLevel = permissionLevels[permission]\n    const userLevel = permissionLevels[userAuthority as keyof typeof permissionLevels] || 0\n    const hasPermission = userLevel >= componentLevel\n    return hasPermission\n  }\n\n  /**\n   * 检查组件是否应该注册\n   */\n  private shouldRegisterComponent(definition: ComponentDefinition): boolean {\n    // 检查注册设置，默认为true（注册）\n    const isRegistered = definition.isRegistered !== false // 只有明确设置为false才不注册\n\n    // 特别记录 universal-data-viz 的注册检查\n    if (!isRegistered) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * 验证组件定义是否有效\n   */\n  private isValidComponentDefinition(definition: any): definition is ComponentDefinition {\n    return (\n      definition &&\n      typeof definition.type === 'string' &&\n      typeof definition.name === 'string' &&\n      typeof definition.component === 'object'\n    )\n  }\n\n  /**\n   * 自动生成分类树\n   */\n  private autoGenerateCategories(definition: ComponentDefinition) {\n    const { mainCategory = '其他', subCategory = '未分类' } = definition\n\n    // 查找或创建主分类\n    let mainCat = this.categoryTree.find(cat => cat.id === mainCategory)\n    if (!mainCat) {\n      mainCat = {\n        id: mainCategory,\n        name: this.getCategoryDisplayName(mainCategory),\n        description: this.getCategoryDescription(mainCategory)\n      }\n      this.categoryTree.push(mainCat)\n    }\n\n    // 查找或创建子分类\n    if (!mainCat.children) {\n      mainCat.children = []\n    }\n\n    let subCat = mainCat.children.find(cat => cat.id === subCategory)\n    if (!subCat) {\n      subCat = {\n        id: subCategory,\n        name: this.getCategoryDisplayName(subCategory),\n        description: this.getCategoryDescription(subCategory)\n      }\n      mainCat.children.push(subCat)\n    }\n  }\n\n  /**\n   * 获取分类显示名称\n   */\n  private getCategoryDisplayName(categoryId: string): string {\n    const displayNames: Record<string, string> = {\n      系统: '系统组件',\n      曲线: '图表组件',\n      其他: '其他组件',\n      未分类: '未分类组件'\n    }\n    return displayNames[categoryId] || categoryId\n  }\n\n  /**\n   * 获取分类描述\n   */\n  private getCategoryDescription(categoryId: string): string {\n    const descriptions: Record<string, string> = {\n      系统: '系统监控和状态显示组件',\n      曲线: '数据可视化和图表组件',\n      其他: '其他功能组件',\n      未分类: '待分类的组件'\n    }\n    return descriptions[categoryId] || ''\n  }\n\n  /**\n   * 获取组件树形结构（权限过滤后）\n   */\n  getComponentTree(): ComponentTree {\n    const components = this.registry.getAll()\n    return {\n      categories: this.categoryTree,\n      components,\n      totalCount: components.length\n    }\n  }\n\n  /**\n   * 获取所有组件（包括无权限的，用于调试）\n   */\n  getAllComponents(): ComponentDefinition[] {\n    return this.allComponents\n  }\n\n  /**\n   * 按分类获取组件（权限过滤后）\n   */\n  getComponentsByCategory(mainCategory?: string, subCategory?: string): ComponentDefinition[] {\n    const components = this.registry.getAll()\n\n    if (!mainCategory) {\n      return components\n    }\n\n    let filtered = components.filter(comp => comp.mainCategory === mainCategory)\n\n    if (subCategory) {\n      filtered = filtered.filter(comp => comp.subCategory === subCategory)\n    }\n\n    return filtered\n  }\n\n  /**\n   * 获取所有分类\n   */\n  getCategories(): ComponentCategory[] {\n    return this.categoryTree\n  }\n\n  /**\n   * 重新应用权限过滤（当用户权限发生变化时调用）\n   */\n  reapplyPermissionFilter(): void {\n    const userAuthority = getUserAuthorityFromStorage()\n    // 清空注册表\n    this.registry = new (this.registry.constructor as any)()\n\n    // 重新注册有权限的组件\n    for (const component of this.allComponents) {\n      if (this.checkComponentPermission(component, userAuthority)) {\n        this.registry.register(component.type, component)\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\component-data-requirements.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":39,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 组件数据需求声明系统\n * 为 Card2.1 组件提供数据需求声明和注册功能\n *\n * 这是对 data-binding 系统的扩展，专注于组件数据需求的声明式定义\n */\n\nimport type { ComponentDataRequirement, DataFieldRequirement } from './data-binding/types'\nimport { ComponentRequirementManager } from './data-binding/component-requirement-manager'\n\n// 创建全局实例\nexport const componentDataRequirementsRegistry = new ComponentRequirementManager()\n\n/**\n * 数据字段类型定义\n */\nexport type DataFieldType = 'string' | 'number' | 'boolean' | 'date' | 'array' | 'object'\n\n/**\n * 数据字段枚举选项\n */\nexport interface DataFieldEnumOption {\n  label: string\n  value: any\n  description?: string\n}\n\n/**\n * 数据字段验证规则\n */\nexport interface DataFieldValidation {\n  required?: boolean\n  min?: number\n  max?: number\n  minLength?: number\n  maxLength?: number\n  pattern?: string\n  enum?: any[]\n  custom?: (value: any) => boolean | string\n}\n\n/**\n * 数据字段配置选项\n */\nexport interface DataFieldOptions {\n  description?: string\n  required?: boolean\n  defaultValue?: any\n  example?: any\n  validation?: DataFieldValidation\n  enum?: DataFieldEnumOption[]\n  itemSchema?: any // 用于数组类型的项目模式\n  tags?: string[]\n  group?: string\n  [key: string]: any\n}\n\n/**\n * 数据更新配置\n */\nexport interface DataUpdateConfig {\n  supportedTriggers: ('timer' | 'websocket' | 'manual' | 'event' | 'mqtt')[]\n  recommendedInterval?: number\n  minInterval?: number\n  maxInterval?: number\n  validation?: {\n    requiredFields?: string[]\n    stringFields?: string[]\n    numericFields?: string[]\n    booleanFields?: string[]\n    enumFields?: Array<{ field: string; values: any[] }>\n  }\n}\n\n/**\n * 使用场景定义\n */\nexport interface UseCase {\n  name: string\n  description: string\n  exampleData: Record<string, any>\n  tags?: string[]\n}\n\n/**\n * 主要数据需求定义\n */\nexport interface PrimaryDataRequirement {\n  name: string\n  label: string\n  description: string\n  type: DataFieldType\n  required: boolean\n  defaultValue?: any\n  validation?: DataFieldValidation\n  example?: any\n  tags?: string[]\n}\n\n/**\n * 组件数据需求配置\n */\nexport interface ComponentDataRequirementConfig {\n  description: string\n  category?: string\n  version?: string\n  primaryData: PrimaryDataRequirement\n  dataFields: DataFieldRequirement[]\n  updateConfig?: DataUpdateConfig\n  useCases?: UseCase[]\n  tags?: string[]\n  metadata?: Record<string, any>\n}\n\n/**\n * 创建数据字段定义\n */\nexport function createDataField(\n  name: string,\n  label: string,\n  type: DataFieldType,\n  options: DataFieldOptions = {}\n): DataFieldRequirement {\n  return {\n    name,\n    label,\n    type,\n    description: options.description || '',\n    required: options.required || false,\n    defaultValue: options.defaultValue,\n    validation: options.validation || {},\n    example: options.example,\n    enum: options.enum,\n    itemSchema: options.itemSchema,\n    tags: options.tags || [],\n    group: options.group,\n    metadata: {\n      ...options\n    }\n  }\n}\n\n/**\n * 创建组件数据需求声明\n */\nexport function createDataRequirement(\n  componentType: string,\n  displayName: string,\n  config: ComponentDataRequirementConfig\n): ComponentDataRequirement {\n  return {\n    componentType,\n    displayName,\n    description: config.description,\n    category: config.category || 'default',\n    version: config.version || '1.0.0',\n\n    // 主要数据字段\n    primaryData: {\n      name: config.primaryData.name,\n      label: config.primaryData.label,\n      description: config.primaryData.description,\n      type: config.primaryData.type,\n      required: config.primaryData.required,\n      defaultValue: config.primaryData.defaultValue,\n      validation: config.primaryData.validation || {},\n      example: config.primaryData.example,\n      tags: config.primaryData.tags || []\n    },\n\n    // 数据字段列表\n    dataFields: config.dataFields,\n\n    // 数据关系（暂时为空，后续可扩展）\n    relationships: [],\n\n    // 更新配置\n    updateConfig: config.updateConfig || {\n      supportedTriggers: ['timer', 'manual'],\n      recommendedInterval: 5000,\n      minInterval: 1000\n    },\n\n    // 使用场景\n    useCases: config.useCases || [],\n\n    // 标签和元数据\n    tags: config.tags || [],\n    metadata: {\n      ...config.metadata,\n      createdAt: new Date().toISOString(),\n      dataFieldsCount: config.dataFields.length,\n      hasValidation: config.dataFields.some(field => field.validation && Object.keys(field.validation).length > 0),\n      supportedTriggers: config.updateConfig?.supportedTriggers || ['timer', 'manual']\n    }\n  }\n}\n\n/**\n * 常用数据字段预设\n */\nexport const CommonDataFields = {\n  /**\n   * 标题字段\n   */\n  title: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('title', '标题', 'string', {\n      description: '组件的标题文字',\n      required: false,\n      defaultValue: '',\n      maxLength: 100,\n      tags: ['title', 'display'],\n      ...options\n    }),\n\n  /**\n   * 内容字段\n   */\n  content: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('content', '内容', 'string', {\n      description: '组件的主要内容',\n      required: false,\n      defaultValue: '',\n      maxLength: 500,\n      tags: ['content', 'text'],\n      ...options\n    }),\n\n  /**\n   * 数值字段\n   */\n  value: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('value', '数值', 'number', {\n      description: '组件显示的数值',\n      required: false,\n      defaultValue: 0,\n      tags: ['value', 'number'],\n      ...options\n    }),\n\n  /**\n   * 状态字段\n   */\n  status: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('status', '状态', 'string', {\n      description: '组件的状态',\n      required: false,\n      defaultValue: 'normal',\n      enum: [\n        { label: '正常', value: 'normal' },\n        { label: '警告', value: 'warning' },\n        { label: '错误', value: 'error' }\n      ],\n      tags: ['status', 'state'],\n      ...options\n    }),\n\n  /**\n   * 时间戳字段\n   */\n  timestamp: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('timestamp', '时间戳', 'date', {\n      description: '数据的时间戳',\n      required: false,\n      defaultValue: new Date(),\n      tags: ['timestamp', 'time'],\n      ...options\n    }),\n\n  /**\n   * 配置对象字段\n   */\n  config: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('config', '配置', 'object', {\n      description: '组件的配置对象',\n      required: false,\n      defaultValue: {},\n      tags: ['config', 'settings'],\n      ...options\n    }),\n\n  /**\n   * 数据列表字段\n   */\n  dataList: (options: Partial<DataFieldOptions> = {}) =>\n    createDataField('dataList', '数据列表', 'array', {\n      description: '组件的数据列表',\n      required: false,\n      defaultValue: [],\n      itemSchema: {\n        type: 'object',\n        properties: {\n          label: { type: 'string' },\n          value: { type: 'number' }\n        }\n      },\n      tags: ['list', 'data'],\n      ...options\n    })\n}\n\n/**\n * 数据需求验证器\n */\nexport class DataRequirementValidator {\n  /**\n   * 验证数据字段定义\n   */\n  static validateDataField(field: DataFieldRequirement): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (!field.name || typeof field.name !== 'string') {\n      errors.push('数据字段名称不能为空')\n    }\n\n    if (!field.label || typeof field.label !== 'string') {\n      errors.push('数据字段标签不能为空')\n    }\n\n    if (!field.type) {\n      errors.push('数据字段类型不能为空')\n    }\n\n    const validTypes: DataFieldType[] = ['string', 'number', 'boolean', 'date', 'array', 'object']\n    if (field.type && !validTypes.includes(field.type)) {\n      errors.push(`无效的数据字段类型: ${field.type}`)\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * 验证组件数据需求\n   */\n  static validateDataRequirement(requirement: ComponentDataRequirement): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (!requirement.componentType) {\n      errors.push('组件类型不能为空')\n    }\n\n    if (!requirement.displayName) {\n      errors.push('组件显示名称不能为空')\n    }\n\n    if (!requirement.primaryData) {\n      errors.push('主要数据字段不能为空')\n    } else {\n      const primaryValidation = this.validateDataField(requirement.primaryData as DataFieldRequirement)\n      if (!primaryValidation.valid) {\n        errors.push(`主要数据字段验证失败: ${primaryValidation.errors.join(', ')}`)\n      }\n    }\n\n    if (requirement.dataFields) {\n      requirement.dataFields.forEach((field, index) => {\n        const fieldValidation = this.validateDataField(field)\n        if (!fieldValidation.valid) {\n          errors.push(`数据字段 ${index + 1} 验证失败: ${fieldValidation.errors.join(', ')}`)\n        }\n      })\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n}\n\n/**\n * 工具函数：获取组件的数据需求统计\n */\nexport function getDataRequirementStats(requirement: ComponentDataRequirement) {\n  return {\n    totalFields: requirement.dataFields.length + 1, // +1 for primaryData\n    requiredFields:\n      requirement.dataFields.filter(field => field.required).length + (requirement.primaryData.required ? 1 : 0),\n    fieldTypes: {\n      string: requirement.dataFields.filter(field => field.type === 'string').length,\n      number: requirement.dataFields.filter(field => field.type === 'number').length,\n      boolean: requirement.dataFields.filter(field => field.type === 'boolean').length,\n      date: requirement.dataFields.filter(field => field.type === 'date').length,\n      array: requirement.dataFields.filter(field => field.type === 'array').length,\n      object: requirement.dataFields.filter(field => field.type === 'object').length\n    },\n    hasValidation: requirement.dataFields.some(field => field.validation && Object.keys(field.validation).length > 0),\n    supportedTriggers: requirement.updateConfig?.supportedTriggers || [],\n    useCasesCount: requirement.useCases?.length || 0\n  }\n}\n\n/**\n * 工具函数：生成数据需求的示例数据\n */\nexport function generateExampleData(requirement: ComponentDataRequirement): Record<string, any> {\n  const exampleData: Record<string, any> = {}\n\n  // 添加主要数据字段的示例\n  if (requirement.primaryData && requirement.primaryData.example !== undefined) {\n    exampleData[requirement.primaryData.name] = requirement.primaryData.example\n  }\n\n  // 添加其他数据字段的示例\n  requirement.dataFields.forEach(field => {\n    if (field.example !== undefined) {\n      exampleData[field.name] = field.example\n    } else if (field.defaultValue !== undefined) {\n      exampleData[field.name] = field.defaultValue\n    }\n  })\n\n  return exampleData\n}\n\n// 导出便捷函数\nexport { componentDataRequirementsRegistry as registry }\n\n// 默认导出\nexport default {\n  componentDataRequirementsRegistry,\n  createDataRequirement,\n  createDataField,\n  CommonDataFields,\n  DataRequirementValidator,\n  getDataRequirementStats,\n  generateExampleData\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\component-loader.ts","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":51,"column":18,"nodeType":"BlockStatement","messageId":"unexpected","endLine":52,"endColumn":12,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1445,1456],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":53,"column":16,"nodeType":"BlockStatement","messageId":"unexpected","endLine":54,"endColumn":10,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1474,1483],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":57,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":88,"column":22,"nodeType":"BlockStatement","messageId":"unexpected","endLine":89,"endColumn":8,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2407,2414],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":106,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":106,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":106,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card 2.1 组件加载器\n * 支持动态导入和目录扫描\n */\n\nimport type { ComponentDefinition } from './types'\n\nexport interface ComponentModule {\n  default: ComponentDefinition\n  [key: string]: any\n}\n\nexport interface ComponentLoaderOptions {\n  basePath?: string\n  pattern?: string\n  exclude?: string[]\n}\n\nexport class ComponentLoader {\n  private basePath: string\n  private pattern: string\n  private exclude: string[]\n\n  constructor(options: ComponentLoaderOptions = {}) {\n    this.basePath = options.basePath || '../components'\n    this.pattern = options.pattern || '**/index.ts'\n    this.exclude = options.exclude || ['node_modules', '.git', 'dist']\n  }\n\n  /**\n   * 动态导入组件模块\n   * 使用 Vite 的 import.meta.glob 进行动态导入\n   */\n  async loadComponents(): Promise<Record<string, ComponentModule>> {\n    try {\n      // 使用 Vite 的动态导入功能 - 支持多种扫描模式\n      // 使用 Vite 的动态导入功能 - 支持递归扫描\n      const allModules = import.meta.glob('../components/**/index.{ts,js}', { eager: true })\n\n      const componentModules: Record<string, ComponentModule> = {}\n\n      for (const [path, module] of Object.entries(allModules)) {\n        // 从路径中提取组件ID\n        const componentId = this.extractComponentId(path)\n\n        if (componentId && this.shouldIncludeComponent(componentId)) {\n          // 获取默认导出或整个模块\n          const definition = module.default || module\n          if (definition && definition.type) {\n            componentModules[componentId] = { default: definition }\n          } else {\n          }\n        } else {\n        }\n      }\n      return componentModules\n    } catch (error) {\n      return {}\n    }\n  }\n\n  /**\n   * 从路径中提取组件ID\n   */\n  private extractComponentId(path: string): string | null {\n    // 匹配更灵活的路径格式，支持连字符和下划线\n    // 优先匹配: ../components/universal-data-viz/index.ts\n    const match = path.match(/\\.\\.\\/components\\/(?:.*\\/)?([^/]+)\\/index\\.(ts|js)$/)\n    const componentId = match ? match[1] : null\n    return componentId\n  }\n\n  /**\n   * 判断是否应该包含该组件\n   */\n  private shouldIncludeComponent(componentId: string): boolean {\n    return !this.exclude.some(pattern => componentId.includes(pattern) || pattern.includes(componentId))\n  }\n\n  /**\n   * 验证组件定义\n   */\n  validateComponentDefinition(definition: any): definition is ComponentDefinition {\n    const requiredFields = ['type', 'name', 'component']\n\n    return requiredFields.every(field => {\n      const hasField = definition && definition[field] !== undefined\n      if (!hasField) {\n      }\n      return hasField\n    })\n  }\n\n  /**\n   * 获取组件统计信息\n   */\n  getComponentStats(modules: Record<string, ComponentModule>) {\n    const stats = {\n      total: Object.keys(modules).length,\n      valid: 0,\n      invalid: 0,\n      categories: new Set<string>(),\n      subCategories: new Set<string>()\n    }\n\n    for (const [id, module] of Object.entries(modules)) {\n      const definition = module.default || module\n\n      if (this.validateComponentDefinition(definition)) {\n        stats.valid++\n        if (definition.mainCategory) {\n          stats.categories.add(definition.mainCategory)\n        }\n        if (definition.subCategory) {\n          stats.subCategories.add(definition.subCategory)\n        }\n      } else {\n        stats.invalid++\n      }\n    }\n\n    return {\n      ...stats,\n      categories: Array.from(stats.categories),\n      subCategories: Array.from(stats.subCategories)\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\component-registry.ts","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":34,"column":22,"nodeType":"BlockStatement","messageId":"unexpected","endLine":35,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[822,827],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":156,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":156,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":156,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3695,3695],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'definition' is defined but never used.","line":194,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":195,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":197,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":198,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":199,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":200,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'settingConfig' is defined but never used.","line":201,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":96},{"ruleId":"no-unused-vars","severity":1,"message":"'settingConfigs' is defined but never used.","line":202,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":71},{"ruleId":"no-unused-vars","severity":1,"message":"'definition' is defined but never used.","line":204,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'settingConfig' is defined but never used.","line":205,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":46},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":218,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件注册表\n * 提供组件定义的统一管理和查询服务\n * 支持 settingConfig 的自动属性暴露注册\n */\n\nimport type { ComponentDefinition } from './types'\nimport type { ComponentSettingConfig } from '../types/setting-config'\nimport { autoRegisterFromSettingConfig } from './property-exposure'\n\n/**\n * 组件注册表类\n * 负责管理所有 Card2.1 组件的定义信息\n */\nexport class ComponentRegistry {\n  private static definitions = new Map<string, ComponentDefinition>()\n\n  /**\n   * 注册组件定义\n   * @param definition 组件定义\n   */\n  static register(definition: ComponentDefinition): void {\n    this.definitions.set(definition.type, definition)\n  }\n\n  /**\n   * 获取组件定义\n   * @param componentType 组件类型\n   * @returns 组件定义或 undefined\n   */\n  static get(componentType: string): ComponentDefinition | undefined {\n    const definition = this.definitions.get(componentType)\n\n    if (!definition) {\n    }\n\n    return definition\n  }\n\n  /**\n   * 获取所有组件定义\n   * @returns 所有组件定义数组\n   */\n  static getAll(): ComponentDefinition[] {\n    return Array.from(this.definitions.values())\n  }\n\n  /**\n   * 检查组件是否已注册\n   * @param componentType 组件类型\n   * @returns 是否已注册\n   */\n  static has(componentType: string): boolean {\n    return this.definitions.has(componentType)\n  }\n\n  /**\n   * 获取组件的数据源键列表\n   * @param componentType 组件类型\n   * @returns 数据源键数组\n   */\n  static getDataSourceKeys(componentType: string): string[] {\n    const definition = this.get(componentType)\n    let keys: string[] = []\n\n    if (definition?.dataSources) {\n      // 处理数组格式的 dataSources (新的三文件架构)\n      if (Array.isArray(definition.dataSources)) {\n        keys = definition.dataSources.map(ds => ds.key)\n      }\n      // 处理对象格式的 dataSources (旧的架构兼容)\n      else if (typeof definition.dataSources === 'object') {\n        keys = Object.keys(definition.dataSources)\n      }\n    }\n\n    return keys\n  }\n\n  /**\n   * 获取组件的静态参数键列表\n   * @param componentType 组件类型\n   * @returns 静态参数键数组\n   */\n  static getStaticParamKeys(componentType: string): string[] {\n    const definition = this.get(componentType)\n    const keys = definition?.staticParams ? Object.keys(definition.staticParams) : []\n    return keys\n  }\n\n  /**\n   * 获取组件的数据源配置\n   * @param componentType 组件类型\n   * @returns 数据源配置对象\n   */\n  static getDataSourcesConfig(componentType: string): Record<string, any> | undefined {\n    const definition = this.get(componentType)\n    return definition?.dataSources\n  }\n\n  /**\n   * 检查组件是否支持多数据源\n   * @param componentType 组件类型\n   * @returns 是否支持多数据源\n   */\n  static isMultiDataSource(componentType: string): boolean {\n    const dataSourceKeys = this.getDataSourceKeys(componentType)\n    const isMulti = dataSourceKeys.length > 1\n    return isMulti\n  }\n\n  /**\n   * 获取注册表统计信息\n   * @returns 统计信息\n   */\n  static getStats(): {\n    totalComponents: number\n    multiDataSourceComponents: number\n    componentTypes: string[]\n  } {\n    const componentTypes = Array.from(this.definitions.keys())\n    const multiDataSourceComponents = componentTypes.filter(type => this.isMultiDataSource(type))\n\n    return {\n      totalComponents: componentTypes.length,\n      multiDataSourceComponents: multiDataSourceComponents.length,\n      componentTypes\n    }\n  }\n\n  /**\n   * 清空注册表（主要用于测试）\n   */\n  static clear(): void {\n    this.definitions.clear()\n  }\n\n  /**\n   * 批量注册组件\n   * @param definitions 组件定义数组\n   */\n  static registerBatch(definitions: ComponentDefinition[]): void {\n    definitions.forEach(definition => {\n      this.register(definition)\n    })\n  }\n\n  /**\n   * 🔥 新增：从 settingConfig 注册组件的属性暴露配置\n   * @param settingConfig 组件设置配置\n   */\n  static registerSettingConfig<T extends Record<string, any>>(settingConfig: ComponentSettingConfig<T>): void {\n    try {\n      // 自动注册到属性暴露系统\n      autoRegisterFromSettingConfig(settingConfig)\n    } catch (error) {}\n  }\n\n  /**\n   * 🔥 新增：批量注册 settingConfig\n   * @param settingConfigs settingConfig 数组\n   */\n  static registerSettingConfigs(settingConfigs: ComponentSettingConfig<any>[]): void {\n    settingConfigs.forEach(config => {\n      this.registerSettingConfig(config)\n    })\n  }\n\n  /**\n   * 🔥 新增：注册完整的组件（包括定义和 settingConfig）\n   * @param definition 组件定义\n   * @param settingConfig 设置配置（可选）\n   */\n  static registerComponent<T extends Record<string, any>>(\n    definition: ComponentDefinition,\n    settingConfig?: ComponentSettingConfig<T>\n  ): void {\n    // 注册组件定义\n    this.register(definition)\n\n    // 如果有 settingConfig，同时注册属性暴露\n    if (settingConfig) {\n      // 验证组件类型一致性\n\n      this.registerSettingConfig(settingConfig)\n    }\n  }\n}\n\n/**\n * 组件注册表接口（用于依赖注入等场景）\n */\nexport interface IComponentRegistry {\n  register(definition: ComponentDefinition): void\n  get(componentType: string): ComponentDefinition | undefined\n  getAll(): ComponentDefinition[]\n  has(componentType: string): boolean\n  getDataSourceKeys(componentType: string): string[]\n  getStaticParamKeys(componentType: string): string[]\n  isMultiDataSource(componentType: string): boolean\n  registerSettingConfig<T extends Record<string, any>>(settingConfig: ComponentSettingConfig<T>): void\n  registerSettingConfigs(settingConfigs: ComponentSettingConfig<any>[]): void\n  registerComponent<T extends Record<string, any>>(\n    definition: ComponentDefinition,\n    settingConfig?: ComponentSettingConfig<T>\n  ): void\n}\n\n/**\n * 默认组件注册表实例\n */\nexport const componentRegistry: IComponentRegistry = ComponentRegistry\n\n/**\n * 组件注册装饰器（可选，用于自动注册）\n */\nexport function RegisterComponent(definition: ComponentDefinition) {\n  return function <T extends { new (...args: any[]): {} }>(constructor: T) {\n    // 自动注册组件\n    ComponentRegistry.register(definition)\n    return constructor\n  }\n}\n\n// 导出类型\nexport type { ComponentDefinition }\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\config-manager.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'FlexibleConfigDefinition' is defined but never used.","line":6,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FlexibleConfigDefinition' is defined but never used.","line":6,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 灵活配置管理器\n * 负责检测配置模式和生成表单\n */\nimport type { Component } from 'vue'\nimport type { TSConfig, FlexibleConfigDefinition, ConfigMode, ConfigValues } from './config-types'\n\nexport class FlexibleConfigManager {\n  /**\n   * 检测配置模式\n   */\n  static detectConfigMode(vueConfig?: Component, tsConfig?: TSConfig): ConfigMode {\n    if (vueConfig && tsConfig) {\n      return 'hybrid'\n    } else if (tsConfig) {\n      return 'ts-only'\n    } else if (vueConfig) {\n      return 'vue-only'\n    }\n\n    throw new Error('至少需要提供一种配置方式')\n  }\n\n  /**\n   * 获取默认配置值\n   */\n  static getDefaultValues(tsConfig?: TSConfig): ConfigValues {\n    if (!tsConfig) return {}\n\n    const defaults: ConfigValues = {}\n\n    tsConfig.fields.forEach(field => {\n      if (field.defaultValue !== undefined) {\n        defaults[field.key] = field.defaultValue\n      }\n    })\n\n    return defaults\n  }\n\n  /**\n   * 验证配置值\n   */\n  static validateValues(\n    values: ConfigValues,\n    tsConfig?: TSConfig\n  ): {\n    valid: boolean\n    errors: string[]\n  } {\n    const errors: string[] = []\n\n    if (!tsConfig) {\n      return { valid: true, errors: [] }\n    }\n\n    tsConfig.fields.forEach(field => {\n      const value = values[field.key]\n\n      // 必填检查\n      if (field.required && (value === undefined || value === null || value === '')) {\n        errors.push(`${field.label} 是必填字段`)\n        return\n      }\n\n      // 类型检查\n      if (value !== undefined) {\n        switch (field.type) {\n          case 'number':\n            if (typeof value !== 'number' || isNaN(value)) {\n              errors.push(`${field.label} 必须是数字`)\n            } else {\n              if (field.min !== undefined && value < field.min) {\n                errors.push(`${field.label} 不能小于 ${field.min}`)\n              }\n              if (field.max !== undefined && value > field.max) {\n                errors.push(`${field.label} 不能大于 ${field.max}`)\n              }\n            }\n            break\n\n          case 'string':\n          case 'textarea':\n            if (typeof value !== 'string') {\n              errors.push(`${field.label} 必须是文本`)\n            }\n            break\n\n          case 'boolean':\n            if (typeof value !== 'boolean') {\n              errors.push(`${field.label} 必须是布尔值`)\n            }\n            break\n\n          case 'select':\n            if (field.options && !field.options.some(opt => opt.value === value)) {\n              errors.push(`${field.label} 的值不在可选范围内`)\n            }\n            break\n        }\n      }\n    })\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * 合并配置值（用于混合模式）\n   */\n  static mergeValues(tsValues: ConfigValues, vueValues: ConfigValues): ConfigValues {\n    return {\n      ...tsValues,\n      ...vueValues\n    }\n  }\n\n  /**\n   * 获取分组后的字段\n   */\n  static getGroupedFields(tsConfig: TSConfig): Array<{\n    name: string\n    label: string\n    fields: TSConfig['fields']\n  }> {\n    if (!tsConfig.groups || tsConfig.groups.length === 0) {\n      return [\n        {\n          name: 'default',\n          label: '基本配置',\n          fields: tsConfig.fields\n        }\n      ]\n    }\n\n    return tsConfig.groups.map(group => ({\n      name: group.name,\n      label: group.label,\n      fields: tsConfig.fields.filter(field => group.fields.includes(field.key) || field.group === group.name)\n    }))\n  }\n}\n\n// 导出单例\nexport const configManager = new FlexibleConfigManager()\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\config-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\component-requirement-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":48,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":48,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":134,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":134,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":135,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":135,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":146,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":146,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":146,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":147,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":147,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":186,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'relation' is defined but never used.","line":322,"column":73,"nodeType":"Identifier","messageId":"unusedVar","endLine":322,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'relation' is defined but never used.","line":322,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":322,"endColumn":81},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":326,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":326,"endColumn":23},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":326,"column":25,"nodeType":"BlockStatement","messageId":"unexpected","endLine":326,"endColumn":27,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[9055,9055],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":365,"column":90,"nodeType":"Identifier","messageId":"unusedVar","endLine":365,"endColumn":91},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is defined but never used.","line":365,"column":90,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":365,"column":93,"nodeType":"Identifier","messageId":"unusedVar","endLine":365,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":365,"column":93,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":98},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":430,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":430,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":430,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":430,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[11568,11568],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 组件数据需求管理器\n * 负责组件数据需求的注册、验证和查询\n */\n\nimport type { ComponentDataRequirement, DataFieldRequirement, DataRelationship } from './types'\n\nexport class ComponentRequirementManager {\n  private requirements = new Map<string, ComponentDataRequirement>()\n  private relationshipCache = new Map<string, Map<string, any>>()\n\n  /**\n   * 注册组件的数据需求\n   */\n  registerRequirement(componentId: string, requirement: ComponentDataRequirement): void {\n    try {\n      // 对于残留数据或无效数据，尝试修复或使用默认值\n      if (!requirement || typeof requirement !== 'object') {\n        requirement = this.createDefaultRequirement(componentId)\n      }\n\n      // 验证需求定义\n      const validation = this.validateRequirement(requirement)\n      if (!validation.valid) {\n        requirement = this.createDefaultRequirement(componentId)\n      }\n\n      this.requirements.set(componentId, requirement)\n\n      // 🔥 性能优化：只在需求真正改变时清除缓存\n      const existingRequirement = this.requirements.get(componentId)\n      const requirementChanged =\n        !existingRequirement || JSON.stringify(existingRequirement) !== JSON.stringify(requirement)\n\n      if (requirementChanged) {\n        this.relationshipCache.delete(componentId)\n      }\n    } catch (error) {\n      // 使用默认需求避免系统崩溃\n      const defaultRequirement = this.createDefaultRequirement(componentId)\n      this.requirements.set(componentId, defaultRequirement)\n    }\n  }\n\n  /**\n   * 创建默认数据需求（用于处理残留数据）\n   */\n  private createDefaultRequirement(componentId: string): ComponentDataRequirement {\n    return {\n      componentType: 'unknown',\n      displayName: '未知组件',\n      description: '由于残留数据导致的默认配置',\n      category: 'default',\n      version: '1.0.0',\n      primaryData: {\n        name: 'data',\n        label: '数据',\n        description: '组件数据',\n        type: 'object',\n        required: false,\n        defaultValue: {},\n        validation: {},\n        example: {},\n        tags: ['default']\n      },\n      fields: {\n        data: {\n          name: 'data',\n          label: '数据',\n          description: '组件默认数据字段',\n          type: 'object',\n          required: false,\n          defaultValue: {},\n          validation: {},\n          example: {},\n          tags: ['default']\n        }\n      },\n      relationships: {},\n      updateConfig: {\n        supportedTriggers: ['manual'],\n        recommendedInterval: 5000,\n        minInterval: 1000\n      }\n    }\n  }\n\n  /**\n   * 获取组件的数据需求\n   */\n  getRequirement(componentId: string): ComponentDataRequirement | null {\n    return this.requirements.get(componentId) || null\n  }\n\n  /**\n   * 获取所有已注册的组件需求\n   */\n  getAllRequirements(): Record<string, ComponentDataRequirement> {\n    const result: Record<string, ComponentDataRequirement> = {}\n    this.requirements.forEach((requirement, componentId) => {\n      result[componentId] = requirement\n    })\n    return result\n  }\n\n  /**\n   * 获取组件的字段需求\n   */\n  getFieldRequirement(componentId: string, fieldName: string): DataFieldRequirement | null {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement) return null\n\n    return requirement.fields[fieldName] || null\n  }\n\n  /**\n   * 获取组件的所有字段名\n   */\n  getFieldNames(componentId: string): string[] {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement) return []\n\n    return Object.keys(requirement.fields)\n  }\n\n  /**\n   * 获取组件的必填字段\n   */\n  getRequiredFields(componentId: string): string[] {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement) return []\n\n    return Object.entries(requirement.fields)\n      .filter(([_, fieldReq]) => fieldReq.required)\n      .map(([fieldName, _]) => fieldName)\n  }\n\n  /**\n   * 获取组件的可选字段\n   */\n  getOptionalFields(componentId: string): string[] {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement) return []\n\n    return Object.entries(requirement.fields)\n      .filter(([_, fieldReq]) => !fieldReq.required)\n      .map(([fieldName, _]) => fieldName)\n  }\n\n  /**\n   * 获取组件的数据关系\n   */\n  getRelationships(componentId: string): Record<string, DataRelationship> {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement || !requirement.relationships) return {}\n\n    return requirement.relationships\n  }\n\n  /**\n   * 计算字段的数据关系值\n   */\n  calculateRelationshipValue(componentId: string, relationshipName: string, inputData: Record<string, any>): any {\n    const relationships = this.getRelationships(componentId)\n    const relationship = relationships[relationshipName]\n\n    if (!relationship) {\n      throw new Error(`未找到数据关系: ${relationshipName}`)\n    }\n\n    if (relationship.type === 'independent') {\n      // 独立字段，直接返回对应的输入值\n      const inputField = relationship.inputs[0]\n      return inputData[inputField]\n    }\n\n    if (relationship.type === 'calculated' && relationship.calculator) {\n      // 计算字段，执行计算函数\n      const inputs: Record<string, any> = {}\n      relationship.inputs.forEach(inputField => {\n        inputs[inputField] = inputData[inputField]\n      })\n\n      try {\n        return relationship.calculator(inputs)\n      } catch (error) {\n        return undefined\n      }\n    }\n\n    if (relationship.type === 'derived') {\n      // 派生字段，基于其他字段的简单映射\n      const inputField = relationship.inputs[0]\n      return inputData[inputField]\n    }\n\n    return undefined\n  }\n\n  /**\n   * 验证数据需求定义\n   */\n  validateRequirement(requirement: ComponentDataRequirement): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    // 对于残留数据，如果 requirement 为 null 或 undefined，返回默认有效状态\n    if (!requirement || typeof requirement !== 'object') {\n      return { valid: true, errors: [] }\n    }\n\n    // 验证字段定义\n    if (!requirement.fields || Object.keys(requirement.fields).length === 0) {\n      errors.push('组件必须定义至少一个数据字段')\n    }\n\n    // 验证每个字段\n    if (requirement.fields && typeof requirement.fields === 'object') {\n      Object.entries(requirement.fields).forEach(([fieldName, fieldReq]) => {\n        const fieldErrors = this.validateFieldRequirement(fieldName, fieldReq)\n        errors.push(...fieldErrors)\n      })\n    }\n\n    // 验证数据关系\n    if (requirement.relationships && typeof requirement.relationships === 'object') {\n      Object.entries(requirement.relationships).forEach(([relationName, relation]) => {\n        const relationErrors = this.validateRelationship(relationName, relation, requirement.fields || {})\n        errors.push(...relationErrors)\n      })\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  /**\n   * 验证字段需求定义\n   */\n  private validateFieldRequirement(fieldName: string, fieldReq: DataFieldRequirement): string[] {\n    const errors: string[] = []\n\n    // 验证字段类型\n    if (!['value', 'object', 'array'].includes(fieldReq.type)) {\n      errors.push(`字段 ${fieldName} 的类型无效: ${fieldReq.type}`)\n    }\n\n    // 验证值类型\n    if (fieldReq.type === 'value' && fieldReq.valueType) {\n      if (!['number', 'string', 'boolean', 'any'].includes(fieldReq.valueType)) {\n        errors.push(`字段 ${fieldName} 的值类型无效: ${fieldReq.valueType}`)\n      }\n    }\n\n    // 验证嵌套结构\n    if ((fieldReq.type === 'object' || fieldReq.type === 'array') && fieldReq.structure) {\n      const structureValidation = this.validateRequirement(fieldReq.structure)\n      if (!structureValidation.valid) {\n        errors.push(`字段 ${fieldName} 的嵌套结构无效: ${structureValidation.errors.join(', ')}`)\n      }\n    }\n\n    // 验证描述\n    if (!fieldReq.description || fieldReq.description.trim() === '') {\n      errors.push(`字段 ${fieldName} 必须提供描述`)\n    }\n\n    return errors\n  }\n\n  /**\n   * 验证数据关系定义\n   */\n  private validateRelationship(\n    relationName: string,\n    relation: DataRelationship,\n    fields: Record<string, DataFieldRequirement>\n  ): string[] {\n    const errors: string[] = []\n\n    // 验证关系类型\n    if (!['independent', 'calculated', 'derived'].includes(relation.type)) {\n      errors.push(`关系 ${relationName} 的类型无效: ${relation.type}`)\n    }\n\n    // 验证输入字段\n    if (!relation.inputs || relation.inputs.length === 0) {\n      errors.push(`关系 ${relationName} 必须定义输入字段`)\n    } else {\n      relation.inputs.forEach(inputField => {\n        if (!fields[inputField]) {\n          errors.push(`关系 ${relationName} 引用了不存在的字段: ${inputField}`)\n        }\n      })\n    }\n\n    // 验证计算函数\n    if (relation.type === 'calculated' && !relation.calculator) {\n      errors.push(`计算关系 ${relationName} 必须提供计算函数`)\n    }\n\n    return errors\n  }\n\n  /**\n   * 生成组件数据需求的示例数据\n   */\n  generateSampleData(componentId: string): Record<string, any> {\n    const requirement = this.requirements.get(componentId)\n    if (!requirement) return {}\n\n    const sampleData: Record<string, any> = {}\n\n    // 生成字段示例数据\n    Object.entries(requirement.fields).forEach(([fieldName, fieldReq]) => {\n      sampleData[fieldName] = this.generateFieldSampleData(fieldReq)\n    })\n\n    // 计算关系字段的值\n    if (requirement.relationships) {\n      Object.entries(requirement.relationships).forEach(([relationName, relation]) => {\n        try {\n          const calculatedValue = this.calculateRelationshipValue(componentId, relationName, sampleData)\n          sampleData[relationName] = calculatedValue\n        } catch (error) {}\n      })\n    }\n\n    return sampleData\n  }\n\n  /**\n   * 生成字段示例数据\n   */\n  private generateFieldSampleData(fieldReq: DataFieldRequirement): any {\n    // 如果有示例数据，直接使用\n    if (fieldReq.example !== undefined) {\n      return fieldReq.example\n    }\n\n    // 如果有默认值，使用默认值\n    if (fieldReq.defaultValue !== undefined) {\n      return fieldReq.defaultValue\n    }\n\n    // 根据类型生成示例数据\n    switch (fieldReq.type) {\n      case 'value':\n        return this.generateValueSampleData(fieldReq.valueType || 'any')\n\n      case 'object':\n        if (fieldReq.structure) {\n          const objectSample: Record<string, any> = {}\n          Object.entries(fieldReq.structure.fields).forEach(([key, subFieldReq]) => {\n            objectSample[key] = this.generateFieldSampleData(subFieldReq)\n          })\n          return objectSample\n        }\n        return {}\n\n      case 'array':\n        if (fieldReq.structure) {\n          // 生成包含2个示例元素的数组\n          return [this.generateSampleData('temp'), this.generateSampleData('temp')].map((_, index) => {\n            const elementSample: Record<string, any> = {}\n            Object.entries(fieldReq.structure!.fields).forEach(([key, subFieldReq]) => {\n              elementSample[key] = this.generateFieldSampleData(subFieldReq)\n            })\n            return elementSample\n          })\n        }\n        return []\n\n      default:\n        return null\n    }\n  }\n\n  /**\n   * 生成值类型示例数据\n   */\n  private generateValueSampleData(valueType: string): any {\n    switch (valueType) {\n      case 'number':\n        return Math.round(Math.random() * 100)\n      case 'string':\n        return '示例文本'\n      case 'boolean':\n        return Math.random() > 0.5\n      case 'any':\n      default:\n        return '示例数据'\n    }\n  }\n\n  /**\n   * 获取已注册组件数量\n   */\n  getRegisteredCount(): number {\n    return this.requirements.size\n  }\n\n  /**\n   * 清空所有需求\n   */\n  clear(): void {\n    this.requirements.clear()\n    this.relationshipCache.clear()\n  }\n\n  /**\n   * 导出所有需求\n   */\n  exportRequirements(): Record<string, ComponentDataRequirement> {\n    const exported: Record<string, ComponentDataRequirement> = {}\n    this.requirements.forEach((requirement, componentId) => {\n      exported[componentId] = { ...requirement }\n    })\n    return exported\n  }\n\n  /**\n   * 导入需求\n   */\n  importRequirements(requirements: Record<string, ComponentDataRequirement>): void {\n    Object.entries(requirements).forEach(([componentId, requirement]) => {\n      try {\n        this.registerRequirement(componentId, requirement)\n      } catch (error) {}\n    })\n  }\n}\n\n// 创建全局实例\nexport const componentRequirementManager = new ComponentRequirementManager()\n\nexport default componentRequirementManager\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\data-processors.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":28,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":65,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":119,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":170,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":228,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":228,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":322,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":322,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":363,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":429,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":429,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据处理器实现\n * 支持脚本处理、格式化、过滤、转换等多种数据处理方式\n */\n\nimport type { DataProcessor, DataMappingRule, DataMapper } from './types'\n\n// ========== 基础数据处理器 ==========\n\n/**\n * 脚本处理器 - 执行JavaScript代码处理数据\n */\nexport class ScriptProcessor implements DataProcessor {\n  id: string\n  name: string = '脚本处理器'\n  type = 'script' as const\n  config: {\n    script: string\n    timeout?: number\n  }\n\n  constructor(id: string, script: string, timeout = 5000) {\n    this.id = id\n    this.config = { script, timeout }\n  }\n\n  async process(input: any): Promise<any> {\n    try {\n      // 创建安全的执行环境\n      const context = {\n        data: input,\n        console: {\n          log: console.log,\n          warn: console.warn,\n          error: console.error\n        },\n        Math,\n        Date,\n        JSON,\n        // 常用的数据处理函数\n        utils: {\n          round: (num: number, digits = 2) => Math.round(num * Math.pow(10, digits)) / Math.pow(10, digits),\n          formatNumber: (num: number) => new Intl.NumberFormat().format(num),\n          formatDate: (date: Date | string) => new Date(date).toLocaleString()\n        }\n      }\n\n      // 创建函数并执行\n      const processFunction = new Function(\n        'context',\n        `\n        with(context) {\n          ${this.config.script}\n        }\n      `\n      )\n\n      const result = await Promise.race([\n        Promise.resolve(processFunction(context)),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('脚本执行超时')), this.config.timeout))\n      ])\n      return result\n    } catch (error) {\n      throw error\n    }\n  }\n\n  validateConfig(): boolean {\n    return typeof this.config.script === 'string' && this.config.script.trim() !== ''\n  }\n}\n\n/**\n * 格式化处理器 - 格式化数据的显示\n */\nexport class FormatProcessor implements DataProcessor {\n  id: string\n  name: string = '格式化处理器'\n  type = 'format' as const\n  config: {\n    formatType: 'number' | 'date' | 'currency' | 'percentage'\n    options?: any\n  }\n\n  constructor(id: string, formatType: 'number' | 'date' | 'currency' | 'percentage', options?: any) {\n    this.id = id\n    this.config = { formatType, options }\n  }\n\n  async process(input: any): Promise<any> {\n    try {\n      if (input === null || input === undefined) {\n        return input\n      }\n\n      switch (this.config.formatType) {\n        case 'number':\n          return new Intl.NumberFormat('zh-CN', this.config.options).format(Number(input))\n\n        case 'date':\n          return new Intl.DateTimeFormat('zh-CN', this.config.options).format(new Date(input))\n\n        case 'currency':\n          return new Intl.NumberFormat('zh-CN', {\n            style: 'currency',\n            currency: 'CNY',\n            ...this.config.options\n          }).format(Number(input))\n\n        case 'percentage':\n          return new Intl.NumberFormat('zh-CN', {\n            style: 'percent',\n            ...this.config.options\n          }).format(Number(input))\n\n        default:\n          return input\n      }\n    } catch (error) {\n      return input // 格式化失败时返回原值\n    }\n  }\n\n  validateConfig(): boolean {\n    return ['number', 'date', 'currency', 'percentage'].includes(this.config.formatType)\n  }\n}\n\n/**\n * 过滤处理器 - 过滤数据\n */\nexport class FilterProcessor implements DataProcessor {\n  id: string\n  name: string = '过滤处理器'\n  type = 'filter' as const\n  config: {\n    filterType: 'include' | 'exclude' | 'condition'\n    criteria: any\n  }\n\n  constructor(id: string, filterType: 'include' | 'exclude' | 'condition', criteria: any) {\n    this.id = id\n    this.config = { filterType, criteria }\n  }\n\n  async process(input: any): Promise<any> {\n    try {\n      if (!Array.isArray(input)) {\n        return input\n      }\n\n      switch (this.config.filterType) {\n        case 'include':\n          return input.filter(item => this.matchesCriteria(item, this.config.criteria, true))\n\n        case 'exclude':\n          return input.filter(item => !this.matchesCriteria(item, this.config.criteria, true))\n\n        case 'condition':\n          // 使用函数字符串进行条件过滤\n          if (typeof this.config.criteria === 'string') {\n            const conditionFn = new Function('item', `return ${this.config.criteria}`)\n            return input.filter(conditionFn)\n          }\n          return input\n\n        default:\n          return input\n      }\n    } catch (error) {\n      return input\n    }\n  }\n\n  private matchesCriteria(item: any, criteria: any, defaultResult: boolean): boolean {\n    if (typeof criteria === 'object' && criteria !== null) {\n      return Object.entries(criteria).every(([key, value]) => {\n        return item && item[key] === value\n      })\n    }\n    return defaultResult\n  }\n\n  validateConfig(): boolean {\n    return ['include', 'exclude', 'condition'].includes(this.config.filterType)\n  }\n}\n\n/**\n * 转换处理器 - 转换数据结构\n */\nexport class TransformProcessor implements DataProcessor {\n  id: string\n  name: string = '转换处理器'\n  type = 'transform' as const\n  config: {\n    transformType: 'flatten' | 'group' | 'pivot' | 'custom'\n    options?: any\n  }\n\n  constructor(id: string, transformType: 'flatten' | 'group' | 'pivot' | 'custom', options?: any) {\n    this.id = id\n    this.config = { transformType, options }\n  }\n\n  async process(input: any): Promise<any> {\n    try {\n      switch (this.config.transformType) {\n        case 'flatten':\n          return this.flatten(input)\n\n        case 'group':\n          return this.groupBy(input, this.config.options?.groupKey)\n\n        case 'pivot':\n          return this.pivot(input, this.config.options)\n\n        case 'custom':\n          // 自定义转换逻辑\n          if (this.config.options?.transformer) {\n            return this.config.options.transformer(input)\n          }\n          return input\n\n        default:\n          return input\n      }\n    } catch (error) {\n      return input\n    }\n  }\n\n  private flatten(obj: any, prefix = ''): any {\n    const result: any = {}\n\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const newKey = prefix ? `${prefix}.${key}` : key\n\n        if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n          Object.assign(result, this.flatten(obj[key], newKey))\n        } else {\n          result[newKey] = obj[key]\n        }\n      }\n    }\n\n    return result\n  }\n\n  private groupBy(array: any[], key: string): any {\n    if (!Array.isArray(array)) return array\n\n    return array.reduce((groups, item) => {\n      const groupKey = item[key]\n      if (!groups[groupKey]) {\n        groups[groupKey] = []\n      }\n      groups[groupKey].push(item)\n      return groups\n    }, {})\n  }\n\n  private pivot(array: any[], options: any): any {\n    // 简化的透视表实现\n    if (!Array.isArray(array) || !options) return array\n\n    const { rowKey, colKey, valueKey } = options\n    const result: any = {}\n\n    array.forEach(item => {\n      const row = item[rowKey]\n      const col = item[colKey]\n      const value = item[valueKey]\n\n      if (!result[row]) result[row] = {}\n      result[row][col] = value\n    })\n\n    return result\n  }\n\n  validateConfig(): boolean {\n    return ['flatten', 'group', 'pivot', 'custom'].includes(this.config.transformType)\n  }\n}\n\n// ========== 数据映射器实现 ==========\n\n/**\n * 路径解析数据映射器\n */\nexport class PathDataMapper implements DataMapper {\n  rules: DataMappingRule[]\n\n  constructor(rules: DataMappingRule[]) {\n    this.rules = rules\n  }\n\n  map(sourceData: any): Record<string, any> {\n    const result: Record<string, any> = {}\n\n    this.rules.forEach(rule => {\n      try {\n        let value = this.extractValueByPath(sourceData, rule.sourcePath)\n\n        // 应用转换\n        if (rule.type === 'calculated' && rule.transformer) {\n          value = rule.transformer(value)\n        } else if (rule.type === 'conditional' && rule.condition) {\n          if (!rule.condition(value)) {\n            value = rule.defaultValue\n          }\n        }\n\n        // 使用默认值\n        if (value === undefined && rule.defaultValue !== undefined) {\n          value = rule.defaultValue\n        }\n\n        result[rule.targetField] = value\n      } catch (error) {\n        result[rule.targetField] = rule.defaultValue\n      }\n    })\n    return result\n  }\n\n  /**\n   * 根据路径提取值，支持复杂路径如 'data[0].sensor.value'\n   */\n  private extractValueByPath(data: any, path: string): any {\n    if (!path || path === '') return data\n\n    try {\n      // 解析路径\n      const pathParts = this.parsePath(path)\n      let current = data\n\n      for (const part of pathParts) {\n        if (current === null || current === undefined) {\n          return undefined\n        }\n\n        if (typeof part === 'number') {\n          // 数组索引\n          if (Array.isArray(current)) {\n            current = current[part]\n          } else {\n            return undefined\n          }\n        } else {\n          // 对象属性\n          if (typeof current === 'object' && part in current) {\n            current = current[part]\n          } else {\n            return undefined\n          }\n        }\n      }\n\n      return current\n    } catch (error) {\n      return undefined\n    }\n  }\n\n  /**\n   * 解析路径字符串，支持数组索引和对象属性\n   */\n  private parsePath(path: string): (string | number)[] {\n    const parts: (string | number)[] = []\n    let current = ''\n    let inBrackets = false\n    let bracketContent = ''\n\n    for (let i = 0; i < path.length; i++) {\n      const char = path[i]\n\n      if (char === '[') {\n        if (current) {\n          parts.push(current)\n          current = ''\n        }\n        inBrackets = true\n        bracketContent = ''\n      } else if (char === ']') {\n        inBrackets = false\n        const index = parseInt(bracketContent, 10)\n        if (!isNaN(index)) {\n          parts.push(index)\n        }\n        bracketContent = ''\n      } else if (char === '.') {\n        if (inBrackets) {\n          bracketContent += char\n        } else {\n          if (current) {\n            parts.push(current)\n            current = ''\n          }\n        }\n      } else {\n        if (inBrackets) {\n          bracketContent += char\n        } else {\n          current += char\n        }\n      }\n    }\n\n    if (current) {\n      parts.push(current)\n    }\n\n    return parts\n  }\n\n  validateRules(): boolean {\n    return this.rules.every(rule => {\n      return rule.sourcePath && rule.targetField && ['direct', 'calculated', 'conditional'].includes(rule.type)\n    })\n  }\n\n  preview(sourceData: any): Record<string, any> {\n    // 预览功能与实际映射相同，但不会抛出错误\n    try {\n      return this.map(sourceData)\n    } catch (error) {\n      return {}\n    }\n  }\n}\n\n// ========== 处理器工厂 ==========\n\n/**\n * 数据处理器工厂\n */\nexport class DataProcessorFactory {\n  /**\n   * 创建脚本处理器\n   */\n  static createScriptProcessor(id: string, script: string, timeout?: number): ScriptProcessor {\n    return new ScriptProcessor(id, script, timeout)\n  }\n\n  /**\n   * 创建格式化处理器\n   */\n  static createFormatProcessor(\n    id: string,\n    formatType: 'number' | 'date' | 'currency' | 'percentage',\n    options?: any\n  ): FormatProcessor {\n    return new FormatProcessor(id, formatType, options)\n  }\n\n  /**\n   * 创建过滤处理器\n   */\n  static createFilterProcessor(\n    id: string,\n    filterType: 'include' | 'exclude' | 'condition',\n    criteria: any\n  ): FilterProcessor {\n    return new FilterProcessor(id, filterType, criteria)\n  }\n\n  /**\n   * 创建转换处理器\n   */\n  static createTransformProcessor(\n    id: string,\n    transformType: 'flatten' | 'group' | 'pivot' | 'custom',\n    options?: any\n  ): TransformProcessor {\n    return new TransformProcessor(id, transformType, options)\n  }\n\n  /**\n   * 根据配置创建处理器\n   */\n  static createFromConfig(config: any): DataProcessor {\n    switch (config.type) {\n      case 'script':\n        return new ScriptProcessor(config.id, config.script, config.timeout)\n\n      case 'format':\n        return new FormatProcessor(config.id, config.formatType, config.options)\n\n      case 'filter':\n        return new FilterProcessor(config.id, config.filterType, config.criteria)\n\n      case 'transform':\n        return new TransformProcessor(config.id, config.transformType, config.options)\n\n      default:\n        throw new Error(`不支持的处理器类型: ${config.type}`)\n    }\n  }\n}\n\nexport default DataProcessorFactory\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\data-sources.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":39,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":184,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":184,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":223,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":223,"endColumn":25},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":223,"column":27,"nodeType":"BlockStatement","messageId":"unexpected","endLine":223,"endColumn":29,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5714,5714],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":244,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":244,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":35},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":246,"column":12,"nodeType":"BlockStatement","messageId":"unexpected","endLine":247,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6231,6236],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":269,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":269,"endColumn":30},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":325,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":336,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据源实现\n * 支持多种数据源类型：静态数据、API、WebSocket、脚本、数据库等\n */\n\nimport type { DataSource } from './types'\nimport { defaultScriptEngine } from '@/core/script-engine'\n\n// ========== 静态数据源 ==========\n\nexport interface StaticDataSourceConfig {\n  data: any\n  refreshInterval?: number\n}\n\nexport class StaticDataSource implements DataSource {\n  id: string\n  type = 'static' as const\n  name: string\n  description?: string\n  private config: StaticDataSourceConfig\n\n  constructor(id: string, name: string, config: StaticDataSourceConfig, description?: string) {\n    this.id = id\n    this.name = name\n    this.config = config\n    this.description = description\n  }\n\n  async fetchData(): Promise<any> {\n    // 模拟异步操作\n    await new Promise(resolve => setTimeout(resolve, 10))\n\n    // 如果数据是函数，执行它以获得动态数据\n    if (typeof this.config.data === 'function') {\n      try {\n        const result = await this.config.data()\n        return result\n      } catch (error) {\n        return null\n      }\n    }\n    return this.config.data\n  }\n\n  validateConfig(): boolean {\n    return this.config.data !== undefined\n  }\n\n  getConfig(): StaticDataSourceConfig {\n    return { ...this.config }\n  }\n\n  updateConfig(config: Partial<StaticDataSourceConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n}\n\n// ========== API数据源 ==========\n\nexport interface ApiDataSourceConfig {\n  url: string\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE'\n  headers?: Record<string, string>\n  params?: Record<string, any>\n  body?: any\n  timeout?: number\n  retryCount?: number\n  retryDelay?: number\n}\n\nexport class ApiDataSource implements DataSource {\n  id: string\n  type = 'api' as const\n  name: string\n  description?: string\n  private config: ApiDataSourceConfig\n\n  constructor(id: string, name: string, config: ApiDataSourceConfig, description?: string) {\n    this.id = id\n    this.name = name\n    this.config = {\n      method: 'GET',\n      timeout: 10000,\n      retryCount: 3,\n      retryDelay: 1000,\n      ...config\n    }\n    this.description = description\n  }\n\n  async fetchData(): Promise<any> {\n    let lastError: Error | null = null\n\n    for (let attempt = 0; attempt <= this.config.retryCount!; attempt++) {\n      try {\n        const controller = new AbortController()\n        const timeoutId = setTimeout(() => controller.abort(), this.config.timeout)\n\n        const requestInit: RequestInit = {\n          method: this.config.method,\n          headers: {\n            'Content-Type': 'application/json',\n            ...this.config.headers\n          },\n          signal: controller.signal\n        }\n\n        // 处理请求参数\n        let url = this.config.url\n        if (this.config.params && this.config.method === 'GET') {\n          const searchParams = new URLSearchParams(this.config.params)\n          url += (url.includes('?') ? '&' : '?') + searchParams.toString()\n        }\n\n        // 处理请求体\n        if (this.config.body && this.config.method !== 'GET') {\n          requestInit.body = typeof this.config.body === 'string' ? this.config.body : JSON.stringify(this.config.body)\n        }\n\n        const response = await fetch(url, requestInit)\n        clearTimeout(timeoutId)\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n        }\n\n        const contentType = response.headers.get('content-type')\n        let data: any\n\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json()\n        } else {\n          data = await response.text()\n        }\n        return data\n      } catch (error) {\n        lastError = error as Error\n        if (attempt < this.config.retryCount!) {\n          await new Promise(resolve => setTimeout(resolve, this.config.retryDelay))\n        }\n      }\n    }\n    throw lastError || new Error('API调用失败')\n  }\n\n  validateConfig(): boolean {\n    try {\n      new URL(this.config.url)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  getConfig(): ApiDataSourceConfig {\n    return { ...this.config }\n  }\n\n  updateConfig(config: Partial<ApiDataSourceConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n}\n\n// ========== WebSocket数据源 ==========\n\nexport interface WebSocketDataSourceConfig {\n  url: string\n  protocols?: string[]\n  reconnectInterval?: number\n  maxReconnectAttempts?: number\n  heartbeatInterval?: number\n  heartbeatMessage?: string\n}\n\nexport class WebSocketDataSource implements DataSource {\n  id: string\n  type = 'websocket' as const\n  name: string\n  description?: string\n  private config: WebSocketDataSourceConfig\n  private ws: WebSocket | null = null\n  private lastData: any = null\n  private dataListeners: ((data: any) => void)[] = []\n  private reconnectAttempts = 0\n\n  constructor(id: string, name: string, config: WebSocketDataSourceConfig, description?: string) {\n    this.id = id\n    this.name = name\n    this.config = {\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 5,\n      heartbeatInterval: 30000,\n      ...config\n    }\n    this.description = description\n  }\n\n  async fetchData(): Promise<any> {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      await this.connect()\n    }\n\n    return this.lastData\n  }\n\n  private async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.config.url, this.config.protocols)\n\n        this.ws.onopen = () => {\n          this.reconnectAttempts = 0\n          this.startHeartbeat()\n          resolve()\n        }\n\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data)\n            this.lastData = data\n            this.dataListeners.forEach(listener => listener(data))\n          } catch (error) {}\n        }\n\n        this.ws.onerror = error => {\n          reject(error)\n        }\n\n        this.ws.onclose = () => {\n          this.stopHeartbeat()\n          this.attemptReconnect()\n        }\n      } catch (error) {\n        reject(error)\n      }\n    })\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts < this.config.maxReconnectAttempts!) {\n      this.reconnectAttempts++\n      setTimeout(() => {\n        this.connect().catch(error => {})\n      }, this.config.reconnectInterval)\n    } else {\n    }\n  }\n\n  private heartbeatTimer: NodeJS.Timeout | null = null\n\n  private startHeartbeat(): void {\n    if (this.config.heartbeatInterval && this.config.heartbeatMessage) {\n      this.heartbeatTimer = setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          this.ws.send(this.config.heartbeatMessage!)\n        }\n      }, this.config.heartbeatInterval)\n    }\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer)\n      this.heartbeatTimer = null\n    }\n  }\n\n  onData(listener: (data: any) => void): void {\n    this.dataListeners.push(listener)\n  }\n\n  disconnect(): void {\n    this.stopHeartbeat()\n    if (this.ws) {\n      this.ws.close()\n      this.ws = null\n    }\n  }\n\n  validateConfig(): boolean {\n    try {\n      new URL(this.config.url)\n      return this.config.url.startsWith('ws://') || this.config.url.startsWith('wss://')\n    } catch {\n      return false\n    }\n  }\n\n  getConfig(): WebSocketDataSourceConfig {\n    return { ...this.config }\n  }\n\n  updateConfig(config: Partial<WebSocketDataSourceConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n}\n\n// ========== 脚本数据源 ==========\n\nexport interface ScriptDataSourceConfig {\n  script: string\n  context?: Record<string, any>\n  timeout?: number\n}\n\nexport class ScriptDataSource implements DataSource {\n  id: string\n  type = 'script' as const\n  name: string\n  description?: string\n  private config: ScriptDataSourceConfig\n\n  constructor(id: string, name: string, config: ScriptDataSourceConfig, description?: string) {\n    this.id = id\n    this.name = name\n    this.config = {\n      timeout: 5000,\n      ...config\n    }\n    this.description = description\n  }\n\n  async fetchData(): Promise<any> {\n    try {\n      // 使用全局脚本引擎执行脚本\n      const result = await defaultScriptEngine.execute(this.config.script, this.config.context)\n\n      if (result.success) {\n        return result.data\n      } else {\n        throw result.error || new Error('脚本执行失败')\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n\n  validateConfig(): boolean {\n    return typeof this.config.script === 'string' && this.config.script.trim() !== ''\n  }\n\n  getConfig(): ScriptDataSourceConfig {\n    return { ...this.config }\n  }\n\n  updateConfig(config: Partial<ScriptDataSourceConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n}\n\n// ========== 数据源工厂 ==========\n\nexport class DataSourceFactory {\n  /**\n   * 创建静态数据源\n   */\n  static createStaticDataSource(id: string, name: string, data: any, description?: string): StaticDataSource {\n    return new StaticDataSource(id, name, { data }, description)\n  }\n\n  /**\n   * 创建API数据源\n   */\n  static createApiDataSource(\n    id: string,\n    name: string,\n    config: ApiDataSourceConfig,\n    description?: string\n  ): ApiDataSource {\n    return new ApiDataSource(id, name, config, description)\n  }\n\n  /**\n   * 创建WebSocket数据源\n   */\n  static createWebSocketDataSource(\n    id: string,\n    name: string,\n    config: WebSocketDataSourceConfig,\n    description?: string\n  ): WebSocketDataSource {\n    return new WebSocketDataSource(id, name, config, description)\n  }\n\n  /**\n   * 创建脚本数据源\n   */\n  static createScriptDataSource(\n    id: string,\n    name: string,\n    script: string,\n    context?: Record<string, any>,\n    description?: string\n  ): ScriptDataSource {\n    return new ScriptDataSource(id, name, { script, context }, description)\n  }\n\n  /**\n   * 根据配置创建数据源\n   */\n  static createFromConfig(config: any): DataSource {\n    switch (config.type) {\n      case 'static':\n        return new StaticDataSource(config.id, config.name, config.config, config.description)\n\n      case 'api':\n        return new ApiDataSource(config.id, config.name, config.config, config.description)\n\n      case 'websocket':\n        return new WebSocketDataSource(config.id, config.name, config.config, config.description)\n\n      case 'script':\n        return new ScriptDataSource(config.id, config.name, config.config, config.description)\n\n      default:\n        throw new Error(`不支持的数据源类型: ${config.type}`)\n    }\n  }\n\n  /**\n   * 创建示例数据源\n   */\n  static createSampleDataSources(): DataSource[] {\n    const sources: DataSource[] = []\n\n    // 静态数据源示例\n    sources.push(\n      DataSourceFactory.createStaticDataSource(\n        'sample-static-001',\n        '温度传感器数据',\n        {\n          temperature: 25.6,\n          humidity: 68.2,\n          pressure: 1013.25,\n          timestamp: new Date().toISOString(),\n          sensor: {\n            id: 'temp-001',\n            name: '环境温度传感器',\n            location: '机房A区'\n          },\n          readings: [\n            { time: '14:00', value: 24.5 },\n            { time: '14:30', value: 25.1 },\n            { time: '15:00', value: 25.6 }\n          ]\n        },\n        '模拟温度传感器的静态数据'\n      )\n    )\n\n    // 脚本数据源示例\n    sources.push(\n      DataSourceFactory.createScriptDataSource(\n        'sample-script-001',\n        '动态模拟数据',\n        `\n        return {\n          value: mockData.randomNumber(0, 100),\n          title: '实时数据',\n          unit: '%',\n          timestamp: new Date().toISOString(),\n          trend: mockData.randomBoolean() ? 'up' : 'down',\n          history: Array.from({length: 10}, (_, i) => ({\n            time: new Date(Date.now() - (9-i) * 60000).toISOString(),\n            value: mockData.randomNumber(0, 100)\n          }))\n        };\n        `,\n        {},\n        '生成动态模拟数据的脚本数据源'\n      )\n    )\n\n    return sources\n  }\n}\n\nexport default DataSourceFactory\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\data-transform-pipeline.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'beforeProcessing' is assigned a value but never used.","line":245,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeProcessing' is assigned a value but never used.","line":245,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":245,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'afterProcessing' is assigned a value but never used.","line":247,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'afterProcessing' is assigned a value but never used.","line":247,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'executionTime' is assigned a value but never used.","line":257,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":257,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'executionTime' is assigned a value but never used.","line":257,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'executionTime' is assigned a value but never used.","line":261,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'executionTime' is assigned a value but never used.","line":261,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":261,"endColumn":26},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":330,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":345,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据转换管道实现\n * 整合数据源、处理器和映射器，提供完整的数据转换流程\n */\n\nimport type {\n  DataSource,\n  DataProcessor,\n  DataMapper,\n  DataValidator,\n  DataTransformPipeline,\n  ComponentDataRequirement,\n  DataValidationResult\n} from './types'\n\nimport { PathDataMapper } from './data-processors'\n\n// ========== 数据验证器实现 ==========\n\nexport class ComponentDataValidator implements DataValidator {\n  validate(data: any, requirement: ComponentDataRequirement): DataValidationResult {\n    const errors: string[] = []\n    const warnings: string[] = []\n    const details: Record<string, any> = {}\n    // 验证每个字段\n    Object.entries(requirement.fields).forEach(([fieldName, fieldReq]) => {\n      const fieldValue = data?.[fieldName]\n      const fieldValidation = this.validateField(fieldValue, fieldReq)\n\n      details[fieldName] = {\n        value: fieldValue,\n        required: fieldReq.required,\n        valid: fieldValidation.valid,\n        errors: fieldValidation.errors,\n        warnings: fieldValidation.warnings\n      }\n\n      if (!fieldValidation.valid) {\n        if (fieldReq.required) {\n          errors.push(`必填字段 ${fieldName} 验证失败: ${fieldValidation.errors.join(', ')}`)\n        } else {\n          warnings.push(`可选字段 ${fieldName} 验证失败: ${fieldValidation.errors.join(', ')}`)\n        }\n      }\n    })\n\n    // 验证数据关系\n    if (requirement.relationships) {\n      Object.entries(requirement.relationships).forEach(([relationName, relation]) => {\n        const inputsValid = relation.inputs.every(inputField => data?.[inputField] !== undefined)\n        details[`relationship_${relationName}`] = {\n          type: relation.type,\n          inputs: relation.inputs,\n          inputsValid\n        }\n\n        if (!inputsValid) {\n          warnings.push(`数据关系 ${relationName} 的输入字段不完整`)\n        }\n      })\n    }\n\n    const result: DataValidationResult = {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      details\n    }\n    return result\n  }\n\n  validateField(value: any, fieldRequirement: DataFieldRequirement): DataValidationResult {\n    const errors: string[] = []\n    const warnings: string[] = []\n\n    // 检查必填字段\n    if (fieldRequirement.required && (value === undefined || value === null)) {\n      errors.push('字段值不能为空')\n      return { valid: false, errors, warnings, details: {} }\n    }\n\n    // 如果值为空且字段不是必填的，则验证通过\n    if (value === undefined || value === null) {\n      return { valid: true, errors: [], warnings: [], details: {} }\n    }\n\n    // 验证字段类型\n    switch (fieldRequirement.type) {\n      case 'value':\n        this.validateValueType(value, fieldRequirement.valueType || 'any', errors, warnings)\n        break\n\n      case 'object':\n        if (typeof value !== 'object' || Array.isArray(value)) {\n          errors.push('字段值必须是对象类型')\n        } else if (fieldRequirement.structure) {\n          // 递归验证嵌套结构\n          const nestedValidation = this.validate(value, fieldRequirement.structure)\n          if (!nestedValidation.valid) {\n            errors.push(...nestedValidation.errors.map(err => `嵌套对象: ${err}`))\n          }\n        }\n        break\n\n      case 'array':\n        if (!Array.isArray(value)) {\n          errors.push('字段值必须是数组类型')\n        } else if (fieldRequirement.structure && value.length > 0) {\n          // 验证数组元素结构\n          const sampleElement = value[0]\n          const elementValidation = this.validate(sampleElement, fieldRequirement.structure)\n          if (!elementValidation.valid) {\n            warnings.push(`数组元素结构不匹配: ${elementValidation.errors.join(', ')}`)\n          }\n        }\n        break\n    }\n\n    // 验证自定义规则\n    if (fieldRequirement.validation) {\n      this.validateCustomRules(value, fieldRequirement.validation, errors, warnings)\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      details: { value, type: typeof value }\n    }\n  }\n\n  private validateValueType(value: any, expectedType: string, errors: string[], warnings: string[]): void {\n    const actualType = typeof value\n\n    switch (expectedType) {\n      case 'number':\n        if (actualType !== 'number' || isNaN(value)) {\n          errors.push(`期望数字类型，实际类型: ${actualType}`)\n        }\n        break\n\n      case 'string':\n        if (actualType !== 'string') {\n          errors.push(`期望字符串类型，实际类型: ${actualType}`)\n        }\n        break\n\n      case 'boolean':\n        if (actualType !== 'boolean') {\n          errors.push(`期望布尔类型，实际类型: ${actualType}`)\n        }\n        break\n\n      case 'any':\n        // 任何类型都可以\n        break\n\n      default:\n        warnings.push(`未知的值类型要求: ${expectedType}`)\n    }\n  }\n\n  private validateCustomRules(value: any, validation: any, errors: string[], warnings: string[]): void {\n    if (validation.min !== undefined) {\n      if (typeof value === 'number' && value < validation.min) {\n        errors.push(`值 ${value} 小于最小值 ${validation.min}`)\n      } else if (typeof value === 'string' && value.length < validation.min) {\n        errors.push(`字符串长度 ${value.length} 小于最小长度 ${validation.min}`)\n      }\n    }\n\n    if (validation.max !== undefined) {\n      if (typeof value === 'number' && value > validation.max) {\n        errors.push(`值 ${value} 大于最大值 ${validation.max}`)\n      } else if (typeof value === 'string' && value.length > validation.max) {\n        errors.push(`字符串长度 ${value.length} 大于最大长度 ${validation.max}`)\n      }\n    }\n\n    if (validation.pattern && typeof value === 'string') {\n      const regex = new RegExp(validation.pattern)\n      if (!regex.test(value)) {\n        errors.push(`值不匹配正则表达式: ${validation.pattern}`)\n      }\n    }\n\n    if (validation.enum && !validation.enum.includes(value)) {\n      errors.push(`值不在允许的枚举值中: ${validation.enum.join(', ')}`)\n    }\n\n    if (validation.custom && typeof validation.custom === 'function') {\n      try {\n        const customResult = validation.custom(value)\n        if (customResult === false) {\n          errors.push('自定义验证失败')\n        } else if (typeof customResult === 'string') {\n          errors.push(customResult)\n        }\n      } catch (error) {\n        warnings.push(`自定义验证执行失败: ${error instanceof Error ? error.message : '未知错误'}`)\n      }\n    }\n  }\n}\n\n// ========== 数据转换管道实现 ==========\n\nexport class DataTransformPipelineImpl implements DataTransformPipeline {\n  id: string\n  source: DataSource\n  processors: DataProcessor[]\n  mapper: DataMapper\n  validator?: DataValidator\n\n  private lastExecutionTime: Date | null = null\n  private lastResult: any = null\n  private executionCount = 0\n\n  constructor(\n    id: string,\n    source: DataSource,\n    processors: DataProcessor[] = [],\n    mapper: DataMapper,\n    validator?: DataValidator\n  ) {\n    this.id = id\n    this.source = source\n    this.processors = processors\n    this.mapper = mapper\n    this.validator = validator\n  }\n\n  async execute(): Promise<Record<string, any>> {\n    const startTime = Date.now()\n    this.executionCount++\n\n    try {\n      // 步骤1: 从数据源获取原始数据\n      let currentData = await this.source.fetchData()\n\n      // 步骤2: 通过处理器链处理数据\n      for (let i = 0; i < this.processors.length; i++) {\n        const processor = this.processors[i]\n\n        const beforeProcessing = JSON.stringify(currentData)\n        currentData = await processor.process(currentData)\n        const afterProcessing = JSON.stringify(currentData)\n      }\n\n      // 步骤3: 执行字段映射\n      const mappedData = this.mapper.map(currentData)\n\n      // 记录执行结果\n      this.lastExecutionTime = new Date()\n      this.lastResult = mappedData\n\n      const executionTime = Date.now() - startTime\n\n      return mappedData\n    } catch (error) {\n      const executionTime = Date.now() - startTime\n      throw error\n    }\n  }\n\n  validate(): boolean {\n    const errors: string[] = []\n\n    // 验证数据源\n    if (!this.source.validateConfig()) {\n      errors.push('数据源配置无效')\n    }\n\n    // 验证处理器\n    this.processors.forEach((processor, index) => {\n      if (!processor.validateConfig || !processor.validateConfig()) {\n        errors.push(`处理器 ${index + 1} (${processor.name}) 配置无效`)\n      }\n    })\n\n    // 验证映射器\n    if (!this.mapper.validateRules()) {\n      errors.push('数据映射规则无效')\n    }\n\n    if (errors.length > 0) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * 获取管道统计信息\n   */\n  getStats(): {\n    id: string\n    executionCount: number\n    lastExecutionTime: Date | null\n    lastResult: any\n    isValid: boolean\n    sourceType: string\n    processorCount: number\n    mappingRulesCount: number\n  } {\n    return {\n      id: this.id,\n      executionCount: this.executionCount,\n      lastExecutionTime: this.lastExecutionTime,\n      lastResult: this.lastResult,\n      isValid: this.validate(),\n      sourceType: this.source.type,\n      processorCount: this.processors.length,\n      mappingRulesCount: this.mapper.rules.length\n    }\n  }\n\n  /**\n   * 重置统计信息\n   */\n  resetStats(): void {\n    this.executionCount = 0\n    this.lastExecutionTime = null\n    this.lastResult = null\n  }\n\n  /**\n   * 预览管道执行结果（不更新统计信息）\n   */\n  async preview(): Promise<Record<string, any>> {\n    try {\n      // 获取数据源数据\n      let currentData = await this.source.fetchData()\n\n      // 处理器链处理\n      for (const processor of this.processors) {\n        currentData = await processor.process(currentData)\n      }\n\n      // 字段映射\n      const mappedData = this.mapper.map(currentData)\n\n      return mappedData\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// ========== 管道工厂 ==========\n\nexport class DataTransformPipelineFactory {\n  /**\n   * 创建基础管道\n   */\n  static create(\n    id: string,\n    source: DataSource,\n    mappingRules: any[],\n    processors: DataProcessor[] = []\n  ): DataTransformPipelineImpl {\n    const mapper = new PathDataMapper(mappingRules)\n    const validator = new ComponentDataValidator()\n\n    return new DataTransformPipelineImpl(id, source, processors, mapper, validator)\n  }\n\n  /**\n   * 根据配置创建管道\n   */\n  static createFromConfig(config: {\n    id: string\n    source: DataSource\n    processors?: DataProcessor[]\n    mappingRules: any[]\n    enableValidation?: boolean\n  }): DataTransformPipelineImpl {\n    const mapper = new PathDataMapper(config.mappingRules)\n    const validator = config.enableValidation ? new ComponentDataValidator() : undefined\n\n    return new DataTransformPipelineImpl(config.id, config.source, config.processors || [], mapper, validator)\n  }\n\n  /**\n   * 创建示例管道\n   */\n  static createSamplePipeline(): DataTransformPipelineImpl {\n    // 这里可以创建一个示例管道用于测试\n    // 具体实现会在测试组件中完成\n    throw new Error('示例管道需要在具体使用时创建')\n  }\n}\n\nexport default DataTransformPipelineImpl\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\integration-test.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'totalFailed' is assigned a value but never used.","line":662,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":662,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalFailed' is assigned a value but never used.","line":662,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":662,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'totalDuration' is assigned a value but never used.","line":663,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":663,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'totalDuration' is assigned a value but never used.","line":663,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":663,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'passRate' is assigned a value but never used.","line":671,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":671,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'passRate' is assigned a value but never used.","line":671,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":671,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'test' is defined but never used.","line":673,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":673,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'test' is defined but never used.","line":673,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":673,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'overallPassRate' is assigned a value but never used.","line":675,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":675,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'overallPassRate' is assigned a value but never used.","line":675,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":675,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据绑定系统集成测试\n * 验证完整的数据流：组件需求声明 → 数据源 → 转换管道 → 响应式绑定\n */\n\nimport { componentRequirementManager } from './component-requirement-manager'\nimport { DataSourceFactory } from './data-sources'\nimport { DataTransformPipelineFactory } from './data-transform-pipeline'\nimport { ReactiveDataBindingImpl, UpdateTriggerFactory } from './reactive-binding'\nimport type { ComponentDataRequirement } from './types'\n\nexport interface TestResult {\n  testName: string\n  success: boolean\n  message: string\n  data?: any\n  error?: Error\n  duration: number\n}\n\nexport interface TestSuite {\n  name: string\n  tests: TestResult[]\n  totalTests: number\n  passedTests: number\n  failedTests: number\n  totalDuration: number\n}\n\nexport class DataBindingIntegrationTester {\n  private testResults: TestSuite[] = []\n\n  /**\n   * 运行完整的集成测试套件\n   */\n  async runFullTestSuite(): Promise<TestSuite[]> {\n    this.testResults = []\n    // 测试套件1: 基础功能测试\n    await this.runBasicFunctionalityTests()\n\n    // 测试套件2: 数据类型测试\n    await this.runDataTypeTests()\n\n    // 测试套件3: 数据关系测试\n    await this.runDataRelationshipTests()\n\n    // 测试套件4: 响应式更新测试\n    await this.runReactiveUpdateTests()\n\n    // 测试套件5: 错误处理测试\n    await this.runErrorHandlingTests()\n\n    // 输出测试总结\n    this.printTestSummary()\n\n    return this.testResults\n  }\n\n  /**\n   * 基础功能测试套件\n   */\n  private async runBasicFunctionalityTests(): Promise<void> {\n    const testSuite: TestSuite = {\n      name: '基础功能测试',\n      tests: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0\n    }\n\n    // 测试1: 组件需求注册\n    testSuite.tests.push(\n      await this.runTest('组件需求注册', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            temperature: {\n              type: 'value',\n              valueType: 'number',\n              required: true,\n              description: '温度值'\n            },\n            status: {\n              type: 'value',\n              valueType: 'string',\n              required: false,\n              description: '状态信息'\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-component-1', requirement)\n        const retrieved = componentRequirementManager.getRequirement('test-component-1')\n\n        if (!retrieved) {\n          throw new Error('无法获取已注册的组件需求')\n        }\n\n        return { registeredFields: Object.keys(retrieved.fields) }\n      })\n    )\n\n    // 测试2: 静态数据源创建和获取\n    testSuite.tests.push(\n      await this.runTest('静态数据源', async () => {\n        const dataSource = DataSourceFactory.createStaticDataSource('test-static-1', '测试静态数据源', {\n          temperature: 25.5,\n          status: 'normal'\n        })\n\n        const data = await dataSource.fetchData()\n\n        if (!data || data.temperature !== 25.5) {\n          throw new Error('静态数据源返回的数据不正确')\n        }\n\n        return data\n      })\n    )\n\n    // 测试3: 脚本数据源创建和执行\n    testSuite.tests.push(\n      await this.runTest('脚本数据源', async () => {\n        const dataSource = DataSourceFactory.createScriptDataSource(\n          'test-script-1',\n          '测试脚本数据源',\n          'return { temperature: 20 + Math.random() * 10, status: \"active\" };'\n        )\n\n        const data = await dataSource.fetchData()\n\n        if (!data || typeof data.temperature !== 'number' || data.status !== 'active') {\n          throw new Error('脚本数据源返回的数据格式不正确')\n        }\n\n        return data\n      })\n    )\n\n    // 测试4: 数据转换管道\n    testSuite.tests.push(\n      await this.runTest('数据转换管道', async () => {\n        const dataSource = DataSourceFactory.createStaticDataSource('test-pipeline-1', '管道测试数据源', {\n          sensor: { temp: 23.5, online: true },\n          location: 'room-a'\n        })\n\n        const mappingRules = [\n          { sourcePath: 'sensor.temp', targetField: 'temperature', type: 'direct' as const },\n          { sourcePath: 'sensor.online', targetField: 'isOnline', type: 'direct' as const },\n          { sourcePath: 'location', targetField: 'location', type: 'direct' as const }\n        ]\n\n        const pipeline = DataTransformPipelineFactory.create('test-pipeline-1', dataSource, mappingRules)\n\n        if (!pipeline.validate()) {\n          throw new Error('数据转换管道验证失败')\n        }\n\n        const result = await pipeline.execute()\n\n        if (result.temperature !== 23.5 || result.isOnline !== true || result.location !== 'room-a') {\n          throw new Error('数据转换管道输出不正确')\n        }\n\n        return result\n      })\n    )\n\n    this.calculateTestSuiteStats(testSuite)\n    this.testResults.push(testSuite)\n  }\n\n  /**\n   * 数据类型测试套件\n   */\n  private async runDataTypeTests(): Promise<void> {\n    const testSuite: TestSuite = {\n      name: '数据类型测试',\n      tests: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0\n    }\n\n    // 测试1: 基础值类型（number, string, boolean）\n    testSuite.tests.push(\n      await this.runTest('基础值类型', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            temperature: { type: 'value', valueType: 'number', required: true, description: '温度' },\n            deviceName: { type: 'value', valueType: 'string', required: true, description: '设备名称' },\n            isOnline: { type: 'value', valueType: 'boolean', required: true, description: '在线状态' }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-values', requirement)\n\n        const testData = {\n          temperature: 25.6,\n          deviceName: '传感器001',\n          isOnline: true\n        }\n\n        const sampleData = componentRequirementManager.generateSampleData('test-values')\n\n        if (!sampleData || typeof sampleData.temperature !== 'number') {\n          throw new Error('数值类型生成失败')\n        }\n\n        return { original: testData, sample: sampleData }\n      })\n    )\n\n    // 测试2: 对象类型\n    testSuite.tests.push(\n      await this.runTest('对象类型', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            sensorInfo: {\n              type: 'object',\n              required: true,\n              description: '传感器信息',\n              structure: {\n                fields: {\n                  id: { type: 'value', valueType: 'string', required: true, description: 'ID' },\n                  name: { type: 'value', valueType: 'string', required: true, description: '名称' },\n                  location: { type: 'value', valueType: 'string', required: false, description: '位置' }\n                }\n              }\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-object', requirement)\n\n        const dataSource = DataSourceFactory.createStaticDataSource('test-object-data', '对象数据源', {\n          device: {\n            id: 'sensor-001',\n            name: '环境传感器',\n            location: '机房A区'\n          }\n        })\n\n        const mappingRules = [{ sourcePath: 'device', targetField: 'sensorInfo', type: 'direct' as const }]\n\n        const pipeline = DataTransformPipelineFactory.create('test-object-pipeline', dataSource, mappingRules)\n        const result = await pipeline.execute()\n\n        if (!result.sensorInfo || result.sensorInfo.id !== 'sensor-001') {\n          throw new Error('对象类型映射失败')\n        }\n\n        return result\n      })\n    )\n\n    // 测试3: 数组类型\n    testSuite.tests.push(\n      await this.runTest('数组类型', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            readings: {\n              type: 'array',\n              required: true,\n              description: '读数数组',\n              structure: {\n                fields: {\n                  time: { type: 'value', valueType: 'string', required: true, description: '时间' },\n                  value: { type: 'value', valueType: 'number', required: true, description: '数值' }\n                }\n              }\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-array', requirement)\n\n        const dataSource = DataSourceFactory.createStaticDataSource('test-array-data', '数组数据源', {\n          measurements: [\n            { time: '14:00', value: 24.5 },\n            { time: '14:30', value: 25.1 },\n            { time: '15:00', value: 25.6 }\n          ]\n        })\n\n        const mappingRules = [{ sourcePath: 'measurements', targetField: 'readings', type: 'direct' as const }]\n\n        const pipeline = DataTransformPipelineFactory.create('test-array-pipeline', dataSource, mappingRules)\n        const result = await pipeline.execute()\n\n        if (!Array.isArray(result.readings) || result.readings.length !== 3) {\n          throw new Error('数组类型映射失败')\n        }\n\n        return { count: result.readings.length, sample: result.readings[0] }\n      })\n    )\n\n    this.calculateTestSuiteStats(testSuite)\n    this.testResults.push(testSuite)\n  }\n\n  /**\n   * 数据关系测试套件\n   */\n  private async runDataRelationshipTests(): Promise<void> {\n    const testSuite: TestSuite = {\n      name: '数据关系测试',\n      tests: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0\n    }\n\n    // 测试1: 独立关系\n    testSuite.tests.push(\n      await this.runTest('独立关系', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            temperature: { type: 'value', valueType: 'number', required: true, description: '温度' }\n          },\n          relationships: {\n            tempDisplay: {\n              type: 'independent',\n              inputs: ['temperature'],\n              description: '温度显示值'\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-independent', requirement)\n\n        const inputData = { temperature: 25.6 }\n        const result = componentRequirementManager.calculateRelationshipValue(\n          'test-independent',\n          'tempDisplay',\n          inputData\n        )\n\n        if (result !== 25.6) {\n          throw new Error('独立关系计算失败')\n        }\n\n        return { input: inputData, result }\n      })\n    )\n\n    // 测试2: 计算关系\n    testSuite.tests.push(\n      await this.runTest('计算关系', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            temperature: { type: 'value', valueType: 'number', required: true, description: '温度' },\n            humidity: { type: 'value', valueType: 'number', required: true, description: '湿度' }\n          },\n          relationships: {\n            comfortIndex: {\n              type: 'calculated',\n              inputs: ['temperature', 'humidity'],\n              calculator: inputs => {\n                const temp = inputs.temperature || 0\n                const hum = inputs.humidity || 0\n                if (temp >= 20 && temp <= 26 && hum >= 40 && hum <= 70) {\n                  return '舒适'\n                } else {\n                  return '不适'\n                }\n              },\n              description: '舒适度指数'\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-calculated', requirement)\n\n        const inputData = { temperature: 23, humidity: 60 }\n        const result = componentRequirementManager.calculateRelationshipValue(\n          'test-calculated',\n          'comfortIndex',\n          inputData\n        )\n\n        if (result !== '舒适') {\n          throw new Error('计算关系计算失败')\n        }\n\n        return { input: inputData, result }\n      })\n    )\n\n    // 测试3: 派生关系\n    testSuite.tests.push(\n      await this.runTest('派生关系', async () => {\n        const requirement: ComponentDataRequirement = {\n          fields: {\n            isOnline: { type: 'value', valueType: 'boolean', required: true, description: '在线状态' }\n          },\n          relationships: {\n            statusText: {\n              type: 'derived',\n              inputs: ['isOnline'],\n              description: '状态文本'\n            }\n          }\n        }\n\n        componentRequirementManager.registerRequirement('test-derived', requirement)\n\n        const inputData = { isOnline: true }\n        const result = componentRequirementManager.calculateRelationshipValue('test-derived', 'statusText', inputData)\n\n        if (result !== true) {\n          throw new Error('派生关系计算失败')\n        }\n\n        return { input: inputData, result }\n      })\n    )\n\n    this.calculateTestSuiteStats(testSuite)\n    this.testResults.push(testSuite)\n  }\n\n  /**\n   * 响应式更新测试套件\n   */\n  private async runReactiveUpdateTests(): Promise<void> {\n    const testSuite: TestSuite = {\n      name: '响应式更新测试',\n      tests: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0\n    }\n\n    // 测试1: 手动触发器\n    testSuite.tests.push(\n      await this.runTest('手动触发器', async () => {\n        const dataSource = DataSourceFactory.createScriptDataSource(\n          'test-manual-source',\n          '手动触发测试',\n          'return { value: Math.random(), timestamp: Date.now() };'\n        )\n\n        const mappingRules = [\n          { sourcePath: 'value', targetField: 'value', type: 'direct' as const },\n          { sourcePath: 'timestamp', targetField: 'timestamp', type: 'direct' as const }\n        ]\n\n        const pipeline = DataTransformPipelineFactory.create('test-manual-pipeline', dataSource, mappingRules)\n        const trigger = UpdateTriggerFactory.createManualTrigger()\n\n        let updateCount = 0\n        let lastData: any = null\n\n        const binding = new ReactiveDataBindingImpl(\n          'test-manual-binding',\n          'test-component',\n          pipeline,\n          [trigger],\n          newData => {\n            updateCount++\n            lastData = newData\n          }\n        )\n\n        // 启动绑定\n        binding.start()\n\n        // 手动触发更新\n        if ('trigger' in trigger) {\n          ;(trigger as any).trigger()\n          await new Promise(resolve => setTimeout(resolve, 100)) // 等待异步更新\n        }\n\n        // 停止绑定\n        binding.stop()\n\n        if (updateCount === 0 || !lastData) {\n          throw new Error('手动触发器未正常工作')\n        }\n\n        return { updateCount, lastData }\n      })\n    )\n\n    // 测试2: 定时器触发器\n    testSuite.tests.push(\n      await this.runTest('定时器触发器', async () => {\n        const dataSource = DataSourceFactory.createScriptDataSource(\n          'test-timer-source',\n          '定时器测试',\n          'return { counter: Math.floor(Math.random() * 100) };'\n        )\n\n        const mappingRules = [{ sourcePath: 'counter', targetField: 'counter', type: 'direct' as const }]\n\n        const pipeline = DataTransformPipelineFactory.create('test-timer-pipeline', dataSource, mappingRules)\n        const trigger = UpdateTriggerFactory.createTimerTrigger(500, true) // 500ms间隔，立即执行\n\n        let updateCount = 0\n        const updateData: any[] = []\n\n        const binding = new ReactiveDataBindingImpl(\n          'test-timer-binding',\n          'test-component',\n          pipeline,\n          [trigger],\n          newData => {\n            updateCount++\n            updateData.push(newData)\n          }\n        )\n\n        // 启动绑定并等待几次更新\n        binding.start()\n        await new Promise(resolve => setTimeout(resolve, 1200)) // 等待至少2次更新\n        binding.stop()\n\n        if (updateCount < 2) {\n          throw new Error('定时器触发器更新次数不足')\n        }\n\n        return { updateCount, dataCount: updateData.length }\n      })\n    )\n\n    this.calculateTestSuiteStats(testSuite)\n    this.testResults.push(testSuite)\n  }\n\n  /**\n   * 错误处理测试套件\n   */\n  private async runErrorHandlingTests(): Promise<void> {\n    const testSuite: TestSuite = {\n      name: '错误处理测试',\n      tests: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0\n    }\n\n    // 测试1: 无效的组件需求\n    testSuite.tests.push(\n      await this.runTest('无效组件需求处理', async () => {\n        try {\n          const invalidRequirement = {\n            fields: {} // 空字段定义，应该导致验证失败\n          }\n\n          componentRequirementManager.registerRequirement('test-invalid', invalidRequirement as any)\n          throw new Error('应该抛出验证错误')\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('验证失败')) {\n            return { handled: true, error: error.message }\n          }\n          throw error\n        }\n      })\n    )\n\n    // 测试2: 数据源执行错误\n    testSuite.tests.push(\n      await this.runTest('数据源错误处理', async () => {\n        const dataSource = DataSourceFactory.createScriptDataSource(\n          'test-error-source',\n          '错误脚本',\n          'throw new Error(\"脚本执行错误\");'\n        )\n\n        try {\n          await dataSource.fetchData()\n          throw new Error('应该抛出脚本执行错误')\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('脚本执行错误')) {\n            return { handled: true, error: error.message }\n          }\n          throw error\n        }\n      })\n    )\n\n    // 测试3: 映射路径错误\n    testSuite.tests.push(\n      await this.runTest('映射路径错误处理', async () => {\n        const dataSource = DataSourceFactory.createStaticDataSource('test-mapping-error', '映射错误测试', {\n          temperature: 25.5\n        })\n\n        const mappingRules = [\n          { sourcePath: 'nonexistent.path', targetField: 'value', type: 'direct' as const, defaultValue: 'default' }\n        ]\n\n        const pipeline = DataTransformPipelineFactory.create('test-mapping-error-pipeline', dataSource, mappingRules)\n        const result = await pipeline.execute()\n\n        // 应该返回默认值而不是抛出错误\n        if (result.value !== 'default') {\n          throw new Error('映射错误未正确处理')\n        }\n\n        return { result, handled: true }\n      })\n    )\n\n    this.calculateTestSuiteStats(testSuite)\n    this.testResults.push(testSuite)\n  }\n\n  /**\n   * 运行单个测试\n   */\n  private async runTest(testName: string, testFn: () => Promise<any>): Promise<TestResult> {\n    const startTime = Date.now()\n\n    try {\n      const data = await testFn()\n      const duration = Date.now() - startTime\n\n      return {\n        testName,\n        success: true,\n        message: '测试通过',\n        data,\n        duration\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n\n      return {\n        testName,\n        success: false,\n        message: error instanceof Error ? error.message : '未知错误',\n        error: error instanceof Error ? error : new Error(String(error)),\n        duration\n      }\n    }\n  }\n\n  /**\n   * 计算测试套件统计信息\n   */\n  private calculateTestSuiteStats(testSuite: TestSuite): void {\n    testSuite.totalTests = testSuite.tests.length\n    testSuite.passedTests = testSuite.tests.filter(t => t.success).length\n    testSuite.failedTests = testSuite.tests.filter(t => !t.success).length\n    testSuite.totalDuration = testSuite.tests.reduce((sum, t) => sum + t.duration, 0)\n  }\n\n  /**\n   * 打印测试总结\n   */\n  private printTestSummary(): void {\n    let totalTests = 0\n    let totalPassed = 0\n    let totalFailed = 0\n    let totalDuration = 0\n\n    this.testResults.forEach(suite => {\n      totalTests += suite.totalTests\n      totalPassed += suite.passedTests\n      totalFailed += suite.failedTests\n      totalDuration += suite.totalDuration\n\n      const passRate = ((suite.passedTests / suite.totalTests) * 100).toFixed(1)\n      // 显示失败的测试\n      suite.tests.filter(t => !t.success).forEach(test => {})\n    })\n    const overallPassRate = ((totalPassed / totalTests) * 100).toFixed(1)\n  }\n\n  /**\n   * 获取测试结果\n   */\n  getTestResults(): TestSuite[] {\n    return this.testResults\n  }\n\n  /**\n   * 清除测试结果\n   */\n  clearTestResults(): void {\n    this.testResults = []\n  }\n}\n\n// 创建全局测试实例\nexport const dataBindingTester = new DataBindingIntegrationTester()\n\nexport default DataBindingIntegrationTester\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\reactive-binding.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":101,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":101,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":102,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":146,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'newData' is defined but never used.","line":219,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'oldData' is defined but never used.","line":219,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":220,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":220,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'newData' is defined but never used.","line":232,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'oldData' is defined but never used.","line":232,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":233,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":250,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":250,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":250,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":263,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":263,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used.","line":263,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'triggerType' is defined but never used.","line":294,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'triggerType' is defined but never used.","line":294,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":294,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":346,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":346,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":346,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 响应式数据绑定系统\n * 实现数据的响应式更新，支持多种触发机制\n */\n\nimport type {\n  UpdateTrigger,\n  UpdateTriggerType,\n  ReactiveDataBinding,\n  DataTransformPipeline,\n  DataBindingManager,\n  DataBindingConfig\n} from './types'\n\n// ========== 更新触发器实现 ==========\n\n/**\n * 定时器触发器\n */\nexport class TimerTrigger implements UpdateTrigger {\n  type: UpdateTriggerType = 'timer'\n  config: {\n    interval: number // 毫秒\n    immediate?: boolean // 是否立即执行一次\n  }\n\n  private timer: NodeJS.Timeout | null = null\n  private callback: (() => void) | null = null\n\n  constructor(interval: number, immediate = false) {\n    this.config = { interval, immediate }\n  }\n\n  start(callback: () => void): void {\n    // 🔥 性能优化：仅在开发环境输出定时器日志\n\n    this.callback = callback\n\n    // 🔥 性能优化：立即执行一次（如果配置了），避免不必要的setTimeout\n    if (this.config.immediate) {\n      callback()\n    }\n\n    // 启动定时器\n    this.timer = setInterval(callback, this.config.interval)\n  }\n\n  stop(): void {\n    // 🔥 性能优化：仅在开发环境输出定时器日志\n\n    if (this.timer) {\n      clearInterval(this.timer)\n      this.timer = null\n    }\n    this.callback = null\n  }\n\n  isActive(): boolean {\n    return this.timer !== null\n  }\n}\n\n/**\n * WebSocket触发器\n */\nexport class WebSocketTrigger implements UpdateTrigger {\n  type: UpdateTriggerType = 'websocket'\n  config: {\n    url: string\n    protocols?: string[]\n    reconnectInterval?: number\n  }\n\n  private ws: WebSocket | null = null\n  private callback: (() => void) | null = null\n  private reconnectTimer: NodeJS.Timeout | null = null\n\n  constructor(url: string, protocols?: string[], reconnectInterval = 5000) {\n    this.config = { url, protocols, reconnectInterval }\n  }\n\n  start(callback: () => void): void {\n    this.callback = callback\n    this.connect()\n  }\n\n  private connect(): void {\n    try {\n      this.ws = new WebSocket(this.config.url, this.config.protocols)\n\n      this.ws.onmessage = () => {\n        if (this.callback) {\n          this.callback()\n        }\n      }\n\n      this.ws.onclose = () => {\n        this.scheduleReconnect()\n      }\n\n      this.ws.onerror = error => {}\n    } catch (error) {\n      this.scheduleReconnect()\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectTimer) return\n\n    this.reconnectTimer = setTimeout(() => {\n      this.reconnectTimer = null\n      this.connect()\n    }, this.config.reconnectInterval)\n  }\n\n  stop(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n      this.reconnectTimer = null\n    }\n\n    if (this.ws) {\n      this.ws.close()\n      this.ws = null\n    }\n\n    this.callback = null\n  }\n\n  isActive(): boolean {\n    return this.ws !== null && this.ws.readyState === WebSocket.OPEN\n  }\n}\n\n/**\n * 事件触发器\n */\nexport class EventTrigger implements UpdateTrigger {\n  type: UpdateTriggerType = 'event'\n  config: {\n    eventName: string\n    target?: EventTarget\n  }\n\n  private callback: (() => void) | null = null\n  private eventHandler: ((event: Event) => void) | null = null\n\n  constructor(eventName: string, target: EventTarget = window) {\n    this.config = { eventName, target }\n  }\n\n  start(callback: () => void): void {\n    this.callback = callback\n    this.eventHandler = () => {\n      callback()\n    }\n\n    this.config.target?.addEventListener(this.config.eventName, this.eventHandler)\n  }\n\n  stop(): void {\n    if (this.eventHandler) {\n      this.config.target?.removeEventListener(this.config.eventName, this.eventHandler)\n      this.eventHandler = null\n    }\n\n    this.callback = null\n  }\n\n  isActive(): boolean {\n    return this.eventHandler !== null\n  }\n}\n\n/**\n * 手动触发器\n */\nexport class ManualTrigger implements UpdateTrigger {\n  type: UpdateTriggerType = 'manual'\n  config: any = {}\n\n  private callback: (() => void) | null = null\n  private active = false\n\n  start(callback: () => void): void {\n    // 🔥 性能优化：仅在开发环境输出手动触发器日志\n    this.callback = callback\n    this.active = true\n  }\n\n  stop(): void {\n    // 🔥 性能优化：仅在开发环境输出手动触发器日志\n    this.callback = null\n    this.active = false\n  }\n\n  isActive(): boolean {\n    return this.active\n  }\n\n  /**\n   * 手动触发更新\n   */\n  trigger(): void {\n    if (this.callback && this.active) {\n      // 🔥 性能优化：仅在开发环境输出手动触发日志\n      this.callback()\n    }\n  }\n}\n\n// ========== 响应式数据绑定实现 ==========\n\nexport class ReactiveDataBindingImpl implements ReactiveDataBinding {\n  id: string\n  componentId: string\n  pipeline: DataTransformPipeline\n  triggers: UpdateTrigger[]\n  onDataChange: (newData: any, oldData?: any) => void\n  onError?: (error: Error) => void\n\n  private currentData: any = null\n  private active = false\n  private updateCount = 0\n  private lastUpdateTime: Date | null = null\n\n  constructor(\n    id: string,\n    componentId: string,\n    pipeline: DataTransformPipeline,\n    triggers: UpdateTrigger[],\n    onDataChange: (newData: any, oldData?: any) => void,\n    onError?: (error: Error) => void\n  ) {\n    this.id = id\n    this.componentId = componentId\n    this.pipeline = pipeline\n    this.triggers = triggers\n    this.onDataChange = onDataChange\n    this.onError = onError\n  }\n\n  start(): void {\n    if (this.active) {\n      return\n    }\n    this.active = true\n\n    // 启动所有触发器\n    this.triggers.forEach((trigger, index) => {\n      trigger.start(() => this.handleTrigger(trigger))\n    })\n  }\n\n  stop(): void {\n    if (!this.active) {\n      return\n    }\n\n    this.active = false\n\n    // 停止所有触发器\n    this.triggers.forEach((trigger, index) => {\n      trigger.stop()\n    })\n  }\n\n  async refresh(): Promise<void> {\n    if (!this.active) {\n      return\n    }\n    await this.updateData('manual')\n  }\n\n  getCurrentData(): any {\n    return this.currentData\n  }\n\n  isActive(): boolean {\n    return this.active\n  }\n\n  /**\n   * 处理触发器事件\n   */\n  private async handleTrigger(trigger: UpdateTrigger): Promise<void> {\n    if (!this.active) return\n    await this.updateData(trigger.type)\n  }\n\n  /**\n   * 更新数据\n   */\n  private async updateData(triggerType: string): Promise<void> {\n    try {\n      const oldData = this.currentData\n      const newData = await this.pipeline.execute()\n\n      this.updateCount++\n      this.lastUpdateTime = new Date()\n\n      // 检查数据是否发生变化\n      const dataChanged = JSON.stringify(oldData) !== JSON.stringify(newData)\n\n      if (dataChanged) {\n        this.currentData = newData\n        this.onDataChange(newData, oldData)\n      }\n    } catch (error) {\n      if (this.onError) {\n        this.onError(error as Error)\n      }\n    }\n  }\n\n  /**\n   * 获取绑定统计信息\n   */\n  getStats(): {\n    id: string\n    componentId: string\n    active: boolean\n    updateCount: number\n    lastUpdateTime: Date | null\n    triggerCount: number\n    activeTriggers: number\n  } {\n    return {\n      id: this.id,\n      componentId: this.componentId,\n      active: this.active,\n      updateCount: this.updateCount,\n      lastUpdateTime: this.lastUpdateTime,\n      triggerCount: this.triggers.length,\n      activeTriggers: this.triggers.filter(t => t.isActive()).length\n    }\n  }\n}\n\n// ========== 数据绑定管理器实现 ==========\n\nexport class DataBindingManagerImpl implements DataBindingManager {\n  private bindings = new Map<string, ReactiveDataBinding>()\n  private componentBindings = new Map<string, Set<string>>()\n\n  createBinding(config: DataBindingConfig): ReactiveDataBinding {\n    // 这里需要根据配置创建完整的管道和触发器\n    // 在实际实现中，这会是一个复杂的工厂方法\n    // 为了简化，我们先返回一个基础的绑定\n\n    throw new Error('createBinding需要在具体使用时实现，需要完整的管道配置')\n  }\n\n  getBinding(id: string): ReactiveDataBinding | null {\n    return this.bindings.get(id) || null\n  }\n\n  removeBinding(id: string): void {\n    const binding = this.bindings.get(id)\n    if (binding) {\n      // 停止绑定\n      if (binding.isActive()) {\n        binding.stop()\n      }\n\n      // 从映射中移除\n      this.bindings.delete(id)\n\n      // 从组件绑定映射中移除\n      const componentBindingSet = this.componentBindings.get(binding.componentId)\n      if (componentBindingSet) {\n        componentBindingSet.delete(id)\n        if (componentBindingSet.size === 0) {\n          this.componentBindings.delete(binding.componentId)\n        }\n      }\n    }\n  }\n\n  getComponentBindings(componentId: string): ReactiveDataBinding[] {\n    const bindingIds = this.componentBindings.get(componentId)\n    if (!bindingIds) return []\n\n    const bindings: ReactiveDataBinding[] = []\n    bindingIds.forEach(bindingId => {\n      const binding = this.bindings.get(bindingId)\n      if (binding) {\n        bindings.push(binding)\n      }\n    })\n\n    return bindings\n  }\n\n  getActiveBindings(): ReactiveDataBinding[] {\n    const activeBindings: ReactiveDataBinding[] = []\n    this.bindings.forEach(binding => {\n      if (binding.isActive()) {\n        activeBindings.push(binding)\n      }\n    })\n    return activeBindings\n  }\n\n  cleanup(): void {\n    // 停止所有活跃的绑定\n    this.bindings.forEach(binding => {\n      if (binding.isActive()) {\n        binding.stop()\n      }\n    })\n\n    // 清空所有映射\n    this.bindings.clear()\n    this.componentBindings.clear()\n  }\n\n  /**\n   * 注册数据绑定（用于手动创建的绑定）\n   */\n  registerBinding(binding: ReactiveDataBinding): void {\n    this.bindings.set(binding.id, binding)\n\n    // 更新组件绑定映射\n    if (!this.componentBindings.has(binding.componentId)) {\n      this.componentBindings.set(binding.componentId, new Set())\n    }\n    this.componentBindings.get(binding.componentId)!.add(binding.id)\n  }\n\n  /**\n   * 获取管理器统计信息\n   */\n  getStats(): {\n    totalBindings: number\n    activeBindings: number\n    componentCount: number\n    bindingsByComponent: Record<string, number>\n  } {\n    const stats = {\n      totalBindings: this.bindings.size,\n      activeBindings: this.getActiveBindings().length,\n      componentCount: this.componentBindings.size,\n      bindingsByComponent: {} as Record<string, number>\n    }\n\n    this.componentBindings.forEach((bindingIds, componentId) => {\n      stats.bindingsByComponent[componentId] = bindingIds.size\n    })\n\n    return stats\n  }\n}\n\n// ========== 触发器工厂 ==========\n\nexport class UpdateTriggerFactory {\n  /**\n   * 创建定时器触发器\n   */\n  static createTimerTrigger(interval: number, immediate = false): TimerTrigger {\n    return new TimerTrigger(interval, immediate)\n  }\n\n  /**\n   * 创建WebSocket触发器\n   */\n  static createWebSocketTrigger(url: string, protocols?: string[]): WebSocketTrigger {\n    return new WebSocketTrigger(url, protocols)\n  }\n\n  /**\n   * 创建事件触发器\n   */\n  static createEventTrigger(eventName: string, target?: EventTarget): EventTrigger {\n    return new EventTrigger(eventName, target)\n  }\n\n  /**\n   * 创建手动触发器\n   */\n  static createManualTrigger(): ManualTrigger {\n    return new ManualTrigger()\n  }\n\n  /**\n   * 根据配置创建触发器\n   */\n  static createFromConfig(config: any): UpdateTrigger {\n    switch (config.type) {\n      case 'timer':\n        return new TimerTrigger(config.interval, config.immediate)\n\n      case 'websocket':\n        return new WebSocketTrigger(config.url, config.protocols)\n\n      case 'event':\n        return new EventTrigger(config.eventName, config.target)\n\n      case 'manual':\n        return new ManualTrigger()\n\n      default:\n        throw new Error(`不支持的触发器类型: ${config.type}`)\n    }\n  }\n}\n\n// 创建全局实例\nexport const dataBindingManager = new DataBindingManagerImpl()\n\nexport default {\n  ReactiveDataBindingImpl,\n  DataBindingManagerImpl,\n  UpdateTriggerFactory,\n  TimerTrigger,\n  WebSocketTrigger,\n  EventTrigger,\n  ManualTrigger,\n  dataBindingManager\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-binding\\types.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":79,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'inputs' is defined but never used.","line":98,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":98,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":195,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'input' is defined but never used.","line":214,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":237,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":237,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":240,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":240,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'sourceData' is defined but never used.","line":254,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":254,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'sourceData' is defined but never used.","line":260,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":260,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":313,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'requirement' is defined but never used.","line":313,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":60},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":316,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":316,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'fieldRequirement' is defined but never used.","line":316,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":316,"endColumn":67},{"ruleId":"no-unused-vars","severity":1,"message":"'callback' is defined but never used.","line":337,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":337,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'newData' is defined but never used.","line":363,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":363,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'oldData' is defined but never used.","line":363,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":363,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":366,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":391,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":391,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":394,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":394,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":397,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":400,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":400,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 重新设计的数据绑定系统类型定义\n * 专注于解决组件数据需求声明和外部数据绑定的核心问题\n */\n\n// ========== 组件数据需求声明 ==========\n\n/**\n * 数据字段类型定义\n * 扩展支持更多类型以兼容新的数据需求系统\n */\nexport type DataFieldType = 'value' | 'object' | 'array' | 'string' | 'number' | 'boolean' | 'date'\nexport type ValueDataType = 'number' | 'string' | 'boolean' | 'date' | 'any'\n\n/**\n * 数据字段需求定义\n * 扩展接口以支持更丰富的字段定义\n */\nexport interface DataFieldRequirement {\n  /** 字段名称 */\n  name: string\n\n  /** 字段标签 */\n  label: string\n\n  /** 数据字段类型 */\n  type: DataFieldType\n\n  /** 当type为'value'时的具体值类型 */\n  valueType?: ValueDataType\n\n  /** 当type为'object'或'array'时的嵌套结构 */\n  structure?: ComponentDataRequirement\n\n  /** 是否必填 */\n  required: boolean\n\n  /** 字段描述 */\n  description: string\n\n  /** 默认值 */\n  defaultValue?: any\n\n  /** 数据示例 */\n  example?: any\n\n  /** 验证规则 */\n  validation?: DataValidationRule\n\n  /** 枚举选项（用于下拉选择等） */\n  enum?: Array<{ label: string; value: any; description?: string }>\n\n  /** 数组项模式（当 type 为 'array' 时） */\n  itemSchema?: any\n\n  /** 字段标签 */\n  tags?: string[]\n\n  /** 字段分组 */\n  group?: string\n\n  /** 扩展元数据 */\n  metadata?: Record<string, any>\n}\n\n/**\n * 数据验证规则\n */\nexport interface DataValidationRule {\n  /** 最小值/最小长度 */\n  min?: number\n  /** 最大值/最大长度 */\n  max?: number\n  /** 正则表达式验证 */\n  pattern?: string\n  /** 枚举值限制 */\n  enum?: any[]\n  /** 自定义验证函数 */\n  custom?: (value: any) => boolean | string\n}\n\n/**\n * 数据关系类型\n */\nexport type DataRelationType = 'independent' | 'calculated' | 'derived'\n\n/**\n * 数据关系定义\n */\nexport interface DataRelationship {\n  /** 关系类型 */\n  type: DataRelationType\n\n  /** 依赖的输入字段 */\n  inputs: string[]\n\n  /** 计算函数 */\n  calculator?: (inputs: Record<string, any>) => any\n\n  /** 关系描述 */\n  description?: string\n\n  /** 实时计算（输入变化时立即重算） */\n  realtime?: boolean\n}\n\n/**\n * 组件数据需求完整定义\n * 扩展以支持更丰富的组件定义\n */\nexport interface ComponentDataRequirement {\n  /** 组件类型 */\n  componentType: string\n\n  /** 组件显示名称 */\n  displayName: string\n\n  /** 组件描述 */\n  description: string\n\n  /** 组件分类 */\n  category?: string\n\n  /** 需求版本（用于兼容性） */\n  version?: string\n\n  /** 主要数据字段 */\n  primaryData: DataFieldRequirement\n\n  /** 数据字段需求列表 */\n  dataFields: DataFieldRequirement[]\n\n  /** 数据关系定义 */\n  relationships?: DataRelationship[]\n\n  /** 数据更新配置 */\n  updateConfig?: {\n    supportedTriggers: string[]\n    recommendedInterval?: number\n    minInterval?: number\n    validation?: any\n  }\n\n  /** 使用场景 */\n  useCases?: Array<{\n    name: string\n    description: string\n    exampleData: Record<string, any>\n  }>\n\n  /** 组件标签 */\n  tags?: string[]\n\n  /** 扩展元数据 */\n  metadata?: Record<string, any>\n\n  // 保持向后兼容\n  /** @deprecated 使用 dataFields 替代 */\n  fields?: Record<string, DataFieldRequirement>\n}\n\n// ========== 数据源定义 ==========\n\n/**\n * 数据源类型\n */\nexport type DataSourceType = 'static' | 'api' | 'websocket' | 'script' | 'database'\n\n/**\n * 基础数据源接口\n */\nexport interface DataSource {\n  /** 数据源唯一ID */\n  id: string\n\n  /** 数据源类型 */\n  type: DataSourceType\n\n  /** 数据源名称 */\n  name: string\n\n  /** 数据源描述 */\n  description?: string\n\n  /** 获取数据 */\n  fetchData(): Promise<any>\n\n  /** 验证数据源配置 */\n  validateConfig(): boolean\n\n  /** 获取数据源配置 */\n  getConfig(): any\n\n  /** 更新数据源配置 */\n  updateConfig(config: any): void\n}\n\n// ========== 数据处理管道 ==========\n\n/**\n * 数据处理器接口\n */\nexport interface DataProcessor {\n  /** 处理器ID */\n  id: string\n\n  /** 处理器名称 */\n  name: string\n\n  /** 处理器类型 */\n  type: 'script' | 'format' | 'filter' | 'transform' | 'validate'\n\n  /** 处理数据 */\n  process(input: any): Promise<any>\n\n  /** 处理器配置 */\n  config?: any\n\n  /** 验证处理器配置 */\n  validateConfig?(): boolean\n}\n\n/**\n * 数据映射规则\n */\nexport interface DataMappingRule {\n  /** 源数据路径 */\n  sourcePath: string\n\n  /** 目标字段名 */\n  targetField: string\n\n  /** 映射类型 */\n  type: 'direct' | 'calculated' | 'conditional'\n\n  /** 转换函数（当type为'calculated'时） */\n  transformer?: (value: any) => any\n\n  /** 条件判断（当type为'conditional'时） */\n  condition?: (value: any) => boolean\n\n  /** 默认值 */\n  defaultValue?: any\n}\n\n/**\n * 数据映射器\n */\nexport interface DataMapper {\n  /** 映射规则 */\n  rules: DataMappingRule[]\n\n  /** 执行映射 */\n  map(sourceData: any): Record<string, any>\n\n  /** 验证映射规则 */\n  validateRules(): boolean\n\n  /** 预览映射结果 */\n  preview(sourceData: any): Record<string, any>\n}\n\n/**\n * 完整的数据转换管道\n */\nexport interface DataTransformPipeline {\n  /** 管道ID */\n  id: string\n\n  /** 数据源 */\n  source: DataSource\n\n  /** 处理器链 */\n  processors: DataProcessor[]\n\n  /** 数据映射器 */\n  mapper: DataMapper\n\n  /** 数据验证器 */\n  validator?: DataValidator\n\n  /** 执行完整的转换流程 */\n  execute(): Promise<Record<string, any>>\n\n  /** 验证管道配置 */\n  validate(): boolean\n}\n\n// ========== 数据验证 ==========\n\n/**\n * 数据验证结果\n */\nexport interface DataValidationResult {\n  /** 是否验证通过 */\n  valid: boolean\n\n  /** 错误信息 */\n  errors: string[]\n\n  /** 警告信息 */\n  warnings: string[]\n\n  /** 验证详情 */\n  details: Record<string, any>\n}\n\n/**\n * 数据验证器\n */\nexport interface DataValidator {\n  /** 验证数据是否符合组件需求 */\n  validate(data: any, requirement: ComponentDataRequirement): DataValidationResult\n\n  /** 验证单个字段 */\n  validateField(value: any, fieldRequirement: DataFieldRequirement): DataValidationResult\n}\n\n// ========== 响应式更新机制 ==========\n\n/**\n * 更新触发器类型\n */\nexport type UpdateTriggerType = 'timer' | 'websocket' | 'mqtt' | 'event' | 'manual'\n\n/**\n * 更新触发器\n */\nexport interface UpdateTrigger {\n  /** 触发器类型 */\n  type: UpdateTriggerType\n\n  /** 触发器配置 */\n  config: any\n\n  /** 启动触发器 */\n  start(callback: () => void): void\n\n  /** 停止触发器 */\n  stop(): void\n\n  /** 触发器状态 */\n  isActive(): boolean\n}\n\n/**\n * 响应式数据绑定\n */\nexport interface ReactiveDataBinding {\n  /** 绑定ID */\n  id: string\n\n  /** 组件ID */\n  componentId: string\n\n  /** 数据转换管道 */\n  pipeline: DataTransformPipeline\n\n  /** 更新触发器 */\n  triggers: UpdateTrigger[]\n\n  /** 数据变化回调 */\n  onDataChange: (newData: any, oldData?: any) => void\n\n  /** 错误处理回调 */\n  onError?: (error: Error) => void\n\n  /** 启动数据绑定 */\n  start(): void\n\n  /** 停止数据绑定 */\n  stop(): void\n\n  /** 手动触发数据更新 */\n  refresh(): Promise<void>\n\n  /** 获取当前数据 */\n  getCurrentData(): any\n\n  /** 绑定状态 */\n  isActive(): boolean\n}\n\n// ========== 数据绑定管理器 ==========\n\n/**\n * 数据绑定管理器\n */\nexport interface DataBindingManager {\n  /** 创建数据绑定 */\n  createBinding(config: DataBindingConfig): ReactiveDataBinding\n\n  /** 获取绑定 */\n  getBinding(id: string): ReactiveDataBinding | null\n\n  /** 移除绑定 */\n  removeBinding(id: string): void\n\n  /** 获取组件的所有绑定 */\n  getComponentBindings(componentId: string): ReactiveDataBinding[]\n\n  /** 获取所有活跃的绑定 */\n  getActiveBindings(): ReactiveDataBinding[]\n\n  /** 清理所有绑定 */\n  cleanup(): void\n}\n\n/**\n * 数据绑定配置\n */\nexport interface DataBindingConfig {\n  /** 绑定ID */\n  id: string\n\n  /** 组件ID */\n  componentId: string\n\n  /** 组件数据需求 */\n  requirement: ComponentDataRequirement\n\n  /** 数据转换管道配置 */\n  pipelineConfig: {\n    source: DataSourceConfig\n    processors?: DataProcessorConfig[]\n    mappingRules: DataMappingRule[]\n  }\n\n  /** 更新触发器配置 */\n  triggerConfigs: UpdateTriggerConfig[]\n\n  /** 是否自动启动 */\n  autoStart?: boolean\n}\n\n/**\n * 数据源配置\n */\nexport interface DataSourceConfig {\n  type: DataSourceType\n  config: any\n}\n\n/**\n * 数据处理器配置\n */\nexport interface DataProcessorConfig {\n  type: string\n  config: any\n}\n\n/**\n * 更新触发器配置\n */\nexport interface UpdateTriggerConfig {\n  type: UpdateTriggerType\n  config: any\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source-center.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'callback' is defined but never used.","line":24,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":24,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":27,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":30,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":42,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":57},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":49,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":69,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":91,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":91,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":91,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1893,1893],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":102,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":102,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":105,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":105,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":105,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2186,2186],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":123,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":131,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":140,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":140,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":143,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":143,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":143,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2898,2898],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据源中心\n * 负责数据源的注册、管理和服务提供\n * 实现配置驱动的动态数据源重构方案的核心组件\n */\n\nimport type { DataSourceInfo } from './types'\n\nexport interface DataSourceSubscription {\n  /** 取消订阅的方法 */\n  unsubscribe: () => void\n  /** 订阅ID */\n  id: string\n}\n\nexport interface DataSourceService {\n  /** 获取数据源信息 */\n  getInfo(): DataSourceInfo\n\n  /** 获取当前数据 */\n  getCurrentData(): Promise<any>\n\n  /** 订阅数据变化 */\n  subscribe(callback: (data: any) => void): DataSourceSubscription\n\n  /** 验证数据源配置 */\n  validateConfig(config: any): { valid: boolean; errors: string[] }\n\n  /** 更新数据源配置 */\n  updateConfig(config: any): void\n\n  /** 销毁数据源 */\n  destroy(): void\n}\n\n/**\n * 数据源中心管理器\n * 实现数据源的统一注册、发现和服务提供\n */\nexport class DataSourceCenter {\n  private dataSources = new Map<string, DataSourceService>()\n  private dataSourceTypes = new Map<string, new (...args: any[]) => DataSourceService>()\n\n  /**\n   * 注册数据源类型\n   * @param type 数据源类型名称\n   * @param serviceClass 数据源服务类\n   */\n  registerDataSourceType(type: string, serviceClass: new (...args: any[]) => DataSourceService) {\n    this.dataSourceTypes.set(type, serviceClass)\n  }\n\n  /**\n   * 创建数据源实例\n   * @param id 数据源ID\n   * @param type 数据源类型\n   * @param config 数据源配置\n   */\n  createDataSource(id: string, type: string, config: any): DataSourceService | null {\n    const ServiceClass = this.dataSourceTypes.get(type)\n    if (!ServiceClass) {\n      return null\n    }\n\n    try {\n      const service = new ServiceClass(id, config)\n      this.dataSources.set(id, service)\n      return service\n    } catch (error) {\n      return null\n    }\n  }\n\n  /**\n   * 获取数据源服务\n   * @param id 数据源ID\n   */\n  getDataSource(id: string): DataSourceService | null {\n    return this.dataSources.get(id) || null\n  }\n\n  /**\n   * 移除数据源\n   * @param id 数据源ID\n   */\n  removeDataSource(id: string): void {\n    const service = this.dataSources.get(id)\n    if (service) {\n      try {\n        service.destroy()\n      } catch (error) {}\n      this.dataSources.delete(id)\n    }\n  }\n\n  /**\n   * 获取所有数据源信息\n   */\n  getAllDataSources(): DataSourceInfo[] {\n    const result: DataSourceInfo[] = []\n\n    for (const [id, service] of this.dataSources.entries()) {\n      try {\n        result.push(service.getInfo())\n      } catch (error) {}\n    }\n\n    return result\n  }\n\n  /**\n   * 获取支持的数据源类型\n   */\n  getSupportedTypes(): string[] {\n    return Array.from(this.dataSourceTypes.keys())\n  }\n\n  /**\n   * 订阅数据源变化\n   * @param dataSourceId 数据源ID\n   * @param callback 数据变化回调\n   */\n  subscribeToDataSource(dataSourceId: string, callback: (data: any) => void): DataSourceSubscription | null {\n    const service = this.getDataSource(dataSourceId)\n    if (!service) {\n      return null\n    }\n\n    try {\n      return service.subscribe(callback)\n    } catch (error) {\n      return null\n    }\n  }\n\n  /**\n   * 清理所有数据源\n   */\n  cleanup(): void {\n    for (const [id, service] of this.dataSources.entries()) {\n      try {\n        service.destroy()\n      } catch (error) {}\n    }\n\n    this.dataSources.clear()\n  }\n\n  /**\n   * 验证数据源配置\n   * @param type 数据源类型\n   * @param config 配置信息\n   */\n  validateDataSourceConfig(type: string, config: any): { valid: boolean; errors: string[] } {\n    const ServiceClass = this.dataSourceTypes.get(type)\n    if (!ServiceClass) {\n      return {\n        valid: false,\n        errors: [`未知的数据源类型: ${type}`]\n      }\n    }\n\n    try {\n      // 创建临时实例进行验证\n      const tempService = new ServiceClass('temp', config)\n      const result = tempService.validateConfig(config)\n      tempService.destroy()\n      return result\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [`数据源配置验证失败: ${error.message}`]\n      }\n    }\n  }\n}\n\n// 导出单例\nexport const dataSourceCenter = new DataSourceCenter()\nexport default dataSourceCenter\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source-mapper.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":273,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":273,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'executorData' is defined but never used.","line":273,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":273,"endColumn":86},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":274,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":274,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'staticParams' is defined but never used.","line":274,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":274,"endColumn":94},{"ruleId":"no-unused-vars","severity":1,"message":"'componentType' is defined but never used.","line":276,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":276,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'mappingResult' is defined but never used.","line":277,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":277,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 数据源映射器\n * 提供通用的数据源映射和转换服务，消除硬编码依赖\n */\n\nimport { ComponentRegistry } from './component-registry'\nimport type { ComponentDefinition } from './types'\n\n/**\n * 执行器数据格式\n */\nexport interface ExecutorData {\n  [key: string]: any\n  main?: {\n    [dataSourceKey: string]: any\n  }\n}\n\n/**\n * 数据源映射结果\n */\nexport interface DataSourceMappingResult {\n  [propName: string]: any\n}\n\n/**\n * 数据源映射器类\n * 负责将执行器数据转换为组件所需的 props\n */\nexport class DataSourceMapper {\n  /**\n   * 映射组件数据源\n   * @param componentType 组件类型\n   * @param executorData 执行器数据\n   * @returns 映射后的组件 props\n   */\n  static mapDataSources(componentType: string, executorData: ExecutorData | null | undefined): DataSourceMappingResult {\n    // 获取组件定义\n    const definition = ComponentRegistry.get(componentType)\n    if (!definition) {\n      return {}\n    }\n\n    // 获取组件的数据源配置\n    const dataSourceKeys = ComponentRegistry.getDataSourceKeys(componentType)\n    if (dataSourceKeys.length === 0) {\n      return {}\n    }\n\n    // 如果没有执行器数据，返回空值映射\n    if (!executorData) {\n      return this.createNullMapping(dataSourceKeys)\n    }\n\n    // 执行数据源映射\n    const mappingResult = this.performMapping(dataSourceKeys, executorData)\n    return mappingResult\n  }\n\n  /**\n   * 创建空值映射\n   * @param dataSourceKeys 数据源键列表\n   * @returns 空值映射对象\n   */\n  private static createNullMapping(dataSourceKeys: string[]): DataSourceMappingResult {\n    const nullMapping: DataSourceMappingResult = {}\n\n    dataSourceKeys.forEach(key => {\n      nullMapping[key] = null\n    })\n    return nullMapping\n  }\n\n  /**\n   * 执行数据源映射\n   * @param dataSourceKeys 数据源键列表\n   * @param executorData 执行器数据\n   * @returns 映射结果\n   */\n  private static performMapping(dataSourceKeys: string[], executorData: ExecutorData): DataSourceMappingResult {\n    const result: DataSourceMappingResult = {}\n\n    // 策略1: 优先从 main 字段中提取数据\n    if (executorData.main && typeof executorData.main === 'object') {\n      dataSourceKeys.forEach(key => {\n        if (key in executorData.main!) {\n          result[key] = executorData.main![key]\n        } else {\n          result[key] = null\n        }\n      })\n\n      return result\n    }\n\n    // 策略2: 直接从 executorData 根级别提取数据\n    dataSourceKeys.forEach(key => {\n      if (key in executorData) {\n        result[key] = executorData[key]\n      } else {\n        result[key] = null\n      }\n    })\n\n    // 🔥 策略3: 处理多数据项合并场景（已被执行器合并后的数据）\n    // 现在执行器应该已经完成了合并，检查是否有合并后的数据\n    const hasAnyValidData = dataSourceKeys.some(key => key in executorData && executorData[key] !== null)\n\n    if (hasAnyValidData) {\n      return result // 使用策略2的结果\n    }\n\n    return result\n  }\n\n  /**\n   * 映射静态参数\n   * @param componentType 组件类型\n   * @param staticParams 静态参数对象\n   * @returns 映射后的静态参数\n   */\n  static mapStaticParams(\n    componentType: string,\n    staticParams: Record<string, any> | null | undefined\n  ): Record<string, any> {\n    // 获取组件定义\n    const definition = ComponentRegistry.get(componentType)\n    if (!definition) {\n      return {}\n    }\n\n    // 获取组件的静态参数配置\n    const staticParamKeys = ComponentRegistry.getStaticParamKeys(componentType)\n    if (staticParamKeys.length === 0) {\n      return {}\n    }\n\n    // 如果没有静态参数，返回默认值\n    if (!staticParams) {\n      return this.getDefaultStaticParams(definition, staticParamKeys)\n    }\n\n    // 过滤和映射静态参数\n    const result: Record<string, any> = {}\n    staticParamKeys.forEach(key => {\n      if (key in staticParams) {\n        result[key] = staticParams[key]\n      } else {\n        // 使用默认值\n        const defaultValue = this.getDefaultStaticParamValue(definition, key)\n        result[key] = defaultValue\n      }\n    })\n    return result\n  }\n\n  /**\n   * 获取默认静态参数\n   * @param definition 组件定义\n   * @param staticParamKeys 静态参数键列表\n   * @returns 默认静态参数对象\n   */\n  private static getDefaultStaticParams(\n    definition: ComponentDefinition,\n    staticParamKeys: string[]\n  ): Record<string, any> {\n    const defaults: Record<string, any> = {}\n\n    staticParamKeys.forEach(key => {\n      defaults[key] = this.getDefaultStaticParamValue(definition, key)\n    })\n\n    return defaults\n  }\n\n  /**\n   * 获取默认静态参数值\n   * @param definition 组件定义\n   * @param key 参数键\n   * @returns 默认值\n   */\n  private static getDefaultStaticParamValue(definition: ComponentDefinition, key: string): any {\n    // 从组件定义的默认配置中获取\n    if (definition?.defaultConfig?.staticParams?.[key] !== undefined) {\n      return definition.defaultConfig.staticParams[key]\n    }\n\n    // 从静态参数定义中获取默认值\n    if (definition.staticParams?.[key]?.default !== undefined) {\n      return definition.staticParams[key].default\n    }\n\n    // 根据类型返回合适的默认值\n    const paramType = definition.staticParams?.[key]?.type\n    switch (paramType) {\n      case 'string':\n        return ''\n      case 'number':\n        return 0\n      case 'boolean':\n        return false\n      case 'array':\n        return []\n      case 'object':\n        return {}\n      default:\n        return null\n    }\n  }\n\n  /**\n   * 验证数据源映射结果\n   * @param componentType 组件类型\n   * @param mappingResult 映射结果\n   * @returns 验证结果\n   */\n  static validateMapping(\n    componentType: string,\n    mappingResult: DataSourceMappingResult\n  ): {\n    isValid: boolean\n    missingKeys: string[]\n    extraKeys: string[]\n  } {\n    const expectedKeys = ComponentRegistry.getDataSourceKeys(componentType)\n    const actualKeys = Object.keys(mappingResult)\n\n    const missingKeys = expectedKeys.filter(key => !(key in mappingResult))\n    const extraKeys = actualKeys.filter(key => !expectedKeys.includes(key))\n\n    const isValid = missingKeys.length === 0\n    return { isValid, missingKeys, extraKeys }\n  }\n\n  /**\n   * 获取映射统计信息\n   * @param componentType 组件类型\n   * @param executorData 执行器数据\n   * @returns 统计信息\n   */\n  static getMappingStats(\n    componentType: string,\n    executorData: ExecutorData | null | undefined\n  ): {\n    componentType: string\n    isRegistered: boolean\n    dataSourceCount: number\n    staticParamCount: number\n    hasExecutorData: boolean\n    executorDataKeys: string[]\n  } {\n    const isRegistered = ComponentRegistry.has(componentType)\n    const dataSourceCount = ComponentRegistry.getDataSourceKeys(componentType).length\n    const staticParamCount = ComponentRegistry.getStaticParamKeys(componentType).length\n    const hasExecutorData = !!executorData\n    const executorDataKeys = executorData ? Object.keys(executorData) : []\n\n    return {\n      componentType,\n      isRegistered,\n      dataSourceCount,\n      staticParamCount,\n      hasExecutorData,\n      executorDataKeys\n    }\n  }\n}\n\n/**\n * 数据源映射器接口（用于依赖注入等场景）\n */\nexport interface IDataSourceMapper {\n  mapDataSources(componentType: string, executorData: ExecutorData | null | undefined): DataSourceMappingResult\n  mapStaticParams(componentType: string, staticParams: Record<string, any> | null | undefined): Record<string, any>\n  validateMapping(\n    componentType: string,\n    mappingResult: DataSourceMappingResult\n  ): {\n    isValid: boolean\n    missingKeys: string[]\n    extraKeys: string[]\n  }\n}\n\n/**\n * 默认数据源映射器实例\n */\nexport const dataSourceMapper: IDataSourceMapper = DataSourceMapper\n\n// 导出类型\nexport type { ExecutorData, DataSourceMappingResult }\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source\\component-schema.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":30,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 组件数据需求声明系统\n * 定义组件如何声明其数据需求\n */\n\nexport interface ComponentDataField {\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array'\n  required: boolean\n  description: string\n  defaultValue?: any\n  validation?: {\n    min?: number\n    max?: number\n    pattern?: string\n    enum?: any[]\n  }\n  examples?: any[]\n}\n\nexport interface ComponentDataSchema {\n  [fieldName: string]: ComponentDataField\n}\n\nexport interface ComponentDataRequirement {\n  componentId: string\n  schema: ComponentDataSchema\n  // 组件自己声明的数据需求\n  getDataRequirements(): ComponentDataSchema\n  // 验证数据是否满足需求\n  validateData(data: any): ComponentDataValidationResult\n}\n\nexport interface ComponentDataValidationResult {\n  isValid: boolean\n  errors: Array<{\n    field: string\n    message: string\n    type: 'missing' | 'type-mismatch' | 'validation-failed'\n  }>\n  warnings: Array<{\n    field: string\n    message: string\n  }>\n}\n\n/**\n * 组件数据需求管理器\n */\nexport class ComponentSchemaManager {\n  private schemas = new Map<string, ComponentDataSchema>()\n\n  /**\n   * 注册组件数据需求\n   */\n  registerSchema(componentId: string, schema: ComponentDataSchema) {\n    this.schemas.set(componentId, schema)\n  }\n\n  /**\n   * 获取组件数据需求\n   */\n  getSchema(componentId: string): ComponentDataSchema | undefined {\n    return this.schemas.get(componentId)\n  }\n\n  /**\n   * 验证数据是否满足组件需求\n   */\n  validateComponentData(componentId: string, data: any): ComponentDataValidationResult {\n    const schema = this.schemas.get(componentId)\n    if (!schema) {\n      return {\n        isValid: false,\n        errors: [{ field: 'schema', message: `组件 ${componentId} 没有注册数据需求`, type: 'missing' }],\n        warnings: []\n      }\n    }\n\n    return this.validateDataAgainstSchema(data, schema)\n  }\n\n  /**\n   * 根据schema验证数据\n   */\n  private validateDataAgainstSchema(data: any, schema: ComponentDataSchema): ComponentDataValidationResult {\n    const errors: ComponentDataValidationResult['errors'] = []\n    const warnings: ComponentDataValidationResult['warnings'] = []\n\n    for (const [fieldName, fieldDef] of Object.entries(schema)) {\n      const fieldValue = data?.[fieldName]\n\n      // 检查必填字段\n      if (fieldDef.required && (fieldValue === undefined || fieldValue === null)) {\n        errors.push({\n          field: fieldName,\n          message: `必填字段 ${fieldName} 缺失`,\n          type: 'missing'\n        })\n        continue\n      }\n\n      // 如果字段存在，检查类型\n      if (fieldValue !== undefined && fieldValue !== null) {\n        const actualType = Array.isArray(fieldValue) ? 'array' : typeof fieldValue\n        if (actualType !== fieldDef.type) {\n          errors.push({\n            field: fieldName,\n            message: `字段 ${fieldName} 类型错误，期望 ${fieldDef.type}，实际 ${actualType}`,\n            type: 'type-mismatch'\n          })\n        }\n\n        // 验证规则\n        if (fieldDef.validation) {\n          const validationError = this.validateFieldValue(fieldName, fieldValue, fieldDef.validation)\n          if (validationError) {\n            errors.push({\n              field: fieldName,\n              message: validationError,\n              type: 'validation-failed'\n            })\n          }\n        }\n      } else if (!fieldDef.required && fieldDef.defaultValue !== undefined) {\n        // 非必填字段有默认值的情况\n        warnings.push({\n          field: fieldName,\n          message: `字段 ${fieldName} 使用默认值: ${JSON.stringify(fieldDef.defaultValue)}`\n        })\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    }\n  }\n\n  /**\n   * 验证字段值\n   */\n  private validateFieldValue(\n    fieldName: string,\n    value: any,\n    validation: ComponentDataField['validation']\n  ): string | null {\n    if (!validation) return null\n\n    // 数值范围验证\n    if (typeof value === 'number') {\n      if (validation.min !== undefined && value < validation.min) {\n        return `字段 ${fieldName} 值 ${value} 小于最小值 ${validation.min}`\n      }\n      if (validation.max !== undefined && value > validation.max) {\n        return `字段 ${fieldName} 值 ${value} 大于最大值 ${validation.max}`\n      }\n    }\n\n    // 字符串模式验证\n    if (typeof value === 'string' && validation.pattern) {\n      const regex = new RegExp(validation.pattern)\n      if (!regex.test(value)) {\n        return `字段 ${fieldName} 值 \"${value}\" 不符合模式 ${validation.pattern}`\n      }\n    }\n\n    // 枚举值验证\n    if (validation.enum && !validation.enum.includes(value)) {\n      return `字段 ${fieldName} 值 \"${value}\" 不在允许的枚举值中: ${validation.enum.join(', ')}`\n    }\n\n    return null\n  }\n\n  /**\n   * 为组件数据填充默认值\n   */\n  fillDefaultValues(componentId: string, data: any = {}): any {\n    const schema = this.schemas.get(componentId)\n    if (!schema) return data\n\n    const result = { ...data }\n\n    for (const [fieldName, fieldDef] of Object.entries(schema)) {\n      if (result[fieldName] === undefined && fieldDef.defaultValue !== undefined) {\n        result[fieldName] = fieldDef.defaultValue\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * 获取组件数据需求的可读描述\n   */\n  getSchemaDescription(componentId: string): Array<{\n    field: string\n    type: string\n    required: boolean\n    description: string\n    defaultValue?: any\n  }> {\n    const schema = this.schemas.get(componentId)\n    if (!schema) return []\n\n    return Object.entries(schema).map(([fieldName, fieldDef]) => ({\n      field: fieldName,\n      type: fieldDef.type,\n      required: fieldDef.required,\n      description: fieldDef.description,\n      defaultValue: fieldDef.defaultValue\n    }))\n  }\n\n  /**\n   * 获取所有已注册的组件列表\n   */\n  getRegisteredComponents(): string[] {\n    return Array.from(this.schemas.keys())\n  }\n}\n\n// 导出单例\nexport const componentSchemaManager = new ComponentSchemaManager()\nexport default componentSchemaManager\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source\\data-binding-manager.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":19,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":42,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":61},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":112,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":129,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":129,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":207,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'validation' is assigned a value but never used.","line":244,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validation' is assigned a value but never used.","line":244,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":251,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":25},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":251,"column":27,"nodeType":"BlockStatement","messageId":"unexpected","endLine":251,"endColumn":29,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6226,6226],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":254,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":254,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":254,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6268,6268],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据绑定管理器\n * 负责将数据源与组件进行绑定和同步\n */\n\nimport type { StaticDataSource } from './static-data-source'\nimport type { DeviceApiDataSource } from './device-api-data-source'\nimport { componentSchemaManager } from './component-schema'\n\ntype DataSource = StaticDataSource | DeviceApiDataSource\n\nexport interface ComponentDataBinding {\n  componentId: string\n  componentInstanceId?: string // 同一组件可能有多个实例\n  dataSourceId: string\n  bindingConfig: {\n    [componentField: string]: {\n      dataPath: string\n      transform?: (value: any) => any // 可选的数据转换函数\n      fallbackValue?: any\n    }\n  }\n}\n\nexport interface DataBindingStatus {\n  [fieldName: string]: {\n    isBound: boolean\n    isValid: boolean\n    currentValue: any\n    lastUpdated?: Date\n    error?: string\n  }\n}\n\n/**\n * 数据绑定管理器\n */\nexport class DataBindingManager {\n  private dataSources = new Map<string, DataSource>()\n  private bindings = new Map<string, ComponentDataBinding>()\n  private bindingStatuses = new Map<string, DataBindingStatus>()\n  private updateCallbacks = new Map<string, Array<(data: any) => void>>()\n\n  /**\n   * 注册数据源\n   */\n  registerDataSource(dataSource: DataSource) {\n    this.dataSources.set(dataSource.getId(), dataSource)\n  }\n\n  /**\n   * 移除数据源\n   */\n  removeDataSource(dataSourceId: string) {\n    this.dataSources.delete(dataSourceId)\n\n    // 清理相关绑定\n    const bindingsToRemove: string[] = []\n    for (const [bindingId, binding] of this.bindings.entries()) {\n      if (binding.dataSourceId === dataSourceId) {\n        bindingsToRemove.push(bindingId)\n      }\n    }\n\n    bindingsToRemove.forEach(bindingId => {\n      this.removeBinding(bindingId)\n    })\n  }\n\n  /**\n   * 创建组件数据绑定\n   */\n  createBinding(binding: ComponentDataBinding): string {\n    const bindingId = `${binding.componentId}-${binding.componentInstanceId || 'default'}`\n\n    this.bindings.set(bindingId, binding)\n    this.bindingStatuses.set(bindingId, {})\n\n    // 立即更新绑定状态\n    this.updateBinding(bindingId)\n\n    return bindingId\n  }\n\n  /**\n   * 移除绑定\n   */\n  removeBinding(bindingId: string) {\n    this.bindings.delete(bindingId)\n    this.bindingStatuses.delete(bindingId)\n    this.updateCallbacks.delete(bindingId)\n  }\n\n  /**\n   * 更新绑定配置\n   */\n  updateBindingConfig(bindingId: string, newConfig: Partial<ComponentDataBinding>) {\n    const existingBinding = this.bindings.get(bindingId)\n    if (!existingBinding) {\n      return\n    }\n\n    const updatedBinding = { ...existingBinding, ...newConfig }\n    this.bindings.set(bindingId, updatedBinding)\n    // 立即更新绑定状态\n    this.updateBinding(bindingId)\n  }\n\n  /**\n   * 订阅数据更新\n   */\n  subscribe(bindingId: string, callback: (data: any) => void) {\n    if (!this.updateCallbacks.has(bindingId)) {\n      this.updateCallbacks.set(bindingId, [])\n    }\n\n    this.updateCallbacks.get(bindingId)!.push(callback)\n\n    // 立即触发一次回调\n    const currentData = this.getCurrentData(bindingId)\n    if (currentData) {\n      callback(currentData)\n    }\n  }\n\n  /**\n   * 取消订阅\n   */\n  unsubscribe(bindingId: string, callback: (data: any) => void) {\n    const callbacks = this.updateCallbacks.get(bindingId)\n    if (callbacks) {\n      const index = callbacks.indexOf(callback)\n      if (index > -1) {\n        callbacks.splice(index, 1)\n      }\n    }\n  }\n\n  /**\n   * 手动刷新绑定数据\n   */\n  async refreshBinding(bindingId: string) {\n    await this.updateBinding(bindingId)\n  }\n\n  /**\n   * 获取绑定状态\n   */\n  getBindingStatus(bindingId: string): DataBindingStatus | undefined {\n    return this.bindingStatuses.get(bindingId)\n  }\n\n  /**\n   * 获取当前绑定数据\n   */\n  getCurrentData(bindingId: string): any {\n    const status = this.bindingStatuses.get(bindingId)\n    if (!status) return null\n\n    const data: any = {}\n    for (const [field, fieldStatus] of Object.entries(status)) {\n      if (fieldStatus.isValid) {\n        data[field] = fieldStatus.currentValue\n      }\n    }\n\n    return data\n  }\n\n  /**\n   * 更新绑定状态（核心方法）\n   */\n  private async updateBinding(bindingId: string) {\n    const binding = this.bindings.get(bindingId)\n    if (!binding) return\n\n    const dataSource = this.dataSources.get(binding.dataSourceId)\n    if (!dataSource) {\n      return\n    }\n\n    try {\n      // 获取组件数据需求\n      const componentSchema = componentSchemaManager.getSchema(binding.componentId)\n      if (!componentSchema) {\n        return\n      }\n\n      // 从数据源获取原始数据\n      const sourceData = await dataSource.getValue()\n      const newStatus: DataBindingStatus = {}\n      const componentData: any = {}\n\n      // 处理每个组件字段\n      for (const [componentField, fieldDef] of Object.entries(componentSchema)) {\n        const bindingConfig = binding.bindingConfig[componentField]\n\n        if (bindingConfig) {\n          // 有绑定配置，从数据源提取值\n          const rawValue = sourceData[componentField]\n          let finalValue = rawValue\n\n          // 应用数据转换\n          if (bindingConfig.transform && rawValue !== undefined) {\n            try {\n              finalValue = bindingConfig.transform(rawValue)\n            } catch (error) {\n              finalValue = bindingConfig.fallbackValue ?? fieldDef.defaultValue\n            }\n          }\n\n          // 如果值为undefined，使用fallback或默认值\n          if (finalValue === undefined) {\n            finalValue = bindingConfig.fallbackValue ?? fieldDef.defaultValue\n          }\n\n          newStatus[componentField] = {\n            isBound: true,\n            isValid: finalValue !== undefined,\n            currentValue: finalValue,\n            lastUpdated: new Date()\n          }\n\n          componentData[componentField] = finalValue\n        } else {\n          // 没有绑定配置，使用默认值\n          const defaultValue = fieldDef.defaultValue\n\n          newStatus[componentField] = {\n            isBound: false,\n            isValid: true,\n            currentValue: defaultValue,\n            lastUpdated: new Date()\n          }\n\n          componentData[componentField] = defaultValue\n        }\n      }\n\n      // 更新绑定状态\n      this.bindingStatuses.set(bindingId, newStatus)\n\n      // 验证数据\n      const validation = componentSchemaManager.validateComponentData(binding.componentId, componentData)\n      // 通知订阅者\n      const callbacks = this.updateCallbacks.get(bindingId)\n      if (callbacks) {\n        callbacks.forEach(callback => {\n          try {\n            callback(componentData)\n          } catch (error) {}\n        })\n      }\n    } catch (error) {}\n  }\n\n  /**\n   * 获取所有绑定\n   */\n  getAllBindings(): Array<{ id: string; binding: ComponentDataBinding; status: DataBindingStatus }> {\n    const result: Array<{ id: string; binding: ComponentDataBinding; status: DataBindingStatus }> = []\n\n    for (const [bindingId, binding] of this.bindings.entries()) {\n      const status = this.bindingStatuses.get(bindingId) || {}\n      result.push({ id: bindingId, binding, status })\n    }\n\n    return result\n  }\n\n  /**\n   * 获取数据源列表\n   */\n  getDataSourceList(): Array<{ id: string; type: string; name?: string }> {\n    return Array.from(this.dataSources.values()).map(ds => ({\n      id: ds.getId(),\n      type: ds.getType(),\n      name: ds.exportConfig().name\n    }))\n  }\n}\n\n// 导出单例\nexport const dataBindingManager = new DataBindingManager()\nexport default dataBindingManager\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source\\device-api-data-source.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":82,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":101,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":116,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":238,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":305,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":305,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 设备API数据源实现\n * 支持telemetryDataCurrentKeys等设备API的调用\n */\n\nimport { telemetryDataCurrentKeys } from '@/service/api/device'\n\nexport interface DeviceApiDataSourceConfig {\n  id: string\n  type: 'device-api'\n  name?: string\n  apiType: 'telemetryDataCurrentKeys' // 目前只支持这一个API\n  parameters: {\n    device_id: string\n    keys: string\n  }\n  fieldMappings: {\n    [componentField: string]: string // 数据路径，如 'data[0].value'\n  }\n}\n\nexport interface DeviceApiResponse {\n  data: Array<{\n    value: any\n    name?: string\n    unit?: string\n    timestamp?: string\n  }>\n}\n\n/**\n * 设备API数据源处理器\n */\nexport class DeviceApiDataSource {\n  private config: DeviceApiDataSourceConfig\n  private lastResponse: DeviceApiResponse | null = null\n  private lastFetchTime: Date | null = null\n\n  constructor(config: DeviceApiDataSourceConfig) {\n    this.config = config\n  }\n\n  /**\n   * 获取数据源ID\n   */\n  getId(): string {\n    return this.config.id\n  }\n\n  /**\n   * 获取数据源类型\n   */\n  getType(): string {\n    return this.config.type\n  }\n\n  /**\n   * 获取API类型\n   */\n  getApiType(): string {\n    return this.config.apiType\n  }\n\n  /**\n   * 获取API参数\n   */\n  getParameters(): any {\n    return this.config.parameters\n  }\n\n  /**\n   * 获取字段映射配置\n   */\n  getFieldMappings(): Record<string, string> {\n    return this.config.fieldMappings\n  }\n\n  /**\n   * 调用设备API获取数据\n   */\n  async fetchData(): Promise<DeviceApiResponse> {\n    try {\n      let response: any\n\n      switch (this.config.apiType) {\n        case 'telemetryDataCurrentKeys':\n          response = await telemetryDataCurrentKeys({\n            device_id: this.config.parameters.device_id,\n            keys: this.config.parameters.keys\n          })\n          break\n        default:\n          throw new Error(`不支持的API类型: ${this.config.apiType}`)\n      }\n\n      this.lastResponse = response\n      this.lastFetchTime = new Date()\n      return response\n    } catch (error) {\n      throw error\n    }\n  }\n\n  /**\n   * 根据映射配置提取数据\n   */\n  async getValue(): Promise<Record<string, any>> {\n    // 获取最新数据\n    const response = await this.fetchData()\n    const result: Record<string, any> = {}\n\n    for (const [componentField, dataPath] of Object.entries(this.config.fieldMappings)) {\n      try {\n        const value = this.extractValueByPath(response, dataPath)\n        result[componentField] = value\n      } catch (error) {\n        result[componentField] = undefined\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * 根据路径提取值（支持数组索引）\n   */\n  private extractValueByPath(data: any, path: string): any {\n    if (!path || path === '') {\n      return data\n    }\n\n    // 解析路径，支持 'data[0].value' 格式\n    const pathParts = this.parsePath(path)\n    let current = data\n\n    for (const part of pathParts) {\n      if (current === null || current === undefined) {\n        return undefined\n      }\n\n      if (typeof part === 'number') {\n        // 数组索引\n        if (Array.isArray(current)) {\n          current = current[part]\n        } else {\n          return undefined\n        }\n      } else {\n        // 对象属性\n        if (typeof current === 'object' && part in current) {\n          current = current[part]\n        } else {\n          return undefined\n        }\n      }\n    }\n\n    return current\n  }\n\n  /**\n   * 解析路径字符串，支持数组索引\n   */\n  private parsePath(path: string): (string | number)[] {\n    const parts: (string | number)[] = []\n    let current = ''\n    let inBrackets = false\n    let bracketContent = ''\n\n    for (let i = 0; i < path.length; i++) {\n      const char = path[i]\n\n      if (char === '[') {\n        if (current) {\n          parts.push(current)\n          current = ''\n        }\n        inBrackets = true\n        bracketContent = ''\n      } else if (char === ']') {\n        inBrackets = false\n        const index = parseInt(bracketContent, 10)\n        if (!isNaN(index)) {\n          parts.push(index)\n        }\n        bracketContent = ''\n      } else if (char === '.') {\n        if (inBrackets) {\n          bracketContent += char\n        } else {\n          if (current) {\n            parts.push(current)\n            current = ''\n          }\n        }\n      } else {\n        if (inBrackets) {\n          bracketContent += char\n        } else {\n          current += char\n        }\n      }\n    }\n\n    if (current) {\n      parts.push(current)\n    }\n\n    return parts\n  }\n\n  /**\n   * 验证数据路径是否有效\n   */\n  async validatePath(path: string): Promise<boolean> {\n    try {\n      // 使用缓存的响应或获取新数据\n      const response = this.lastResponse || (await this.fetchData())\n      const value = this.extractValueByPath(response, path)\n      return value !== undefined\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * 获取可用的数据路径\n   */\n  async getAvailablePaths(): Promise<Array<{ path: string; type: string; value: any }>> {\n    try {\n      // 使用缓存的响应或获取新数据\n      const response = this.lastResponse || (await this.fetchData())\n      const paths: Array<{ path: string; type: string; value: any }> = []\n\n      this.collectPaths(response, '', paths)\n\n      return paths\n    } catch (error) {\n      return []\n    }\n  }\n\n  /**\n   * 递归收集所有可用路径\n   */\n  private collectPaths(obj: any, currentPath: string, paths: Array<{ path: string; type: string; value: any }>) {\n    if (obj === null || obj === undefined) {\n      return\n    }\n\n    if (Array.isArray(obj)) {\n      // 数组：只处理前几个元素避免路径过多\n      const maxItems = Math.min(obj.length, 3)\n      for (let i = 0; i < maxItems; i++) {\n        const newPath = currentPath ? `${currentPath}[${i}]` : `[${i}]`\n        const item = obj[i]\n\n        paths.push({\n          path: newPath,\n          type: Array.isArray(item) ? 'array' : typeof item,\n          value: item\n        })\n\n        // 如果数组元素是对象，继续递归\n        if (typeof item === 'object' && item !== null && !Array.isArray(item)) {\n          this.collectPaths(item, newPath, paths)\n        }\n      }\n    } else if (typeof obj === 'object') {\n      // 对象\n      for (const [key, value] of Object.entries(obj)) {\n        const newPath = currentPath ? `${currentPath}.${key}` : key\n\n        paths.push({\n          path: newPath,\n          type: Array.isArray(value) ? 'array' : typeof value,\n          value: value\n        })\n\n        // 如果值是对象或数组，继续递归\n        if (typeof value === 'object' && value !== null) {\n          this.collectPaths(value, newPath, paths)\n        }\n      }\n    }\n  }\n\n  /**\n   * 预览字段映射结果\n   */\n  async previewMapping(fieldMappings: Record<string, string>): Promise<Record<string, any>> {\n    try {\n      const response = this.lastResponse || (await this.fetchData())\n      const preview: Record<string, any> = {}\n\n      for (const [componentField, dataPath] of Object.entries(fieldMappings)) {\n        try {\n          preview[componentField] = this.extractValueByPath(response, dataPath)\n        } catch {\n          preview[componentField] = undefined\n        }\n      }\n\n      return preview\n    } catch (error) {\n      return {}\n    }\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(newConfig: Partial<DeviceApiDataSourceConfig>) {\n    this.config = { ...this.config, ...newConfig }\n    // 清除缓存，强制重新获取数据\n    this.lastResponse = null\n    this.lastFetchTime = null\n  }\n\n  /**\n   * 获取最后获取数据的时间\n   */\n  getLastFetchTime(): Date | null {\n    return this.lastFetchTime\n  }\n\n  /**\n   * 导出配置\n   */\n  exportConfig(): DeviceApiDataSourceConfig {\n    return { ...this.config }\n  }\n}\n\n/**\n * 设备API数据源工厂\n */\nexport class DeviceApiDataSourceFactory {\n  /**\n   * 创建设备API数据源\n   */\n  static create(config: DeviceApiDataSourceConfig): DeviceApiDataSource {\n    return new DeviceApiDataSource(config)\n  }\n\n  /**\n   * 创建telemetryDataCurrentKeys数据源\n   */\n  static createTelemetryDataSource(\n    id: string,\n    deviceId: string,\n    keys: string,\n    fieldMappings: Record<string, string> = {}\n  ): DeviceApiDataSource {\n    return new DeviceApiDataSource({\n      id,\n      type: 'device-api',\n      name: `设备${deviceId}遥测数据`,\n      apiType: 'telemetryDataCurrentKeys',\n      parameters: {\n        device_id: deviceId,\n        keys: keys\n      },\n      fieldMappings\n    })\n  }\n\n  /**\n   * 创建示例设备API数据源\n   */\n  static createSample(id: string): DeviceApiDataSource {\n    return new DeviceApiDataSource({\n      id,\n      type: 'device-api',\n      name: '示例设备API',\n      apiType: 'telemetryDataCurrentKeys',\n      parameters: {\n        device_id: 'sample-device-001',\n        keys: 'temperature,humidity'\n      },\n      fieldMappings: {\n        value: 'data[0].value',\n        title: 'data[0].name',\n        unit: 'data[0].unit'\n      }\n    })\n  }\n}\n\nexport default DeviceApiDataSource\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source\\reactive-data-manager.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'dataBindingManager' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dataBindingManager' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":68,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 响应式数据管理器\n * 支持轮询更新、实时订阅等响应式数据获取\n */\n\nimport type { StaticDataSource } from './static-data-source'\nimport type { DeviceApiDataSource } from './device-api-data-source'\nimport { dataBindingManager } from './data-binding-manager'\n\ntype DataSource = StaticDataSource | DeviceApiDataSource\n\nexport interface ReactiveDataSourceConfig {\n  dataSourceId: string\n  updateStrategy: 'static' | 'polling' | 'realtime'\n  updateInterval?: number // 轮询间隔，单位：毫秒\n  autoStart?: boolean\n}\n\nexport interface ReactiveSubscription {\n  id: string\n  dataSourceId: string\n  callback: (data: any) => void\n  config: ReactiveDataSourceConfig\n  isActive: boolean\n  lastUpdate?: Date\n  errorCount: number\n}\n\n/**\n * 响应式数据管理器\n */\nexport class ReactiveDataManager {\n  private subscriptions = new Map<string, ReactiveSubscription>()\n  private pollingTimers = new Map<string, NodeJS.Timeout>()\n  private dataSources = new Map<string, DataSource>()\n\n  /**\n   * 注册数据源\n   */\n  registerDataSource(dataSource: DataSource) {\n    this.dataSources.set(dataSource.getId(), dataSource)\n  }\n\n  /**\n   * 移除数据源\n   */\n  removeDataSource(dataSourceId: string) {\n    // 停止相关订阅\n    const subscriptionsToRemove: string[] = []\n    for (const [subId, subscription] of this.subscriptions.entries()) {\n      if (subscription.dataSourceId === dataSourceId) {\n        subscriptionsToRemove.push(subId)\n      }\n    }\n\n    subscriptionsToRemove.forEach(subId => {\n      this.unsubscribe(subId)\n    })\n\n    this.dataSources.delete(dataSourceId)\n  }\n\n  /**\n   * 创建响应式订阅\n   */\n  subscribe(\n    dataSourceId: string,\n    callback: (data: any) => void,\n    config: Omit<ReactiveDataSourceConfig, 'dataSourceId'>\n  ): string {\n    const subscriptionId = `${dataSourceId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n\n    const subscription: ReactiveSubscription = {\n      id: subscriptionId,\n      dataSourceId,\n      callback,\n      config: { ...config, dataSourceId },\n      isActive: false,\n      errorCount: 0\n    }\n\n    this.subscriptions.set(subscriptionId, subscription)\n\n    // 如果配置为自动启动，立即开始\n    if (config.autoStart !== false) {\n      this.startSubscription(subscriptionId)\n    }\n\n    return subscriptionId\n  }\n\n  /**\n   * 取消订阅\n   */\n  unsubscribe(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription) return\n\n    this.stopSubscription(subscriptionId)\n    this.subscriptions.delete(subscriptionId)\n  }\n\n  /**\n   * 启动订阅\n   */\n  startSubscription(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription || subscription.isActive) return\n\n    const dataSource = this.dataSources.get(subscription.dataSourceId)\n    if (!dataSource) {\n      return\n    }\n\n    subscription.isActive = true\n\n    switch (subscription.config.updateStrategy) {\n      case 'static':\n        // 静态数据：只获取一次\n        this.fetchDataOnce(subscriptionId)\n        break\n\n      case 'polling':\n        // 轮询更新：按间隔定期获取\n        this.startPolling(subscriptionId)\n        break\n\n      case 'realtime':\n        // 实时更新：WebSocket等（暂未实现）\n        this.fetchDataOnce(subscriptionId)\n        break\n\n      default:\n    }\n  }\n\n  /**\n   * 停止订阅\n   */\n  stopSubscription(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription || !subscription.isActive) return\n\n    subscription.isActive = false\n\n    // 清除轮询定时器\n    const timer = this.pollingTimers.get(subscriptionId)\n    if (timer) {\n      clearInterval(timer)\n      this.pollingTimers.delete(subscriptionId)\n    }\n  }\n\n  /**\n   * 获取单次数据\n   */\n  private async fetchDataOnce(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription) return\n\n    const dataSource = this.dataSources.get(subscription.dataSourceId)\n    if (!dataSource) return\n\n    try {\n      const data = await dataSource.getValue()\n      subscription.lastUpdate = new Date()\n      subscription.errorCount = 0\n\n      // 触发回调\n      subscription.callback(data)\n    } catch (error) {\n      subscription.errorCount++\n      // 如果错误次数过多，暂停订阅\n      if (subscription.errorCount >= 3) {\n        this.stopSubscription(subscriptionId)\n      }\n\n      // 触发回调，传递错误信息\n      subscription.callback({ error: error instanceof Error ? error.message : '数据获取失败' })\n    }\n  }\n\n  /**\n   * 开始轮询\n   */\n  private startPolling(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription) return\n\n    const interval = subscription.config.updateInterval || 5000 // 默认5秒\n\n    // 立即获取一次数据\n    this.fetchDataOnce(subscriptionId)\n\n    // 设置定时器\n    const timer = setInterval(() => {\n      if (subscription.isActive) {\n        this.fetchDataOnce(subscriptionId)\n      }\n    }, interval)\n\n    this.pollingTimers.set(subscriptionId, timer)\n  }\n\n  /**\n   * 更新订阅配置\n   */\n  updateSubscriptionConfig(subscriptionId: string, newConfig: Partial<ReactiveDataSourceConfig>) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription) return\n\n    const wasActive = subscription.isActive\n\n    // 停止当前订阅\n    if (wasActive) {\n      this.stopSubscription(subscriptionId)\n    }\n\n    // 更新配置\n    subscription.config = { ...subscription.config, ...newConfig }\n\n    // 如果之前是活跃的，重新启动\n    if (wasActive) {\n      this.startSubscription(subscriptionId)\n    }\n  }\n\n  /**\n   * 手动刷新订阅数据\n   */\n  async refreshSubscription(subscriptionId: string) {\n    const subscription = this.subscriptions.get(subscriptionId)\n    if (!subscription) return\n\n    await this.fetchDataOnce(subscriptionId)\n  }\n\n  /**\n   * 获取订阅状态\n   */\n  getSubscriptionStatus(subscriptionId: string): ReactiveSubscription | undefined {\n    return this.subscriptions.get(subscriptionId)\n  }\n\n  /**\n   * 获取所有订阅\n   */\n  getAllSubscriptions(): ReactiveSubscription[] {\n    return Array.from(this.subscriptions.values())\n  }\n\n  /**\n   * 暂停所有订阅\n   */\n  pauseAll() {\n    for (const subscriptionId of this.subscriptions.keys()) {\n      this.stopSubscription(subscriptionId)\n    }\n  }\n\n  /**\n   * 恢复所有订阅\n   */\n  resumeAll() {\n    for (const subscriptionId of this.subscriptions.keys()) {\n      this.startSubscription(subscriptionId)\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  dispose() {\n    // 停止所有订阅\n    for (const subscriptionId of this.subscriptions.keys()) {\n      this.unsubscribe(subscriptionId)\n    }\n\n    // 清理数据源\n    this.dataSources.clear()\n  }\n}\n\n// 导出单例\nexport const reactiveDataManager = new ReactiveDataManager()\nexport default reactiveDataManager\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-source\\static-data-source.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":70,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 静态数据源实现\n * 支持JSON数据的解析和字段映射\n */\n\nimport { smartDeepClone } from '@/utils/deep-clone'\n\nexport interface StaticDataSourceConfig {\n  id: string\n  type: 'static'\n  name?: string\n  data: any\n  fieldMappings: {\n    [componentField: string]: string // 数据路径，如 'temperature' 或 'sensor.value'\n  }\n}\n\nexport interface DataSourceValue {\n  [fieldName: string]: any\n}\n\n/**\n * 静态数据源处理器\n */\nexport class StaticDataSource {\n  private config: StaticDataSourceConfig\n\n  constructor(config: StaticDataSourceConfig) {\n    this.config = config\n  }\n\n  /**\n   * 获取数据源ID\n   */\n  getId(): string {\n    return this.config.id\n  }\n\n  /**\n   * 获取数据源类型\n   */\n  getType(): string {\n    return this.config.type\n  }\n\n  /**\n   * 获取原始数据\n   */\n  getRawData(): any {\n    return this.config.data\n  }\n\n  /**\n   * 获取字段映射配置\n   */\n  getFieldMappings(): Record<string, string> {\n    return this.config.fieldMappings\n  }\n\n  /**\n   * 根据映射配置提取数据\n   */\n  async getValue(): Promise<DataSourceValue> {\n    const result: DataSourceValue = {}\n\n    for (const [componentField, dataPath] of Object.entries(this.config.fieldMappings)) {\n      try {\n        const value = this.extractValueByPath(this.config.data, dataPath)\n        result[componentField] = value\n      } catch (error) {\n        result[componentField] = undefined\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * 根据路径提取值（支持嵌套对象）\n   */\n  private extractValueByPath(data: any, path: string): any {\n    if (!path || path === '') {\n      return data\n    }\n\n    // 简单的路径解析：支持 'field' 和 'field.subfield' 格式\n    const pathParts = path.split('.')\n    let current = data\n\n    for (const part of pathParts) {\n      if (current === null || current === undefined) {\n        return undefined\n      }\n\n      if (typeof current === 'object' && part in current) {\n        current = current[part]\n      } else {\n        return undefined\n      }\n    }\n\n    return current\n  }\n\n  /**\n   * 更新数据源配置\n   */\n  updateConfig(newConfig: Partial<StaticDataSourceConfig>) {\n    this.config = { ...this.config, ...newConfig }\n  }\n\n  /**\n   * 验证数据路径是否有效\n   */\n  validatePath(path: string): boolean {\n    try {\n      const value = this.extractValueByPath(this.config.data, path)\n      return value !== undefined\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * 获取可用的数据路径\n   */\n  getAvailablePaths(): Array<{ path: string; type: string; value: any }> {\n    const paths: Array<{ path: string; type: string; value: any }> = []\n\n    this.collectPaths(this.config.data, '', paths)\n\n    return paths\n  }\n\n  /**\n   * 递归收集所有可用路径\n   */\n  private collectPaths(obj: any, currentPath: string, paths: Array<{ path: string; type: string; value: any }>) {\n    if (obj === null || obj === undefined) {\n      return\n    }\n\n    if (typeof obj === 'object' && !Array.isArray(obj)) {\n      for (const [key, value] of Object.entries(obj)) {\n        const newPath = currentPath ? `${currentPath}.${key}` : key\n\n        // 添加当前路径\n        paths.push({\n          path: newPath,\n          type: Array.isArray(value) ? 'array' : typeof value,\n          value: value\n        })\n\n        // 如果是对象，继续递归（限制深度避免无限递归）\n        if (typeof value === 'object' && value !== null && !Array.isArray(value) && currentPath.split('.').length < 5) {\n          this.collectPaths(value, newPath, paths)\n        }\n      }\n    }\n  }\n\n  /**\n   * 预览字段映射结果\n   */\n  previewMapping(fieldMappings: Record<string, string>): Record<string, any> {\n    const preview: Record<string, any> = {}\n\n    for (const [componentField, dataPath] of Object.entries(fieldMappings)) {\n      try {\n        preview[componentField] = this.extractValueByPath(this.config.data, dataPath)\n      } catch {\n        preview[componentField] = undefined\n      }\n    }\n\n    return preview\n  }\n\n  /**\n   * 克隆数据源\n   */\n  clone(): StaticDataSource {\n    return new StaticDataSource({\n      ...this.config,\n      data: smartDeepClone(this.config.data) // 使用智能深拷贝\n    })\n  }\n\n  /**\n   * 导出配置\n   */\n  exportConfig(): StaticDataSourceConfig {\n    return { ...this.config }\n  }\n}\n\n/**\n * 静态数据源工厂\n */\nexport class StaticDataSourceFactory {\n  /**\n   * 创建静态数据源\n   */\n  static create(config: StaticDataSourceConfig): StaticDataSource {\n    return new StaticDataSource(config)\n  }\n\n  /**\n   * 从JSON字符串创建数据源\n   */\n  static createFromJson(id: string, jsonString: string, fieldMappings: Record<string, string> = {}): StaticDataSource {\n    try {\n      const data = JSON.parse(jsonString)\n      return new StaticDataSource({\n        id,\n        type: 'static',\n        data,\n        fieldMappings\n      })\n    } catch (error) {\n      throw new Error(`无效的JSON数据: ${error instanceof Error ? error.message : '解析错误'}`)\n    }\n  }\n\n  /**\n   * 创建示例数据源\n   */\n  static createSample(id: string): StaticDataSource {\n    return new StaticDataSource({\n      id,\n      type: 'static',\n      name: '示例数据源',\n      data: {\n        temperature: 25.6,\n        humidity: 68.2,\n        title: '温度传感器',\n        unit: '°C',\n        status: 'normal',\n        sensor: {\n          name: '传感器001',\n          location: '机房A',\n          value: 42.5\n        }\n      },\n      fieldMappings: {\n        value: 'temperature',\n        title: 'title',\n        unit: 'unit'\n      }\n    })\n  }\n}\n\nexport default StaticDataSource\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-sources\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\data-sources\\static-data-source-service.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":22,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":47,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":109,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is assigned a value but never used.","line":109,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":112,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":112,"endColumn":23},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":112,"column":25,"nodeType":"BlockStatement","messageId":"unexpected","endLine":112,"endColumn":27,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2584,2584],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 静态数据源服务实现\n * 提供静态数据的数据源服务\n */\n\nimport type { DataSourceInfo } from '../types'\nimport type { DataSourceService, DataSourceSubscription } from '../data-source-center'\n\nexport interface StaticDataSourceConfig {\n  name: string\n  description?: string\n  data: any\n}\n\n/**\n * 静态数据源服务\n * 提供静态数据，支持手动更新\n */\nexport class StaticDataSourceService implements DataSourceService {\n  private id: string\n  private config: StaticDataSourceConfig\n  private subscribers = new Map<string, (data: any) => void>()\n  private subscriptionCounter = 0\n\n  constructor(id: string, config: StaticDataSourceConfig) {\n    this.id = id\n    this.config = config\n  }\n\n  getInfo(): DataSourceInfo {\n    return {\n      id: this.id,\n      name: this.config.name,\n      type: 'static',\n      description: this.config.description,\n      status: 'active',\n      schema: this.config.data,\n      config: this.config,\n      lastUpdated: new Date()\n    }\n  }\n\n  async getCurrentData(): Promise<any> {\n    return Promise.resolve(this.config.data)\n  }\n\n  subscribe(callback: (data: any) => void): DataSourceSubscription {\n    const subscriptionId = `static_${this.id}_${++this.subscriptionCounter}`\n    this.subscribers.set(subscriptionId, callback)\n\n    // 立即发送当前数据\n    setTimeout(() => {\n      callback(this.config.data)\n    }, 0)\n\n    return {\n      id: subscriptionId,\n      unsubscribe: () => {\n        this.subscribers.delete(subscriptionId)\n      }\n    }\n  }\n\n  validateConfig(config: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n\n    if (!config) {\n      errors.push('配置不能为空')\n    } else {\n      if (!config.name || typeof config.name !== 'string') {\n        errors.push('name 字段必须是非空字符串')\n      }\n      if (config.data === undefined) {\n        errors.push('data 字段是必需的')\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  updateConfig(config: StaticDataSourceConfig): void {\n    const oldData = this.config.data\n    this.config = config\n    // 如果数据发生变化，通知所有订阅者\n    if (JSON.stringify(oldData) !== JSON.stringify(config.data)) {\n      this.notifySubscribers(config.data)\n    }\n  }\n\n  /**\n   * 手动更新数据\n   * @param newData 新数据\n   */\n  updateData(newData: any): void {\n    this.config.data = newData\n    this.notifySubscribers(newData)\n  }\n\n  destroy(): void {\n    this.subscribers.clear()\n  }\n\n  private notifySubscribers(data: any): void {\n    const subscriberCount = this.subscribers.size\n    if (subscriberCount > 0) {\n      for (const [id, callback] of this.subscribers.entries()) {\n        try {\n          callback(data)\n        } catch (error) {}\n      }\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":32,"column":23,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":32,"endColumn":54},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":35,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":35,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 核心功能导出\n */\n\nexport * from './types'\nexport * from './registry'\nexport * from './interaction-types'\nexport * from './interaction-manager'\n\n// 🔥 新增：组件注册表和数据源映射器\nexport * from './component-registry'\nexport * from './data-source-mapper'\n\n// 数据源中心相关导出\nexport * from './data-source-center'\nexport * from './data-sources'\n\n// 初始化数据源系统\nimport { initializeDataSources } from './data-sources'\n// 🔥 新增：导入组件注册表初始化\nimport { ComponentRegistry } from './component-registry'\n\n// 自动初始化数据源\ninitializeDataSources()\n\n// 🔥 新增：初始化组件注册表\n\n// 🔥 新增：调试接口（仅在开发环境中启用）\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  window.__CARD2_DEBUG__ = {\n    ComponentRegistry,\n    DataSourceMapper: require('./data-source-mapper').DataSourceMapper,\n    getCard2CoreStatus,\n    validateCard2Core,\n    triggerDataUpdate: (data: any) => {\n      // 这里可以添加实际的数据更新逻辑\n    }\n  }\n}\n\n/**\n * 获取系统状态\n */\nexport function getCard2CoreStatus(): {\n  isInitialized: boolean\n  componentCount: number\n  registeredComponents: string[]\n} {\n  const stats = ComponentRegistry.getStats()\n\n  return {\n    isInitialized: stats.totalComponents > 0,\n    componentCount: stats.totalComponents,\n    registeredComponents: stats.componentTypes\n  }\n}\n\n/**\n * 验证系统完整性\n */\nexport function validateCard2Core(): {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n} {\n  const errors: string[] = []\n  const warnings: string[] = []\n\n  // 检查组件注册情况\n  const stats = ComponentRegistry.getStats()\n  if (stats.totalComponents === 0) {\n    errors.push('没有注册任何组件')\n  }\n\n  // 检查必要组件\n  const requiredComponents = ['dual-data-display', 'triple-data-display']\n  requiredComponents.forEach(componentType => {\n    if (!ComponentRegistry.has(componentType)) {\n      errors.push(`缺少必要组件: ${componentType}`)\n    }\n  })\n\n  // 检查多数据源组件\n  if (stats.multiDataSourceComponents === 0) {\n    warnings.push('没有多数据源组件')\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\interaction-adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\interaction-compatibility-test.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'JumpConfig' is defined but never used.","line":7,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'JumpConfig' is defined but never used.","line":7,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'ModifyConfig' is defined but never used.","line":7,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ModifyConfig' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 交互系统兼容性测试\n * 验证新旧配置格式之间的转换和兼容性\n */\n\nimport { InteractionAdapter } from './interaction-adapter'\nimport type { JumpConfig, ModifyConfig } from './interaction-types'\n\n/**\n * 兼容性测试套件\n */\nexport class InteractionCompatibilityTest {\n  /**\n   * 测试旧格式跳转配置转换\n   */\n  static testLegacyJumpConversion() {\n    // 测试外部链接\n    const legacyExternalJump = {\n      action: 'navigateToUrl' as const,\n      value: 'https://example.com',\n      target: '_blank'\n    }\n\n    const convertedExternal = InteractionAdapter.convertLegacyJumpToNew(legacyExternalJump)\n\n    // 验证转换结果\n    const expectedExternal = {\n      action: 'jump',\n      jumpConfig: {\n        jumpType: 'external',\n        url: 'https://example.com',\n        target: '_blank'\n      },\n      value: 'https://example.com',\n      target: '_blank'\n    }\n\n    // 测试内部路径\n    const legacyInternalJump = {\n      action: 'navigateToUrl' as const,\n      value: '/dashboard/overview',\n      target: '_self'\n    }\n\n    const convertedInternal = InteractionAdapter.convertLegacyJumpToNew(legacyInternalJump)\n\n    return {\n      externalSuccess: JSON.stringify(convertedExternal) === JSON.stringify(expectedExternal),\n      internalSuccess:\n        convertedInternal.jumpConfig.jumpType === 'internal' &&\n        convertedInternal.jumpConfig.internalPath === '/dashboard/overview'\n    }\n  }\n\n  /**\n   * 测试旧格式修改配置转换\n   */\n  static testLegacyModifyConversion() {\n    const legacyModify = {\n      action: 'updateComponentData' as const,\n      targetComponentId: 'test-component-123',\n      targetProperty: 'backgroundColor',\n      updateValue: '#ff0000'\n    }\n\n    const converted = InteractionAdapter.convertLegacyModifyToNew(legacyModify)\n\n    const expected = {\n      action: 'modify',\n      modifyConfig: {\n        targetComponentId: 'test-component-123',\n        targetProperty: 'backgroundColor',\n        updateValue: '#ff0000',\n        updateMode: 'replace'\n      },\n      targetComponentId: 'test-component-123',\n      targetProperty: 'backgroundColor',\n      updateValue: '#ff0000'\n    }\n\n    return {\n      success: JSON.stringify(converted) === JSON.stringify(expected)\n    }\n  }\n\n  /**\n   * 测试新格式到旧格式的反向转换\n   */\n  static testNewToLegacyConversion() {\n    // 测试跳转配置反向转换\n    const newJump = {\n      action: 'jump' as const,\n      jumpConfig: {\n        jumpType: 'external' as const,\n        url: 'https://example.com',\n        target: '_blank' as const\n      }\n    }\n\n    const legacyJump = InteractionAdapter.convertNewJumpToLegacy(newJump)\n\n    // 测试修改配置反向转换\n    const newModify = {\n      action: 'modify' as const,\n      modifyConfig: {\n        targetComponentId: 'test-component-456',\n        targetProperty: 'title',\n        updateValue: '新标题',\n        updateMode: 'replace' as const\n      }\n    }\n\n    const legacyModify = InteractionAdapter.convertNewModifyToLegacy(newModify)\n\n    return {\n      jumpSuccess: legacyJump.action === 'navigateToUrl' && legacyJump.value === 'https://example.com',\n      modifySuccess:\n        legacyModify.action === 'updateComponentData' && legacyModify.targetComponentId === 'test-component-456'\n    }\n  }\n\n  /**\n   * 测试格式检测功能\n   */\n  static testFormatDetection() {\n    const legacyResponse = { action: 'navigateToUrl', value: '/test' }\n    const newResponse = { action: 'jump', jumpConfig: { jumpType: 'internal', internalPath: '/test' } }\n\n    const legacyDetected = InteractionAdapter.detectResponseFormat(legacyResponse as any)\n    const newDetected = InteractionAdapter.detectResponseFormat(newResponse as any)\n\n    return {\n      legacyDetected: legacyDetected === 'legacy',\n      newDetected: newDetected === 'new'\n    }\n  }\n\n  /**\n   * 测试批量交互配置标准化\n   */\n  static testBatchNormalization() {\n    const mixedInteraction = {\n      event: 'click',\n      enabled: true,\n      responses: [\n        {\n          action: 'navigateToUrl',\n          value: 'https://example.com',\n          target: '_blank'\n        },\n        {\n          action: 'updateComponentData',\n          targetComponentId: 'test-123',\n          targetProperty: 'title',\n          updateValue: '测试标题'\n        }\n      ]\n    }\n\n    const normalizedToNew = InteractionAdapter.normalizeInteractionResponses(mixedInteraction, 'new')\n    const normalizedToLegacy = InteractionAdapter.normalizeInteractionResponses(mixedInteraction, 'legacy')\n    return {\n      newFormatValid: normalizedToNew.responses.every((r: any) => r.action === 'jump' || r.action === 'modify'),\n      legacyFormatValid: normalizedToLegacy.responses.every(\n        (r: any) => r.action === 'navigateToUrl' || r.action === 'updateComponentData'\n      )\n    }\n  }\n\n  /**\n   * 运行完整的兼容性测试套件\n   */\n  static runFullCompatibilityTest() {\n    const results = {\n      legacyJumpConversion: this.testLegacyJumpConversion(),\n      legacyModifyConversion: this.testLegacyModifyConversion(),\n      newToLegacyConversion: this.testNewToLegacyConversion(),\n      formatDetection: this.testFormatDetection(),\n      batchNormalization: this.testBatchNormalization()\n    }\n\n    // 计算总体成功率\n    const allTests = Object.values(results).flatMap(result => Object.values(result))\n    const successCount = allTests.filter(Boolean).length\n    const totalCount = allTests.length\n    const successRate = (successCount / totalCount) * 100\n    return {\n      success: successRate === 100,\n      successRate,\n      details: results\n    }\n  }\n}\n\n/**\n * 导出测试函数供外部调用\n */\nexport function runInteractionCompatibilityTest() {\n  return InteractionCompatibilityTest.runFullCompatibilityTest()\n}\n\nexport default InteractionCompatibilityTest\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\interaction-manager.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ComparisonOperator' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComparisonOperator' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'NavigationConfig' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'NavigationConfig' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'DataUpdateConfig' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DataUpdateConfig' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'CrossComponentResponse' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CrossComponentResponse' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'propertyBindingLogger' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'propertyBindingLogger' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":28,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'configs' is defined but never used.","line":46,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'configs' is defined but never used.","line":46,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":51},{"ruleId":"no-unused-vars","severity":1,"message":"'normalizedResponse' is assigned a value but never used.","line":119,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'normalizedResponse' is assigned a value but never used.","line":119,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'actionType' is assigned a value but never used.","line":120,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionType' is assigned a value but never used.","line":120,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":397,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":397,"endColumn":61},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":407,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":407,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":423,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":423,"endColumn":23},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":423,"column":25,"nodeType":"BlockStatement","messageId":"unexpected","endLine":423,"endColumn":27,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[11955,11955],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":531,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":531,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fallbackError' is defined but never used.","line":535,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":535,"endColumn":29},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":535,"column":31,"nodeType":"BlockStatement","messageId":"unexpected","endLine":535,"endColumn":33,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[14684,14684],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":568,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":568,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fallbackError' is defined but never used.","line":572,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":572,"endColumn":29},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":572,"column":31,"nodeType":"BlockStatement","messageId":"unexpected","endLine":572,"endColumn":33,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[15563,15563],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":700,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":700,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":700,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":700,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[19154,19154],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":724,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":724,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":828,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":828,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":854,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":854,"endColumn":25},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":854,"column":27,"nodeType":"BlockStatement","messageId":"unexpected","endLine":854,"endColumn":29,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[23452,23452],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":892,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":892,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":892,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":892,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[24450,24450],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'newValue' is defined but never used.","line":1057,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":1057,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newValue' is defined but never used.","line":1057,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1057,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":1058,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":1058,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":1058,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":1058,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'mappingKey' is assigned a value but never used.","line":1065,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":1065,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mappingKey' is assigned a value but never used.","line":1065,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":1065,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'mappingKey' is assigned a value but never used.","line":1074,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":1074,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mappingKey' is assigned a value but never used.","line":1074,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":1074,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":1085,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":1085,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":1085,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":1085,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":1090,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":1090,"endColumn":25},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":1090,"column":27,"nodeType":"BlockStatement","messageId":"unexpected","endLine":1090,"endColumn":29,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[29962,29962],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":1093,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1093,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":1093,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":1093,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[30003,30003],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'newValue' is defined but never used.","line":1119,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":1119,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'oldValue' is defined but never used.","line":1119,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":1119,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'watchKey' is assigned a value but never used.","line":1121,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":1121,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'watchKey' is assigned a value but never used.","line":1121,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":1121,"endColumn":19}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件交互管理器\n * 负责管理所有组件的交互配置和状态\n */\n\nimport type {\n  InteractionConfig,\n  InteractionResponse,\n  ComponentInteractionState,\n  InteractionEventType,\n  InteractionResponseResult,\n  ConditionConfig,\n  ComparisonOperator,\n  NavigationConfig,\n  DataUpdateConfig,\n  FlashConfig,\n  CrossComponentResponse,\n  JumpConfig,\n  ModifyConfig\n} from './interaction-types'\nimport { InteractionAdapter } from './interaction-adapter'\nimport { VisualEditorBridge } from '@/core/data-architecture/VisualEditorBridge'\nimport { propertyBindingLogger } from '@/utils/logger'\n\nclass InteractionManager {\n  private componentConfigs = new Map<string, InteractionConfig[]>()\n  private componentStates = new Map<string, ComponentInteractionState>()\n  private eventListeners = new Map<string, Set<(data: any) => void>>()\n  private visualEditorBridge = new VisualEditorBridge()\n\n  // 🔥 新增：存储需要响应属性变化的HTTP数据源映射\n  private httpDataSourceMappings = new Map<string, { componentId: string; componentType: string; config: any }>()\n\n  /**\n   * 注册组件的交互配置\n   */\n  registerComponent(componentId: string, configs: InteractionConfig[]): void {\n    this.componentConfigs.set(componentId, configs)\n    // 初始化组件状态\n    this.componentStates.set(componentId, {})\n  }\n\n  /**\n   * 移除组件的交互配置\n   */\n  unregisterComponent(componentId: string, configs: InteractionConfig[]): void {\n    this.componentConfigs.delete(componentId)\n    this.componentStates.delete(componentId)\n    this.eventListeners.delete(componentId)\n  }\n\n  /**\n   * 触发交互事件\n   */\n  triggerEvent(componentId: string, event: InteractionEventType, data?: any): InteractionResponseResult[] {\n    const configs = this.componentConfigs.get(componentId)\n    if (!configs) {\n      return [\n        {\n          success: false,\n          componentId,\n          action: 'custom' as any,\n          error: `组件 ${componentId} 未注册`\n        }\n      ]\n    }\n\n    const results: InteractionResponseResult[] = []\n    const eventConfigs = configs.filter(config => config.event === event && config.enabled !== false)\n    // 按优先级排序\n    eventConfigs.sort((a, b) => (b.priority || 0) - (a.priority || 0))\n\n    for (const config of eventConfigs) {\n      // 🔥 修复：对于 dataChange 事件，需要检查条件\n      if (event === 'dataChange' && config.condition) {\n        // 检查属性变化条件\n        const shouldExecute = this.checkDataChangeCondition(config, data)\n\n        if (!shouldExecute) {\n          continue\n        }\n      }\n\n      // 🔥 重点：检查是否有响应动作\n      if (!config.responses || config.responses.length === 0) {\n        continue\n      }\n\n      // 执行响应动作\n      for (const response of config.responses) {\n        try {\n          const result = this.executeResponse(componentId, response)\n          results.push(result)\n        } catch (error) {\n          results.push({\n            success: false,\n            componentId,\n            action: response.action,\n            error: error instanceof Error ? error.message : String(error)\n          })\n        }\n      }\n    }\n\n    // 触发事件监听器\n    this.triggerEventListeners(componentId, event, data)\n    return results\n  }\n\n  /**\n   * 执行交互响应\n   */\n  private executeResponse(componentId: string, response: InteractionResponse): InteractionResponseResult {\n    const currentState = this.componentStates.get(componentId) || {}\n    let oldValue: any\n    let newValue: any\n\n    // 🔥 使用适配器统一处理新旧格式\n    const normalizedResponse = InteractionAdapter.normalizeToNewFormat(response as any)\n    const actionType = InteractionAdapter.getUnifiedActionType(response as any)\n\n    switch (response.action) {\n      case 'changeBackgroundColor':\n        oldValue = currentState.backgroundColor\n        newValue = response.value\n        this.updateComponentState(componentId, { backgroundColor: newValue })\n        break\n\n      case 'changeTextColor':\n        oldValue = currentState.textColor\n        newValue = response.value\n        this.updateComponentState(componentId, { textColor: newValue })\n        break\n\n      case 'changeBorderColor':\n        oldValue = currentState.borderColor\n        newValue = response.value\n        this.updateComponentState(componentId, { borderColor: newValue })\n        break\n\n      case 'changeSize':\n        oldValue = { width: currentState.width, height: currentState.height }\n        newValue = response.value\n        this.updateComponentState(componentId, {\n          width: newValue.width || currentState.width,\n          height: newValue.height || currentState.height\n        })\n        break\n\n      case 'changeOpacity':\n        oldValue = currentState.opacity\n        newValue = response.value\n        this.updateComponentState(componentId, { opacity: newValue })\n        break\n\n      case 'changeTransform':\n        oldValue = currentState.transform\n        newValue = response.value\n        this.updateComponentState(componentId, { transform: newValue })\n        break\n\n      case 'changeVisibility':\n        oldValue = currentState.visibility\n        newValue = response.value\n        this.updateComponentState(componentId, { visibility: newValue })\n        break\n\n      case 'changeContent':\n        oldValue = currentState.content\n        newValue = response.value\n        this.updateComponentState(componentId, { content: newValue })\n        break\n\n      // 🔥 移除动画功能\n\n      // 🔥 新版本动作类型 - jump (URL跳转)\n      case 'jump':\n        oldValue = undefined\n        if (response.jumpConfig) {\n          // 使用新的 jumpConfig 结构\n          newValue = response.jumpConfig\n          this.handleJumpAction(response.jumpConfig)\n        } else {\n          // 向后兼容：从旧字段提取数据\n          const legacyUrl = response.value as string\n          const legacyTarget = response.target || '_self'\n          newValue = { jumpType: 'external', url: legacyUrl, target: legacyTarget }\n          this.handleNavigateToUrl(response)\n        }\n        break\n\n      // 🔥 新版本动作类型 - modify (修改组件属性)\n      case 'modify':\n        oldValue = currentState\n        if (response.modifyConfig) {\n          // 使用新的 modifyConfig 结构\n          newValue = response.modifyConfig\n          this.handleModifyAction(componentId, response.modifyConfig)\n        } else {\n          // 向后兼容：从旧字段提取数据\n          newValue = response.value\n          if (response.targetComponentId) {\n            this.updateTargetComponentData(response.targetComponentId, response)\n          } else {\n            this.updateComponentState(componentId, response.value)\n          }\n        }\n        break\n\n      // 🔥 保留旧版本动作类型以支持向后兼容\n      case 'navigateToUrl':\n        this.handleNavigateToUrl(response)\n        oldValue = undefined\n        newValue = response.value\n        break\n\n      case 'updateComponentData':\n        oldValue = currentState\n        newValue = response.value\n        // 对于跨组件数据更新，需要找到目标组件\n        if (response.targetComponentId) {\n          this.updateTargetComponentData(response.targetComponentId, response)\n        } else {\n          this.updateComponentState(componentId, response.value)\n        }\n        break\n\n      case 'flashColor':\n        this.handleFlashColor(componentId, response.value)\n        oldValue = currentState.backgroundColor\n        newValue = response.value\n        break\n\n      case 'conditionalStyle':\n        oldValue = currentState\n        newValue = response.value\n        this.applyConditionalStyle(componentId, response.value)\n        break\n\n      case 'callFunction':\n        this.handleCallFunction(componentId, response.value)\n        oldValue = undefined\n        newValue = response.value\n        break\n\n      case 'custom':\n        oldValue = currentState\n        newValue = response.value\n        // 自定义动作，直接更新状态\n        if (typeof response.value === 'object') {\n          this.updateComponentState(componentId, response.value)\n        }\n        break\n\n      default:\n        throw new Error(`不支持的交互动作: ${response.action}`)\n    }\n\n    return {\n      success: true,\n      componentId,\n      action: response.action,\n      oldValue,\n      newValue\n    }\n  }\n\n  /**\n   * 更新组件状态\n   */\n  private updateComponentState(componentId: string, updates: Partial<ComponentInteractionState>): void {\n    const currentState = this.componentStates.get(componentId) || {}\n    const newState = { ...currentState, ...updates }\n    this.componentStates.set(componentId, newState)\n\n    // 🔥 通知目标组件状态变化\n    this.notifyComponentStateChange(componentId, updates, newState)\n  }\n\n  /**\n   * 通知组件状态变化\n   */\n  private notifyComponentStateChange(\n    componentId: string,\n    updates: Partial<ComponentInteractionState>,\n    fullState: ComponentInteractionState\n  ): void {\n    // 尝试通过DOM事件通知组件\n    const targetElement = document.querySelector(`[data-component-id=\"${componentId}\"]`)\n\n    if (targetElement) {\n      const customEvent = new CustomEvent('componentStateUpdate', {\n        detail: {\n          componentId,\n          updates,\n          fullState\n        },\n        bubbles: true\n      })\n\n      targetElement.dispatchEvent(customEvent)\n    }\n  }\n\n  /**\n   * 🔥 新增：通知组件属性更新 - 支持 settingConfig 属性绑定\n   * 用于跨组件属性绑定，将一个组件的属性变更传递给另一个组件\n   */\n  notifyPropertyUpdate(componentId: string, propertyPath: string, newValue: any, oldValue?: any): void {\n    // 🔥 新增：触发HTTP数据源刷新\n    this.triggerHttpRefreshForPropertyChange(componentId, propertyPath, newValue, oldValue)\n\n    // 通过 DOM 事件通知组件属性更新\n    const targetElement = document.querySelector(`[data-component-id=\"${componentId}\"]`)\n\n    if (targetElement) {\n      const propertyUpdateEvent = new CustomEvent('componentPropertyUpdate', {\n        detail: {\n          componentId,\n          propertyPath,\n          value: newValue,\n          oldValue,\n          timestamp: Date.now()\n        },\n        bubbles: true\n      })\n\n      targetElement.dispatchEvent(propertyUpdateEvent)\n    }\n    // 同时触发交互系统的 dataChange 事件\n    this.triggerEvent(componentId, 'dataChange', {\n      property: propertyPath,\n      newValue,\n      oldValue,\n      timestamp: Date.now()\n    })\n  }\n\n  /**\n   * 🔥 新增：批量属性更新\n   * 一次性更新组件的多个属性\n   */\n  batchPropertyUpdate(\n    componentId: string,\n    propertyUpdates: Array<{\n      propertyPath: string\n      newValue: any\n      oldValue?: any\n    }>\n  ): void {\n    const targetElement = document.querySelector(`[data-component-id=\"${componentId}\"]`)\n\n    if (targetElement) {\n      // 发送批量更新事件\n      const batchUpdateEvent = new CustomEvent('componentBatchPropertyUpdate', {\n        detail: {\n          componentId,\n          updates: propertyUpdates,\n          timestamp: Date.now()\n        },\n        bubbles: true\n      })\n\n      targetElement.dispatchEvent(batchUpdateEvent)\n\n      // 同时发送单个更新事件（向后兼容）\n      propertyUpdates.forEach(update => {\n        this.notifyPropertyUpdate(componentId, update.propertyPath, update.newValue, update.oldValue)\n      })\n    }\n  }\n\n  /**\n   * 获取组件的交互状态\n   */\n  getComponentState(componentId: string): ComponentInteractionState | undefined {\n    return this.componentStates.get(componentId)\n  }\n\n  /**\n   * 重置组件的交互状态\n   */\n  resetComponentState(componentId: string): void {\n    this.componentStates.set(componentId, {})\n  }\n\n  /**\n   * 批量更新组件的交互配置\n   */\n  updateComponentConfigs(componentId: string, configs: InteractionConfig[]): void {\n    this.componentConfigs.set(componentId, configs)\n  }\n\n  /**\n   * 添加事件监听器\n   */\n  addEventListener(componentId: string, callback: (data: any) => void): void {\n    if (!this.eventListeners.has(componentId)) {\n      this.eventListeners.set(componentId, new Set())\n    }\n    this.eventListeners.get(componentId)!.add(callback)\n  }\n\n  /**\n   * 移除事件监听器\n   */\n  removeEventListener(componentId: string, callback: (data: any) => void): void {\n    const listeners = this.eventListeners.get(componentId)\n    if (listeners) {\n      listeners.delete(callback)\n    }\n  }\n\n  /**\n   * 触发事件监听器\n   */\n  private triggerEventListeners(componentId: string, event: InteractionEventType, data?: any): void {\n    const listeners = this.eventListeners.get(componentId)\n    if (listeners) {\n      listeners.forEach(callback => {\n        try {\n          callback({ event, data, componentId })\n        } catch (error) {}\n      })\n    }\n  }\n\n  /**\n   * 获取所有已注册的组件ID\n   */\n  getRegisteredComponents(): string[] {\n    return Array.from(this.componentConfigs.keys())\n  }\n\n  /**\n   * 获取组件的交互配置\n   */\n  getComponentConfigs(componentId: string): InteractionConfig[] | undefined {\n    return this.componentConfigs.get(componentId)\n  }\n\n  /**\n   * 检查组件是否已注册\n   */\n  hasComponent(componentId: string): boolean {\n    return this.componentConfigs.has(componentId)\n  }\n\n  // ===== 新增的动作处理方法 =====\n\n  // ===== 新版本动作处理方法 =====\n\n  /**\n   * 处理跳转动作 (新版本)\n   */\n  private handleJumpAction(jumpConfig: JumpConfig): void {\n    if (jumpConfig.jumpType === 'external') {\n      // 外部URL跳转\n      if (!jumpConfig.url) {\n        return\n      }\n      this.navigateToUrl(jumpConfig.url, jumpConfig.target || '_self', jumpConfig.windowFeatures)\n    } else if (jumpConfig.jumpType === 'internal') {\n      // 内部菜单跳转\n      if (!jumpConfig.internalPath) {\n        return\n      }\n      this.navigateToUrl(jumpConfig.internalPath, jumpConfig.target || '_self')\n    }\n  }\n\n  /**\n   * 处理修改动作 (新版本)\n   */\n  private handleModifyAction(sourceComponentId: string, modifyConfig: ModifyConfig): void {\n    const { targetComponentId, targetProperty, updateValue, updateMode = 'replace' } = modifyConfig\n\n    if (!this.hasComponent(targetComponentId)) {\n      return\n    }\n\n    const currentState = this.getComponentState(targetComponentId) || {}\n    let finalValue = updateValue\n\n    // 根据更新模式处理值\n    const currentValue = currentState[targetProperty]\n    switch (updateMode) {\n      case 'append':\n        if (currentValue !== undefined) {\n          finalValue = String(currentValue) + String(updateValue)\n        }\n        break\n      case 'prepend':\n        if (currentValue !== undefined) {\n          finalValue = String(updateValue) + String(currentValue)\n        }\n        break\n      case 'replace':\n      default:\n        // 直接使用新值\n        break\n    }\n\n    // 更新目标组件状态\n    const updateData: Partial<ComponentInteractionState> = {\n      [targetProperty]: finalValue\n    }\n\n    this.updateComponentState(targetComponentId, updateData)\n  }\n\n  /**\n   * 通用URL导航方法\n   */\n  private navigateToUrl(url: string, target: string = '_self', windowFeatures?: string): void {\n    try {\n      if (target === '_self') {\n        // 当前窗口跳转\n        window.location.href = url\n      } else if (target === '_blank') {\n        // 新窗口打开，支持窗口特性配置\n        if (windowFeatures) {\n          window.open(url, target, windowFeatures)\n        } else {\n          window.open(url, target)\n        }\n      } else {\n        // 其他目标(_parent, _top等)\n        window.open(url, target)\n      }\n    } catch (error) {\n      // 如果跳转失败，尝试简单的window.open\n      try {\n        window.open(url, '_blank')\n      } catch (fallbackError) {}\n    }\n  }\n\n  // ===== 旧版本动作处理方法 (保留兼容性) =====\n\n  /**\n   * 处理URL跳转 (旧版本)\n   */\n  private handleNavigateToUrl(response: InteractionResponse): void {\n    const url = response.value as string\n    const target = (response.target as string) || '_self'\n    const windowFeatures = (response.windowFeatures as string) || ''\n\n    if (!url) {\n      return\n    }\n\n    try {\n      if (target === '_self') {\n        // 当前窗口跳转\n        window.location.href = url\n      } else if (target === '_blank') {\n        // 新窗口打开，支持窗口特性配置\n        if (windowFeatures) {\n          window.open(url, target, windowFeatures)\n        } else {\n          window.open(url, target)\n        }\n      } else {\n        // 其他目标(_parent, _top等)\n        window.open(url, target)\n      }\n    } catch (error) {\n      // 如果跳转失败，尝试简单的window.open\n      try {\n        window.open(url, '_blank')\n      } catch (fallbackError) {}\n    }\n  }\n\n  /**\n   * 处理闪烁颜色效果\n   */\n  private handleFlashColor(componentId: string, config: FlashConfig | string): void {\n    let flashConfig: FlashConfig\n\n    if (typeof config === 'string') {\n      flashConfig = {\n        color: config,\n        duration: 1000,\n        times: 3\n      }\n    } else {\n      flashConfig = config\n    }\n\n    const currentState = this.getComponentState(componentId)\n    const originalColor = currentState?.backgroundColor\n\n    let currentFlash = 0\n    const interval = setInterval(\n      () => {\n        // 切换颜色\n        const isFlashOn = currentFlash % 2 === 0\n        this.updateComponentState(componentId, {\n          backgroundColor: isFlashOn ? flashConfig.color : originalColor\n        })\n\n        currentFlash++\n        if (currentFlash >= flashConfig.times * 2) {\n          clearInterval(interval)\n          // 恢复原始颜色\n          this.updateComponentState(componentId, {\n            backgroundColor: originalColor\n          })\n        }\n      },\n      flashConfig.duration / (flashConfig.times * 2)\n    )\n  }\n\n  /**\n   * 更新目标组件数据\n   */\n  private updateTargetComponentData(targetComponentId: string, response: InteractionResponse): void {\n    if (!this.hasComponent(targetComponentId)) {\n      return\n    }\n\n    // 使用新的InteractionResponse格式\n    if (response.targetProperty && response.updateValue !== undefined) {\n      const currentState = this.getComponentState(targetComponentId) || {}\n      let newValue = response.updateValue\n\n      // 根据更新模式处理值\n      const updateMode = response.updateMode || 'replace'\n      const targetProperty = response.targetProperty\n      const currentValue = currentState[targetProperty]\n\n      switch (updateMode) {\n        case 'append':\n          if (currentValue !== undefined) {\n            newValue = String(currentValue) + String(newValue)\n          }\n          break\n        case 'prepend':\n          if (currentValue !== undefined) {\n            newValue = String(newValue) + String(currentValue)\n          }\n          break\n        case 'replace':\n        default:\n          // 直接使用新值\n          break\n      }\n\n      // 🔥 增强：特殊处理visibility属性确保正确应用\n      const updateData: Partial<ComponentInteractionState> = {\n        [targetProperty]: newValue\n      }\n\n      // 如果是可见性属性，确保直接应用到CSS样式\n      if (targetProperty === 'visibility') {\n        updateData.visibility = newValue as string\n      }\n\n      // 更新目标组件状态\n      this.updateComponentState(targetComponentId, updateData)\n    } else {\n      // 如果没有指定targetProperty，直接更新整个状态\n      this.updateComponentState(targetComponentId, response.value)\n    }\n  }\n\n  /**\n   * 应用条件样式\n   */\n  private applyConditionalStyle(componentId: string, styleConfig: any): void {\n    if (typeof styleConfig === 'object') {\n      this.updateComponentState(componentId, styleConfig)\n    }\n  }\n\n  /**\n   * 调用函数\n   */\n  private handleCallFunction(componentId: string, functionConfig: any): void {\n    try {\n      if (typeof functionConfig === 'string') {\n        // 如果是字符串，尝试作为函数名调用\n        if (window[functionConfig] && typeof window[functionConfig] === 'function') {\n          window[functionConfig](componentId)\n        }\n      } else if (typeof functionConfig === 'function') {\n        // 直接调用函数\n        functionConfig(componentId)\n      } else if (functionConfig && typeof functionConfig.name === 'string') {\n        // 配置对象，包含函数名和参数\n        const funcName = functionConfig.name\n        const args = functionConfig.args || []\n        if (window[funcName] && typeof window[funcName] === 'function') {\n          window[funcName](componentId, ...args)\n        }\n      }\n    } catch (error) {}\n  }\n\n  // ===== 条件判断方法 =====\n\n  /**\n   * 🔥 检查 dataChange 事件的条件\n   * 专门处理属性变化事件的条件判断\n   */\n  private checkDataChangeCondition(config: InteractionConfig, eventData: any): boolean {\n    const condition = config.condition\n    if (!condition) return true // 没有条件则直接执行\n\n    // 检查是否为指定属性的变化\n    if (condition.property && eventData?.property !== condition.property) {\n      return false\n    }\n\n    // 使用新值进行条件判断\n    const valueToCheck = eventData?.newValue\n\n    // 根据条件类型进行判断\n    switch (condition.operator) {\n      case 'equals':\n        const result = String(valueToCheck) === String(condition.value)\n        return result\n\n      case 'notEquals':\n        return String(valueToCheck) !== String(condition.value)\n\n      case 'greaterThan':\n        return Number(valueToCheck) > Number(condition.value)\n\n      case 'greaterThanOrEqual':\n        return Number(valueToCheck) >= Number(condition.value)\n\n      case 'lessThan':\n        return Number(valueToCheck) < Number(condition.value)\n\n      case 'lessThanOrEqual':\n        return Number(valueToCheck) <= Number(condition.value)\n\n      case 'contains':\n        return String(valueToCheck).includes(String(condition.value))\n\n      case 'startsWith':\n        return String(valueToCheck).startsWith(String(condition.value))\n\n      case 'endsWith':\n        return String(valueToCheck).endsWith(String(condition.value))\n\n      default:\n        return false\n    }\n  }\n\n  /**\n   * 评估条件是否满足\n   */\n  evaluateCondition(condition: ConditionConfig, data: any): boolean {\n    if (!condition || !data) return false\n\n    switch (condition.type) {\n      case 'comparison':\n        return this.evaluateComparison(condition, data)\n      case 'range':\n        return this.evaluateRange(condition, data)\n      case 'expression':\n        return this.evaluateExpression(condition, data)\n      default:\n        return false\n    }\n  }\n\n  /**\n   * 评估比较条件\n   */\n  private evaluateComparison(condition: ConditionConfig, data: any): boolean {\n    const value = condition.field ? data[condition.field] : data\n    const compareValue = condition.value\n\n    switch (condition.operator) {\n      case 'equals':\n        return value == compareValue\n      case 'notEquals':\n        return value != compareValue\n      case 'greaterThan':\n        return Number(value) > Number(compareValue)\n      case 'greaterThanOrEqual':\n        return Number(value) >= Number(compareValue)\n      case 'lessThan':\n        return Number(value) < Number(compareValue)\n      case 'lessThanOrEqual':\n        return Number(value) <= Number(compareValue)\n      case 'contains':\n        return String(value).includes(String(compareValue))\n      case 'startsWith':\n        return String(value).startsWith(String(compareValue))\n      case 'endsWith':\n        return String(value).endsWith(String(compareValue))\n      default:\n        return false\n    }\n  }\n\n  /**\n   * 评估范围条件\n   */\n  private evaluateRange(condition: ConditionConfig, data: any): boolean {\n    const value = condition.field ? data[condition.field] : data\n    const numValue = Number(value)\n    const min = Number(condition.minValue)\n    const max = Number(condition.maxValue)\n\n    return numValue >= min && numValue <= max\n  }\n\n  /**\n   * 评估表达式条件\n   */\n  private evaluateExpression(condition: ConditionConfig, data: any): boolean {\n    if (!condition.expression) return false\n\n    try {\n      // 创建一个安全的评估环境\n      const expression = condition.expression.replace(/\\bvalue\\b/g, 'data')\n      // 简单的表达式评估，实际项目中可能需要更安全的方式\n      return new Function('data', `return ${expression}`)(data)\n    } catch (error) {\n      return false\n    }\n  }\n\n  /**\n   * 触发条件检查和执行\n   */\n  checkAndTriggerConditional(componentId: string, data: any): void {\n    const configs = this.componentConfigs.get(componentId)\n    if (!configs) return\n\n    // 过滤条件触发和数据变化事件的配置\n    const conditionalConfigs = configs.filter(\n      config =>\n        (config.event === 'conditional' || config.event === 'dataChange') &&\n        config.enabled !== false &&\n        config.condition\n    )\n\n    for (const config of conditionalConfigs) {\n      if (config.condition && this.evaluateCondition(config.condition, data)) {\n        // 条件满足，执行响应动作\n        for (const response of config.responses) {\n          try {\n            this.executeResponse(componentId, response)\n          } catch (error) {}\n        }\n      }\n    }\n  }\n\n  /**\n   * 监听数据变化并触发条件检查\n   */\n  onDataChange(componentId: string, dataPath: string, newValue: any): void {\n    // 检查是否有数据变化监听配置\n    const configs = this.componentConfigs.get(componentId)\n    if (!configs) return\n\n    const dataChangeConfigs = configs.filter(\n      config => config.event === 'dataChange' && config.dataPath === dataPath && config.enabled !== false\n    )\n\n    for (const config of dataChangeConfigs) {\n      if (config.condition) {\n        // 有条件的数据变化\n        if (this.evaluateCondition(config.condition, newValue)) {\n          this.executeConfigResponses(componentId, config)\n        }\n      } else {\n        // 无条件的数据变化\n        this.executeConfigResponses(componentId, config)\n      }\n    }\n  }\n\n  /**\n   * 执行配置的所有响应动作\n   */\n  private executeConfigResponses(componentId: string, config: InteractionConfig): void {\n    for (const response of config.responses) {\n      try {\n        this.executeResponse(componentId, response)\n      } catch (error) {}\n    }\n  }\n\n  // ===== 🔥 新增：属性绑定和参数解析支持 =====\n\n  /**\n   * 解析属性绑定表达式\n   * 支持格式：componentId.customize.title 或 componentId.data.value\n   */\n  resolvePropertyBinding(bindingExpression: string): any {\n    if (!bindingExpression || typeof bindingExpression !== 'string') {\n      return undefined\n    }\n\n    // 解析绑定表达式格式：componentId.propertyPath\n    const parts = bindingExpression.split('.')\n    if (parts.length < 2) {\n      return undefined\n    }\n\n    const componentId = parts[0]\n    const propertyPath = parts.slice(1).join('.')\n\n    // 获取组件状态\n    const componentState = this.getComponentState(componentId)\n    if (!componentState) {\n      return undefined\n    }\n\n    // 解析嵌套属性路径\n    const value = this.getNestedProperty(componentState, propertyPath)\n\n    return value\n  }\n\n  /**\n   * 批量解析属性绑定\n   * 用于 HTTP 参数中包含多个绑定表达式的情况\n   */\n  resolveMultipleBindings(bindingMap: Record<string, string>): Record<string, any> {\n    const resolvedValues: Record<string, any> = {}\n\n    for (const [key, bindingExpression] of Object.entries(bindingMap)) {\n      resolvedValues[key] = this.resolvePropertyBinding(bindingExpression)\n    }\n    return resolvedValues\n  }\n\n  /**\n   * 处理动态参数解析\n   * 用于 HttpConfigForm 中的参数绑定\n   */\n  resolveDynamicParameter(parameterConfig: any): any {\n    if (!parameterConfig) return undefined\n\n    // 如果是简单的字符串绑定表达式\n    if (typeof parameterConfig === 'string') {\n      return this.resolvePropertyBinding(parameterConfig)\n    }\n\n    // 如果是复杂的参数配置对象\n    if (\n      parameterConfig.type === 'component-property-binding' &&\n      parameterConfig.componentId &&\n      parameterConfig.propertyPath\n    ) {\n      const bindingExpression = `${parameterConfig.componentId}.${parameterConfig.propertyPath}`\n      return this.resolvePropertyBinding(bindingExpression)\n    }\n\n    // 如果是静态值\n    if (parameterConfig.type === 'static' || parameterConfig.value !== undefined) {\n      return parameterConfig.value\n    }\n    return undefined\n  }\n\n  /**\n   * 🔥 新增：设置组件属性值\n   * 用于从外部（如 HTTP 响应）更新组件属性\n   */\n  setComponentProperty(componentId: string, propertyPath: string, newValue: any): boolean {\n    const currentState = this.getComponentState(componentId) || {}\n    const oldValue = this.getNestedProperty(currentState, propertyPath)\n\n    // 更新组件状态\n    const updatedState = this.setNestedProperty(currentState, propertyPath, newValue)\n    this.componentStates.set(componentId, updatedState)\n\n    // 通知组件属性更新\n    this.notifyPropertyUpdate(componentId, propertyPath, newValue, oldValue)\n\n    return true\n  }\n\n  /**\n   * 获取嵌套对象属性\n   */\n  private getNestedProperty(obj: any, path: string): any {\n    return path.split('.').reduce((current, key) => {\n      return current && typeof current === 'object' ? current[key] : undefined\n    }, obj)\n  }\n\n  /**\n   * 设置嵌套对象属性\n   */\n  private setNestedProperty(obj: any, path: string, value: any): any {\n    const result = { ...obj }\n    const keys = path.split('.')\n    let current = result\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i]\n      if (!(key in current) || typeof current[key] !== 'object' || current[key] === null) {\n        current[key] = {}\n      } else {\n        current[key] = { ...current[key] }\n      }\n      current = current[key]\n    }\n\n    current[keys[keys.length - 1]] = value\n    return result\n  }\n\n  /**\n   * 🔥 新增：获取所有组件的当前属性状态\n   * 用于调试和监控\n   */\n  getAllComponentProperties(): Record<string, ComponentInteractionState> {\n    const allProperties: Record<string, ComponentInteractionState> = {}\n\n    for (const [componentId, state] of this.componentStates.entries()) {\n      allProperties[componentId] = { ...state }\n    }\n\n    return allProperties\n  }\n\n  /**\n   * 🔥 新增：注册HTTP数据源映射\n   * 用于追踪哪些组件有HTTP数据源需要响应属性变化\n   */\n  registerHttpDataSource(componentId: string, componentType: string, config: any): void {\n    const mappingKey = `http-${componentId}`\n    this.httpDataSourceMappings.set(mappingKey, { componentId, componentType, config })\n  }\n\n  /**\n   * 🔥 新增：移除HTTP数据源映射\n   */\n  unregisterHttpDataSource(componentId: string): void {\n    const mappingKey = `http-${componentId}`\n    this.httpDataSourceMappings.delete(mappingKey)\n  }\n\n  /**\n   * 🔥 新增：触发HTTP数据源刷新（属性变化时）\n   * 这是解决组件属性绑定后HTTP不更新的核心方法\n   */\n  private async triggerHttpRefreshForPropertyChange(\n    componentId: string,\n    propertyPath: string,\n    newValue: any,\n    oldValue?: any\n  ): Promise<void> {\n    try {\n      // 🔥 关键修复：查找所有可能受到这个属性变化影响的HTTP数据源\n      const affectedDataSources: string[] = []\n\n      // 1. 检查是否有直接使用这个组件属性的HTTP配置\n      for (const [mappingKey, mapping] of this.httpDataSourceMappings.entries()) {\n        // 检查HTTP配置中是否包含对这个组件属性的绑定引用\n        if (this.configContainsPropertyBinding(mapping.config, componentId, propertyPath)) {\n          affectedDataSources.push(mapping.componentId)\n        }\n      }\n\n      // 2. 如果没有发现直接绑定，尝试刷新所有HTTP数据源（作为后备方案）\n      if (affectedDataSources.length === 0) {\n        for (const [mappingKey, mapping] of this.httpDataSourceMappings.entries()) {\n          affectedDataSources.push(mapping.componentId)\n        }\n      }\n\n      // 3. 刷新所有受影响的HTTP数据源\n      for (const targetComponentId of affectedDataSources) {\n        const mapping = this.httpDataSourceMappings.get(`http-${targetComponentId}`)\n        if (mapping) {\n          try {\n            // 使用VisualEditorBridge刷新数据源\n            const result = await this.visualEditorBridge.updateComponentExecutor(\n              mapping.componentId,\n              mapping.componentType,\n              mapping.config\n            )\n          } catch (error) {}\n        }\n      }\n    } catch (error) {}\n  }\n\n  /**\n   * 🔥 新增：检查配置是否包含特定的属性绑定\n   * 用于判断HTTP配置是否依赖某个组件的属性\n   */\n  private configContainsPropertyBinding(config: any, componentId: string, propertyPath: string): boolean {\n    if (!config) return false\n\n    const bindingPath = `${componentId}.${propertyPath}`\n    const configStr = JSON.stringify(config)\n\n    // 检查配置中是否包含绑定路径\n    const hasBinding = configStr.includes(bindingPath)\n\n    return hasBinding\n  }\n\n  /**\n   * 🔥 新增：监听组件属性变化\n   * 用于实现属性绑定的响应式更新\n   */\n  watchComponentProperty(\n    componentId: string,\n    propertyPath: string,\n    callback: (newValue: any, oldValue: any) => void\n  ): () => void {\n    const watchKey = `${componentId}.${propertyPath}`\n\n    // 创建属性变化监听器\n    const propertyWatcher = (data: any) => {\n      if (data.event === 'dataChange' && data.data?.property === propertyPath) {\n        callback(data.data.newValue, data.data.oldValue)\n      }\n    }\n\n    this.addEventListener(componentId, propertyWatcher)\n\n    // 返回取消监听的函数\n    return () => {\n      this.removeEventListener(componentId, propertyWatcher)\n    }\n  }\n}\n\n// 创建单例实例\nexport const interactionManager = new InteractionManager()\n\n// 导出类型\nexport type { InteractionManager }\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\interaction-types.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":105,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'configs' is defined but never used.","line":105,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":108,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":111,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":111,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":64},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":111,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":76},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":114,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":117,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'componentId' is defined but never used.","line":120,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'configs' is defined but never used.","line":120,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件交互系统类型定义\n * 定义组件如何响应外部交互的类型系统\n */\n\n// 交互事件类型 - 简化为3种核心事件\nexport type InteractionEventType =\n  | 'click' // 点击事件\n  | 'hover' // 悬停事件\n  | 'dataChange' // 数据变化事件（属性改变时）\n\n// 交互响应动作类型 - 简化为2种核心动作\nexport type InteractionActionType =\n  | 'jump' // URL跳转（包含外部URL和内部菜单）\n  | 'modify' // 修改目标组件属性\n\n// 🔥 为兼容性保留的映射类型（内部使用）\nexport type LegacyInteractionActionType =\n  | 'navigateToUrl' // 映射到 jump\n  | 'updateComponentData' // 映射到 modify\n\n// 跳转类型枚举\nexport type JumpType = 'external' | 'internal'\n\n// URL跳转配置\nexport interface JumpConfig {\n  jumpType: JumpType // 跳转类型：external(外部URL) | internal(内部菜单)\n  url?: string // 外部URL地址\n  internalPath?: string // 内部菜单路径\n  target?: '_self' | '_blank' | '_parent' | '_top' // 跳转目标\n  windowFeatures?: string // 新窗口特性配置\n}\n\n// 属性修改配置\nexport interface ModifyConfig {\n  targetComponentId: string // 目标组件ID\n  targetProperty: string // 目标属性名\n  updateValue: any // 更新值\n  updateMode?: 'replace' | 'append' | 'prepend' // 更新模式\n}\n\n// 交互响应配置 - 简化版\nexport interface InteractionResponse {\n  action: InteractionActionType\n\n  // 根据动作类型的具体配置\n  jumpConfig?: JumpConfig // jump动作的配置\n  modifyConfig?: ModifyConfig // modify动作的配置\n\n  // 通用属性\n  delay?: number // 延迟时间（毫秒）\n\n  // 🔥 为兼容性保留的旧字段（已废弃，仅供内部映射使用）\n  value?: any\n  target?: string\n  windowFeatures?: string\n  targetComponentId?: string\n  targetProperty?: string\n  updateValue?: any\n  updateMode?: 'replace' | 'append' | 'prepend'\n}\n\n// 交互触发类型 - 区分是节点触发还是组件内部触发\nexport type InteractionTriggerType =\n  | 'node' // 节点级别触发（整个节点响应事件）\n  | 'component' // 组件内部触发（组件内部元素响应事件）\n\n// 简化的交互配置\nexport interface InteractionConfig {\n  event: InteractionEventType\n  responses: InteractionResponse[]\n  enabled?: boolean // 是否启用此交互\n  priority?: number // 优先级，数字越大优先级越高\n  name?: string // 交互配置名称\n\n  // dataChange事件专用配置\n  watchedProperty?: string // 被监听的组件属性名（仅dataChange事件使用）\n  condition?: DataChangeCondition // 条件配置（仅dataChange事件使用）\n}\n\n// 数据变化条件 - 简化版\nexport interface DataChangeCondition {\n  property?: string // 属性名\n  operator: 'equals' | 'notEquals' | 'greaterThan' | 'lessThan' | 'contains'\n  value: any // 比较值\n}\n\n// 组件交互状态\nexport interface ComponentInteractionState {\n  backgroundColor?: string\n  textColor?: string\n  borderColor?: string\n  width?: string | number\n  height?: string | number\n  opacity?: number\n  transform?: string\n  visibility?: 'visible' | 'hidden'\n  content?: any\n  isAnimating?: boolean\n}\n\n// 交互管理器接口\nexport interface IInteractionManager {\n  // 注册组件的交互配置\n  registerComponent(componentId: string, configs: InteractionResponse[]): void\n\n  // 移除组件的交互配置\n  unregisterComponent(componentId: string): void\n\n  // 触发交互事件\n  triggerEvent(componentId: string, event: InteractionEventType, data?: any): void\n\n  // 获取组件的交互状态\n  getComponentState(componentId: string): ComponentInteractionState | undefined\n\n  // 重置组件的交互状态\n  resetComponentState(componentId: string): void\n\n  // 批量更新多个组件的交互配置\n  updateComponentConfigs(componentId: string, configs: InteractionResponse[]): void\n}\n\n// 交互事件数据\nexport interface InteractionEventData {\n  source?: string // 事件来源\n  timestamp: Date // 事件时间戳\n  data?: any // 额外数据\n  position?: { x: number; y: number } // 事件位置\n}\n\n// 交互响应结果\nexport interface InteractionResponseResult {\n  success: boolean\n  componentId: string\n  action: InteractionActionType\n  oldValue?: any\n  newValue?: any\n  error?: string\n}\n\n// 条件配置\nexport interface ConditionConfig {\n  type: 'comparison' | 'range' | 'expression' // 条件类型\n  field?: string // 监听的字段名\n  operator?: ComparisonOperator // 比较运算符\n  value?: any // 比较值\n  minValue?: any // 范围条件的最小值\n  maxValue?: any // 范围条件的最大值\n  expression?: string // 自定义表达式\n}\n\n// 比较运算符\nexport type ComparisonOperator =\n  | 'equals' // 等于 (==)\n  | 'notEquals' // 不等于 (!=)\n  | 'greaterThan' // 大于 (>)\n  | 'greaterThanOrEqual' // 大于等于 (>=)\n  | 'lessThan' // 小于 (<)\n  | 'lessThanOrEqual' // 小于等于 (<=)\n  | 'contains' // 包含\n  | 'startsWith' // 以...开始\n  | 'endsWith' // 以...结束\n\n// 扩展的交互响应配置，支持跨组件动作\nexport interface CrossComponentResponse extends InteractionResponse {\n  targetComponentId: string // 目标组件ID\n  targetProperty?: string // 目标属性名（用于数据修改）\n}\n\n// 闪烁配置\nexport interface FlashConfig {\n  color: string // 闪烁颜色\n  duration: number // 持续时间\n  times: number // 闪烁次数\n}\n\n// URL跳转配置\nexport interface NavigationConfig {\n  url: string // 目标URL\n  target?: '_blank' | '_self' | '_parent' | '_top' // 打开方式\n}\n\n// 数据更新配置\nexport interface DataUpdateConfig {\n  targetProperty: string // 目标属性\n  updateValue: any // 更新值\n  updateMode?: 'replace' | 'append' | 'prepend' // 更新模式\n}\n\n// ============ 组件交互配置类型接口 ============\n\n// 组件交互能力声明\nexport interface ComponentInteractionCapability {\n  /** 组件支持的事件类型 */\n  supportedEvents: InteractionEventType[]\n\n  /** 组件支持的动作类型 */\n  supportedActions: InteractionActionType[]\n\n  /** 默认交互权限 */\n  defaultPermissions: {\n    allowExternalControl: boolean\n    requirePermissionCheck: boolean\n  }\n\n  /** 可被其他组件监听的属性列表 */\n  listenableProperties: string[]\n}\n\n// 交互配置示例\nexport interface InteractionExample {\n  /** 示例名称 */\n  name: string\n\n  /** 示例描述 */\n  description: string\n\n  /** 示例场景 */\n  scenario: 'click-jump' | 'hover-modify' | 'data-change-action'\n\n  /** 示例配置 */\n  config: InteractionConfig\n\n  /** 适用组件类型 */\n  applicableComponents?: string[]\n}\n\n// 组件完整交互定义（用于组件index.ts）\nexport interface ComponentInteractionDefinition {\n  /** 交互能力声明 */\n  capability: ComponentInteractionCapability\n\n  /** 交互配置示例 */\n  examples: InteractionExample[]\n\n  /** 属性暴露配置 */\n  propertyExposure: {\n    componentType: string\n    componentName: string\n    listenableProperties: Array<{\n      name: string\n      label: string\n      type: 'string' | 'number' | 'boolean' | 'object'\n      description?: string\n      group?: string\n    }>\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\mixins\\InteractionCapable.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'InteractionConfig' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InteractionConfig' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'InteractionEmits' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'InteractionEmits' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'event' is defined but never used.","line":44,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'args' is defined but never used.","line":44,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":29},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":155,"column":34,"nodeType":"BlockStatement","messageId":"unexpected","endLine":156,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4235,4240],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件交互能力混入\n * 为所有Card2组件提供统一的交互接口和能力\n */\n\nimport { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue'\nimport { interactionManager } from '../interaction-manager'\nimport type {\n  InteractionConfig,\n  InteractionEventType,\n  InteractionResponseResult,\n  ComponentInteractionState\n} from '../interaction-types'\nimport type {\n  InteractionProps,\n  InteractionEmits,\n  InteractionPermissionCheck,\n  InteractionContext,\n  InteractionCapabilityConfig\n} from '../../types/interaction-component'\n\n/**\n * 默认交互能力配置\n */\nconst DEFAULT_CONFIG: InteractionCapabilityConfig = {\n  enabled: true,\n  defaultPermissions: {\n    allowExternalControl: true,\n    supportedEvents: ['click', 'hover', 'dataChange', 'conditional']\n  },\n  enableDebug: false,\n  performance: {\n    debounceTime: 50,\n    maxConcurrentInteractions: 5\n  }\n}\n\n/**\n * 创建交互能力混入\n * @param config 交互能力配置\n */\nexport function useInteractionCapable(\n  props: InteractionProps,\n  emit: (event: any, ...args: any[]) => void,\n  config: Partial<InteractionCapabilityConfig> = {}\n) {\n  // 合并配置\n  const finalConfig = { ...DEFAULT_CONFIG, ...config }\n\n  // 响应式状态\n  const isInteractionEnabled = ref(finalConfig.enabled)\n  const currentInteractionState = ref<ComponentInteractionState>({})\n  const activeInteractions = ref(new Set<string>())\n  const interactionHistory = ref<InteractionContext[]>([])\n\n  // 计算属性\n  const componentId = computed(() => props.componentId || `component-${Date.now()}`)\n\n  const allowExternalControl = computed(() => {\n    return props.allowExternalControl ?? finalConfig.defaultPermissions.allowExternalControl\n  })\n\n  const supportedEvents = computed(() => {\n    const defaultEvents = finalConfig.defaultPermissions.supportedEvents\n    const permissionEvents = props.interactionPermissions?.allowedEvents\n\n    // 🔥 修复：如果有权限配置，合并默认事件和权限事件，确保包含核心事件\n    if (permissionEvents) {\n      const coreEvents = ['click', 'hover', 'dataChange', 'conditional']\n      return [...new Set([...defaultEvents, ...permissionEvents, ...coreEvents])]\n    }\n\n    return defaultEvents\n  })\n\n  const interactionConfigs = computed(() => props.interactionConfigs || [])\n\n  const hasActiveInteractions = computed(() => activeInteractions.value.size > 0)\n\n  const interactionStatusText = computed(() => {\n    if (!isInteractionEnabled.value) return '交互已禁用'\n    if (!allowExternalControl.value) return '拒绝外部控制'\n    if (hasActiveInteractions.value) return `执行中 (${activeInteractions.value.size})`\n    return interactionConfigs.value.length > 0 ? '就绪' : '无交互配置'\n  })\n\n  /**\n   * 检查交互权限\n   */\n  const checkInteractionPermission = (\n    sourceComponentId: string | undefined,\n    eventType: InteractionEventType\n  ): InteractionPermissionCheck => {\n    // 检查是否启用交互\n    if (!isInteractionEnabled.value) {\n      return {\n        allowed: false,\n        reason: '组件交互功能已禁用',\n        code: 'EXTERNAL_CONTROL_DISABLED'\n      }\n    }\n\n    // 检查是否允许外部控制\n    if (!allowExternalControl.value && sourceComponentId) {\n      return {\n        allowed: false,\n        reason: '组件不允许外部控制',\n        code: 'EXTERNAL_CONTROL_DISABLED'\n      }\n    }\n\n    // 检查事件类型支持\n    if (!supportedEvents.value.includes(eventType)) {\n      return {\n        allowed: false,\n        reason: `组件不支持 ${eventType} 事件`,\n        code: 'EVENT_NOT_SUPPORTED'\n      }\n    }\n\n    // 检查黑名单\n    if (sourceComponentId && props.interactionPermissions?.blacklist?.includes(sourceComponentId)) {\n      return {\n        allowed: false,\n        reason: `组件 ${sourceComponentId} 在黑名单中`,\n        code: 'COMPONENT_BLACKLISTED'\n      }\n    }\n\n    // 检查白名单（如果设置了白名单）\n    if (sourceComponentId && props.interactionPermissions?.whitelist) {\n      if (!props.interactionPermissions.whitelist.includes(sourceComponentId)) {\n        return {\n          allowed: false,\n          reason: `组件 ${sourceComponentId} 不在白名单中`,\n          code: 'COMPONENT_NOT_WHITELISTED'\n        }\n      }\n    }\n\n    return { allowed: true }\n  }\n\n  /**\n   * 记录交互历史\n   */\n  const recordInteraction = (context: InteractionContext) => {\n    interactionHistory.value.unshift(context)\n\n    // 限制历史记录数量\n    if (interactionHistory.value.length > 100) {\n      interactionHistory.value = interactionHistory.value.slice(0, 100)\n    }\n\n    if (finalConfig.enableDebug) {\n    }\n  }\n\n  /**\n   * 触发交互事件\n   */\n  const triggerInteractionEvent = (\n    eventType: InteractionEventType,\n    eventData?: any,\n    sourceComponentId?: string\n  ): InteractionResponseResult[] => {\n    const context: InteractionContext = {\n      sourceComponentId,\n      targetComponentId: componentId.value,\n      eventType,\n      eventData,\n      timestamp: Date.now(),\n      isUserAction: !sourceComponentId\n    }\n\n    // 权限检查\n    const permissionCheck = checkInteractionPermission(sourceComponentId, eventType)\n\n    if (!permissionCheck.allowed) {\n      const rejectionInfo = {\n        sourceComponentId,\n        eventType,\n        reason: permissionCheck.code as any,\n        message: permissionCheck.reason || '权限检查失败'\n      }\n      recordInteraction({ ...context, eventData: { ...eventData, rejected: true, reason: rejectionInfo } })\n      emit('interaction-rejected', rejectionInfo)\n\n      return [\n        {\n          success: false,\n          componentId: componentId.value,\n          action: 'custom' as any,\n          error: permissionCheck.reason\n        }\n      ]\n    }\n\n    // 记录交互\n    recordInteraction(context)\n\n    // 发出交互事件\n    emit('interaction-event', eventType, eventData)\n\n    // 执行交互\n    const results = interactionManager.triggerEvent(componentId.value, eventType, eventData)\n\n    // 发出交互结果\n    results.forEach(result => {\n      emit('interaction-result', result)\n    })\n\n    return results\n  }\n\n  /**\n   * 处理交互状态变化\n   */\n  const handleInteractionStateChange = (newState: Partial<ComponentInteractionState>) => {\n    currentInteractionState.value = { ...currentInteractionState.value, ...newState }\n    emit('interaction-state-change', currentInteractionState.value)\n  }\n\n  /**\n   * 应用交互结果到组件状态\n   */\n  const applyInteractionResult = (result: InteractionResponseResult) => {\n    if (!result.success) return\n\n    const stateUpdate: Partial<ComponentInteractionState> = {}\n\n    // 根据动作类型更新状态\n    switch (result.action) {\n      case 'changeBackgroundColor':\n        stateUpdate.backgroundColor = result.newValue\n        break\n      case 'changeTextColor':\n        stateUpdate.textColor = result.newValue\n        break\n      case 'changeBorderColor':\n        stateUpdate.borderColor = result.newValue\n        break\n      case 'changeSize':\n        if (typeof result.newValue === 'object') {\n          stateUpdate.width = result.newValue.width\n          stateUpdate.height = result.newValue.height\n        }\n        break\n      case 'changeOpacity':\n        stateUpdate.opacity = result.newValue\n        break\n      case 'changeTransform':\n        stateUpdate.transform = result.newValue\n        break\n      case 'changeVisibility':\n        stateUpdate.visibility = result.newValue\n        break\n      case 'changeContent':\n        stateUpdate.content = result.newValue\n        break\n      case 'triggerAnimation':\n        stateUpdate.isAnimating = true\n        // 动画结束后重置\n        setTimeout(() => {\n          handleInteractionStateChange({ isAnimating: false })\n        }, 1000)\n        break\n    }\n\n    if (Object.keys(stateUpdate).length > 0) {\n      handleInteractionStateChange(stateUpdate)\n    }\n  }\n\n  /**\n   * 注册组件到交互管理器\n   */\n  const registerToInteractionManager = () => {\n    if (componentId.value) {\n      // 🔥 修复：始终注册组件，即使没有交互配置\n      // 这样后续添加配置时可以正常工作\n      const configs = interactionConfigs.value || []\n      interactionManager.registerComponent(componentId.value, configs)\n    }\n  }\n\n  /**\n   * 从交互管理器注销组件\n   */\n  const unregisterFromInteractionManager = () => {\n    if (componentId.value) {\n      interactionManager.unregisterComponent(componentId.value, [])\n    }\n  }\n\n  /**\n   * 更新交互配置\n   */\n  const updateInteractionConfigs = () => {\n    if (componentId.value) {\n      // 🔥 修复：始终更新配置，即使配置数组为空\n      const configs = interactionConfigs.value || []\n      interactionManager.updateComponentConfigs(componentId.value, configs)\n    }\n  }\n\n  /**\n   * 防抖处理的事件触发器\n   */\n  let debounceTimers: Record<string, number> = {}\n\n  const debouncedTriggerEvent = (eventType: InteractionEventType, eventData?: any) => {\n    if (finalConfig.performance.debounceTime <= 0) {\n      return triggerInteractionEvent(eventType, eventData)\n    }\n\n    const key = `${eventType}-${JSON.stringify(eventData)}`\n\n    if (debounceTimers[key]) {\n      clearTimeout(debounceTimers[key])\n    }\n\n    debounceTimers[key] = window.setTimeout(() => {\n      triggerInteractionEvent(eventType, eventData)\n      delete debounceTimers[key]\n    }, finalConfig.performance.debounceTime)\n\n    return []\n  }\n\n  /**\n   * 通用事件处理器\n   */\n  const createEventHandler = (eventType: InteractionEventType) => {\n    return (event?: Event) => {\n      if (!props.previewMode) {\n        // 编辑模式下不触发交互\n        return\n      }\n\n      // 检查并发限制\n      if (activeInteractions.value.size >= finalConfig.performance.maxConcurrentInteractions) {\n        return\n      }\n\n      const interactionId = `${eventType}-${Date.now()}`\n      activeInteractions.value.add(interactionId)\n\n      const results = debouncedTriggerEvent(eventType, event)\n\n      // 异步清理活跃交互标记\n      nextTick(() => {\n        setTimeout(() => {\n          activeInteractions.value.delete(interactionId)\n        }, 100)\n      })\n\n      return results\n    }\n  }\n\n  // 监听交互配置变化\n  watch(\n    () => interactionConfigs.value,\n    () => {\n      updateInteractionConfigs()\n    },\n    { deep: true }\n  )\n\n  // 监听组件ID变化\n  watch(\n    () => componentId.value,\n    (newId, oldId) => {\n      if (oldId) {\n        unregisterFromInteractionManager()\n      }\n      if (newId) {\n        registerToInteractionManager()\n      }\n    }\n  )\n\n  // 生命周期钩子\n  onMounted(() => {\n    registerToInteractionManager()\n\n    // 监听交互管理器的状态变化\n    interactionManager.addEventListener(componentId.value, data => {\n      if (data.event && data.data) {\n        applyInteractionResult(data.data)\n      }\n    })\n  })\n\n  onUnmounted(() => {\n    unregisterFromInteractionManager()\n\n    // 清理防抖计时器\n    Object.values(debounceTimers).forEach(timer => clearTimeout(timer))\n    debounceTimers = {}\n\n    // 清理状态\n    activeInteractions.value.clear()\n    interactionHistory.value = []\n  })\n\n  // 返回组合式函数接口\n  return {\n    // 响应式状态\n    isInteractionEnabled,\n    currentInteractionState,\n    activeInteractions,\n    interactionHistory,\n\n    // 计算属性\n    componentId,\n    allowExternalControl,\n    supportedEvents,\n    interactionConfigs,\n    hasActiveInteractions,\n    interactionStatusText,\n\n    // 方法\n    triggerInteractionEvent,\n    handleInteractionStateChange,\n    applyInteractionResult,\n    checkInteractionPermission,\n    createEventHandler,\n    registerToInteractionManager,\n    unregisterFromInteractionManager,\n    updateInteractionConfigs,\n\n    // 工具方法\n    setInteractionEnabled: (enabled: boolean) => {\n      isInteractionEnabled.value = enabled\n    },\n\n    clearInteractionHistory: () => {\n      interactionHistory.value = []\n    },\n\n    getInteractionStats: () => ({\n      totalInteractions: interactionHistory.value.length,\n      activeCount: activeInteractions.value.size,\n      lastInteraction: interactionHistory.value[0],\n      supportedEvents: supportedEvents.value,\n      configCount: interactionConfigs.value.length\n    })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\permission-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":61,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":61,"column":19,"nodeType":"BlockStatement","messageId":"unexpected","endLine":61,"endColumn":21,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1348,1348],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card 2.1 权限验证工具\n * 用于组件权限控制和用户权限验证\n */\n\nimport type { ComponentPermission } from './types'\n\n// 权限等级定义（从高到低）\nconst PERMISSION_LEVELS = {\n  SYS_ADMIN: 4,\n  TENANT_ADMIN: 3,\n  TENANT_USER: 2,\n  不限: 1\n} as const\n\n/**\n * 获取用户权限等级\n * @param userAuthority 用户权限\n * @returns 权限等级数字\n */\nexport function getUserPermissionLevel(userAuthority: string): number {\n  return PERMISSION_LEVELS[userAuthority as keyof typeof PERMISSION_LEVELS] || 0\n}\n\n/**\n * 检查用户是否有权限访问组件\n * @param componentPermission 组件权限要求\n * @param userAuthority 用户权限\n * @returns 是否有权限\n */\nexport function hasComponentPermission(componentPermission: ComponentPermission, userAuthority: string): boolean {\n  // 如果组件权限是\"不限\"，则所有用户都可以访问\n  if (componentPermission === '不限') {\n    return true\n  }\n\n  // 如果用户权限是\"不限\"，则不能访问任何有权限限制的组件\n  if (userAuthority === '不限') {\n    return false\n  }\n\n  // 获取权限等级\n  const componentLevel = PERMISSION_LEVELS[componentPermission]\n  const userLevel = getUserPermissionLevel(userAuthority)\n\n  // 用户权限等级必须大于等于组件要求的权限等级\n  return userLevel >= componentLevel\n}\n\n/**\n * 从本地存储获取用户信息\n * @returns 用户权限信息\n */\nexport function getUserAuthorityFromStorage(): string {\n  try {\n    const userInfo = localStorage.getItem('userInfo')\n    if (userInfo) {\n      const parsed = JSON.parse(userInfo)\n      return parsed.authority || 'TENANT_USER' // 默认返回租户用户权限\n    }\n  } catch (error) {}\n\n  return 'TENANT_USER' // 默认返回租户用户权限\n}\n\n/**\n * 过滤组件列表，只返回用户有权限访问的组件\n * @param components 组件列表\n * @param userAuthority 用户权限（可选，如果不提供则从本地存储获取）\n * @returns 过滤后的组件列表\n */\nexport function filterComponentsByPermission<T extends { permission?: ComponentPermission }>(\n  components: T[],\n  userAuthority?: string\n): T[] {\n  const authority = userAuthority || getUserAuthorityFromStorage()\n\n  return components.filter(component => {\n    const permission = component.permission || '不限'\n    return hasComponentPermission(permission, authority)\n  })\n}\n\n/**\n * 获取权限显示名称\n * @param permission 权限值\n * @returns 显示名称\n */\nexport function getPermissionDisplayName(permission: ComponentPermission): string {\n  const displayNames = {\n    不限: '不限',\n    SYS_ADMIN: '系统管理员',\n    TENANT_ADMIN: '租户管理员',\n    TENANT_USER: '租户用户'\n  }\n\n  return displayNames[permission] || permission\n}\n\n/**\n * 获取所有可用权限选项\n * @returns 权限选项列表\n */\nexport function getAvailablePermissions(): Array<{ value: ComponentPermission; label: string }> {\n  return [\n    { value: '不限', label: '不限' },\n    { value: 'SYS_ADMIN', label: '系统管理员' },\n    { value: 'TENANT_ADMIN', label: '租户管理员' },\n    { value: 'TENANT_USER', label: '租户用户' }\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\property-exposure.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":64,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":64,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 组件属性暴露系统\n * 让组件开发者可以声明哪些属性可以被监听，供交互配置使用\n * 支持从 settingConfig 自动注册可绑定属性\n */\n\nimport type { ComponentSettingConfig } from '../types/setting-config'\nimport { inferPropertyDataType } from '../types/setting-config'\n\n// 属性数据类型\nexport type PropertyDataType =\n  | 'string' // 字符串\n  | 'number' // 数字\n  | 'boolean' // 布尔值\n  | 'object' // 对象\n  | 'array' // 数组\n  | 'date' // 日期\n  | 'color' // 颜色\n  | 'url' // URL链接\n\n// 可监听属性定义\nexport interface ListenableProperty {\n  /** 属性名称（用于程序访问） */\n  name: string\n  /** 显示标签（用于用户界面） */\n  label: string\n  /** 属性描述 */\n  description?: string\n  /** 数据类型 */\n  type: PropertyDataType\n  /** 默认值 */\n  defaultValue?: any\n  /** 是否是核心属性（优先显示） */\n  isCore?: boolean\n  /** 属性分组 */\n  group?: string\n  /** 示例值 */\n  example?: any\n  /** 可能的枚举值 */\n  enum?: { label: string; value: any }[]\n}\n\n// 组件属性暴露配置\nexport interface ComponentPropertyExposure {\n  /** 组件类型标识 */\n  componentType: string\n  /** 组件显示名称 */\n  componentName: string\n  /** 可监听的属性列表 */\n  listenableProperties: ListenableProperty[]\n  /** 组件版本 */\n  version?: string\n  /** 更新时间 */\n  lastUpdated?: Date\n}\n\n// 全局属性暴露注册表\nclass PropertyExposureRegistry {\n  private registrations = new Map<string, ComponentPropertyExposure>()\n\n  /**\n   * 注册组件的属性暴露配置\n   */\n  register(config: ComponentPropertyExposure) {}\n\n  /**\n   * 获取组件的可监听属性\n   */\n  getListenableProperties(componentType: string): ListenableProperty[] {\n    const config = this.registrations.get(componentType)\n    return config?.listenableProperties || []\n  }\n\n  /**\n   * 获取组件的属性暴露配置\n   */\n  getComponentExposure(componentType: string): ComponentPropertyExposure | undefined {\n    return this.registrations.get(componentType)\n  }\n\n  /**\n   * 获取所有注册的组件类型\n   */\n  getAllComponentTypes(): string[] {\n    return Array.from(this.registrations.keys())\n  }\n\n  /**\n   * 获取属性的显示信息\n   */\n  getPropertyDisplayInfo(componentType: string, propertyName: string) {\n    const config = this.registrations.get(componentType)\n    const property = config?.listenableProperties.find(p => p.name === propertyName)\n\n    if (!property) return null\n\n    return {\n      label: property.label,\n      description: property.description,\n      type: property.type,\n      example: property.example,\n      fullPath: `${componentType}.${propertyName}`\n    }\n  }\n\n  /**\n   * 按分组获取属性\n   */\n  getPropertiesByGroup(componentType: string): Record<string, ListenableProperty[]> {\n    const properties = this.getListenableProperties(componentType)\n    const grouped: Record<string, ListenableProperty[]> = {}\n\n    properties.forEach(prop => {\n      const group = prop.group || '基础属性'\n      if (!grouped[group]) {\n        grouped[group] = []\n      }\n      grouped[group].push(prop)\n    })\n\n    return grouped\n  }\n}\n\n// 全局单例\nexport const propertyExposureRegistry = new PropertyExposureRegistry()\n\n/**\n * 组件属性暴露装饰器\n * 组件开发者可以使用这个函数来声明可监听的属性\n */\nexport function exposeProperties(config: Omit<ComponentPropertyExposure, 'lastUpdated'>) {\n  return function (target: any) {\n    // 在组件加载时自动注册\n    propertyExposureRegistry.register(config)\n    return target\n  }\n}\n\n/**\n * 创建属性暴露配置的辅助函数\n */\nexport function createPropertyExposure(\n  componentType: string,\n  componentName: string,\n  properties: ListenableProperty[]\n): ComponentPropertyExposure {\n  return {\n    componentType,\n    componentName,\n    listenableProperties: properties,\n    version: '1.0.0'\n  }\n}\n\n/**\n * 创建属性定义的辅助函数\n */\nexport function createProperty(\n  name: string,\n  label: string,\n  type: PropertyDataType,\n  options: Partial<ListenableProperty> = {}\n): ListenableProperty {\n  return {\n    name,\n    label,\n    type,\n    isCore: false,\n    group: '基础属性',\n    ...options\n  }\n}\n\n/**\n * 从 ComponentSettingConfig 自动注册可绑定属性\n * 核心功能：将 setting.vue 中的配置项自动转换为可绑定属性\n */\nexport function autoRegisterFromSettingConfig(settingConfig: ComponentSettingConfig): void {\n  // 将每个 setting 转换为可监听属性\n  const listenableProperties: ListenableProperty[] = settingConfig.settings.map(setting => {\n    // 推断属性数据类型\n    const propertyType = inferPropertyDataType(setting)\n\n    return {\n      name: setting.field,\n      label: setting.label,\n      type: propertyType,\n      description: `通过设置面板配置的 ${setting.label} 属性`,\n      group: setting.group || '设置属性',\n      defaultValue: setting.defaultValue,\n      isCore: true, // 设置项都是核心属性\n      example: setting.defaultValue,\n      // 如果是下拉选择，添加枚举值\n      enum: setting.options?.map(opt => ({\n        label: opt.label,\n        value: opt.value\n      }))\n    }\n  })\n\n  // 注册到属性暴露注册表\n  propertyExposureRegistry.register({\n    componentType: settingConfig.componentType,\n    componentName: `${settingConfig.componentType} 组件`,\n    listenableProperties,\n    version: '1.0.0'\n  })\n}\n\n/**\n * 获取已注册组件的属性树结构\n * 用于在 HttpConfigForm 中显示可绑定的组件属性\n */\nexport function getComponentPropertyTree(): ComponentPropertyTreeNode[] {\n  const componentTypes = propertyExposureRegistry.getAllComponentTypes()\n\n  return componentTypes\n    .map(componentType => {\n      const exposure = propertyExposureRegistry.getComponentExposure(componentType)\n      if (!exposure) return null\n\n      const properties = exposure.listenableProperties.map(prop => ({\n        key: `${componentType}.${prop.name}`,\n        label: `${prop.label} (${prop.type})`,\n        type: 'property' as const,\n        componentId: componentType,\n        propertyName: prop.name,\n        propertyConfig: prop,\n        isLeaf: true\n      }))\n\n      return {\n        key: componentType,\n        label: exposure.componentName,\n        type: 'component' as const,\n        children: properties,\n        isLeaf: false\n      }\n    })\n    .filter(Boolean) as ComponentPropertyTreeNode[]\n}\n\n/**\n * 组件属性树节点\n */\nexport interface ComponentPropertyTreeNode {\n  key: string\n  label: string\n  type: 'component' | 'property'\n  componentId?: string\n  propertyName?: string\n  propertyConfig?: ListenableProperty\n  children?: ComponentPropertyTreeNode[]\n  isLeaf: boolean\n}\n\n// 常用属性模板\nexport const CommonProperties = {\n  // 文本相关\n  title: createProperty('title', '标题', 'string', {\n    description: '组件的标题文字',\n    isCore: true,\n    group: '内容',\n    example: '设备状态'\n  }),\n\n  content: createProperty('content', '内容', 'string', {\n    description: '组件的主要内容',\n    isCore: true,\n    group: '内容',\n    example: '当前温度: 25°C'\n  }),\n\n  // 数值相关\n  value: createProperty('value', '数值', 'number', {\n    description: '组件的数值数据',\n    isCore: true,\n    group: '数据',\n    example: 25.6\n  }),\n\n  count: createProperty('count', '计数', 'number', {\n    description: '计数器数值',\n    isCore: true,\n    group: '数据',\n    example: 100\n  }),\n\n  // 状态相关\n  status: createProperty('status', '状态', 'string', {\n    description: '组件的当前状态',\n    isCore: true,\n    group: '状态',\n    enum: [\n      { label: '正常', value: 'normal' },\n      { label: '警告', value: 'warning' },\n      { label: '错误', value: 'error' },\n      { label: '离线', value: 'offline' }\n    ],\n    example: 'normal'\n  }),\n\n  isOnline: createProperty('isOnline', '在线状态', 'boolean', {\n    description: '设备是否在线',\n    isCore: true,\n    group: '状态',\n    example: true\n  }),\n\n  // 样式相关\n  backgroundColor: createProperty('backgroundColor', '背景色', 'color', {\n    description: '组件背景颜色',\n    group: '样式',\n    example: '#ffffff'\n  }),\n\n  textColor: createProperty('textColor', '文字颜色', 'color', {\n    description: '文字颜色',\n    group: '样式',\n    example: '#333333'\n  }),\n\n  // 🔥 可见性属性 - 支持通过属性修改控制显示/隐藏\n  visibility: createProperty('visibility', '可见性', 'string', {\n    description: '控制组件的显示或隐藏',\n    isCore: true,\n    group: '样式',\n    enum: [\n      { label: '显示', value: 'visible' },\n      { label: '隐藏', value: 'hidden' }\n    ],\n    example: 'visible',\n    defaultValue: 'visible'\n  }),\n\n  // 时间相关\n  timestamp: createProperty('timestamp', '时间戳', 'date', {\n    description: '数据更新时间',\n    group: '时间',\n    example: new Date()\n  }),\n\n  lastUpdateTime: createProperty('lastUpdateTime', '最后更新时间', 'date', {\n    description: '最后一次更新的时间',\n    group: '时间',\n    example: new Date()\n  })\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\registry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\test-data-source-mapper.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'registered' is assigned a value but never used.","line":66,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registered' is assigned a value but never used.","line":66,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'definition' is assigned a value but never used.","line":67,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'definition' is assigned a value but never used.","line":67,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'dataSourceKeys' is assigned a value but never used.","line":68,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'dataSourceKeys' is assigned a value but never used.","line":68,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'staticParamKeys' is assigned a value but never used.","line":69,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'staticParamKeys' is assigned a value but never used.","line":69,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'result1' is assigned a value but never used.","line":82,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result1' is assigned a value but never used.","line":82,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'result2' is assigned a value but never used.","line":91,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result2' is assigned a value but never used.","line":91,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'result3' is assigned a value but never used.","line":93,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result3' is assigned a value but never used.","line":93,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'result4' is assigned a value but never used.","line":95,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result4' is assigned a value but never used.","line":95,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'validation1' is assigned a value but never used.","line":108,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validation1' is assigned a value but never used.","line":108,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'validation2' is assigned a value but never used.","line":115,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validation2' is assigned a value but never used.","line":115,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'validation3' is assigned a value but never used.","line":123,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'validation3' is assigned a value but never used.","line":123,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":136,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":136,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'registryStats' is assigned a value but never used.","line":138,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registryStats' is assigned a value but never used.","line":138,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'result1' is assigned a value but never used.","line":151,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result1' is assigned a value but never used.","line":151,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":151,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'result2' is assigned a value but never used.","line":158,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":158,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result2' is assigned a value but never used.","line":158,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":158,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'result3' is assigned a value but never used.","line":160,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":160,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result3' is assigned a value but never used.","line":160,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'avgTime' is assigned a value but never used.","line":180,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'avgTime' is assigned a value but never used.","line":180,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 数据源映射器测试文件\n * 用于验证通用数据源映射系统的功能\n */\n\nimport { ComponentRegistry } from './component-registry'\nimport { DataSourceMapper } from './data-source-mapper'\nimport type { ComponentDefinition } from './types'\n\n/**\n * 测试数据源映射器功能\n */\nexport function testDataSourceMapper(): void {\n  // 1. 测试组件注册\n  testComponentRegistration()\n\n  // 2. 测试数据源映射\n  testDataSourceMapping()\n\n  // 3. 测试验证功能\n  testMappingValidation()\n\n  // 4. 测试统计功能\n  testMappingStats()\n}\n\n/**\n * 测试组件注册功能\n */\nfunction testComponentRegistration(): void {\n  // 创建测试组件定义\n  const testComponentDefinition: ComponentDefinition = {\n    type: 'test-component',\n    name: '测试组件',\n    description: '用于测试的组件',\n    dataSources: {\n      dataSource1: {\n        type: 'api',\n        name: '数据源1',\n        required: true\n      },\n      dataSource2: {\n        type: 'static',\n        name: '数据源2',\n        required: false\n      }\n    },\n    staticParams: {\n      title: {\n        type: 'string',\n        name: '标题',\n        default: '默认标题'\n      },\n      count: {\n        type: 'number',\n        name: '数量',\n        default: 10\n      }\n    }\n  }\n\n  // 注册组件\n  ComponentRegistry.register(testComponentDefinition)\n\n  // 验证注册结果\n  const registered = ComponentRegistry.has('test-component')\n  const definition = ComponentRegistry.get('test-component')\n  const dataSourceKeys = ComponentRegistry.getDataSourceKeys('test-component')\n  const staticParamKeys = ComponentRegistry.getStaticParamKeys('test-component')\n}\n\n/**\n * 测试数据源映射功能\n */\nfunction testDataSourceMapping(): void {\n  // 测试场景1: 直接数据源格式\n  const executorData1 = {\n    dataSource1: { value: 100, label: '数据1' },\n    dataSource2: { value: 200, label: '数据2' }\n  }\n\n  const result1 = DataSourceMapper.mapDataSources('test-component', executorData1)\n  // 测试场景2: main字段格式\n  const executorData2 = {\n    main: {\n      dataSource1: { value: 300, label: '数据3' },\n      dataSource2: { value: 400, label: '数据4' }\n    }\n  }\n\n  const result2 = DataSourceMapper.mapDataSources('test-component', executorData2)\n  // 测试场景3: 空数据\n  const result3 = DataSourceMapper.mapDataSources('test-component', null)\n  // 测试场景4: 未注册组件\n  const result4 = DataSourceMapper.mapDataSources('unknown-component', executorData1)\n}\n\n/**\n * 测试映射验证功能\n */\nfunction testMappingValidation(): void {\n  // 测试有效映射\n  const validMapping = {\n    dataSource1: { value: 100 },\n    dataSource2: { value: 200 }\n  }\n\n  const validation1 = DataSourceMapper.validateMapping('test-component', validMapping)\n  // 测试无效映射（缺少数据源）\n  const invalidMapping = {\n    dataSource1: { value: 100 }\n    // 缺少 dataSource2\n  }\n\n  const validation2 = DataSourceMapper.validateMapping('test-component', invalidMapping)\n  // 测试额外字段映射\n  const extraMapping = {\n    dataSource1: { value: 100 },\n    dataSource2: { value: 200 },\n    extraField: { value: 300 }\n  }\n\n  const validation3 = DataSourceMapper.validateMapping('test-component', extraMapping)\n}\n\n/**\n * 测试映射统计功能\n */\nfunction testMappingStats(): void {\n  const executorData = {\n    dataSource1: { value: 100 },\n    dataSource2: { value: 200 },\n    extraData: { value: 300 }\n  }\n\n  const stats = DataSourceMapper.getMappingStats('test-component', executorData)\n  // 测试组件注册表统计\n  const registryStats = ComponentRegistry.getStats()\n}\n\n/**\n * 测试静态参数映射功能\n */\nfunction testStaticParamMapping(): void {\n  // 测试完整静态参数\n  const staticParams1 = {\n    title: '自定义标题',\n    count: 20\n  }\n\n  const result1 = DataSourceMapper.mapStaticParams('test-component', staticParams1)\n  // 测试部分静态参数\n  const staticParams2 = {\n    title: '部分标题'\n    // 缺少 count\n  }\n\n  const result2 = DataSourceMapper.mapStaticParams('test-component', staticParams2)\n  // 测试空静态参数\n  const result3 = DataSourceMapper.mapStaticParams('test-component', null)\n}\n\n/**\n * 性能测试\n */\nfunction performanceTest(): void {\n  const executorData = {\n    dataSource1: { value: 100, data: new Array(1000).fill(0).map((_, i) => ({ id: i, value: Math.random() })) },\n    dataSource2: { value: 200, data: new Array(1000).fill(0).map((_, i) => ({ id: i, value: Math.random() })) }\n  }\n\n  const iterations = 1000\n  const startTime = performance.now()\n\n  for (let i = 0; i < iterations; i++) {\n    DataSourceMapper.mapDataSources('test-component', executorData)\n  }\n\n  const endTime = performance.now()\n  const avgTime = (endTime - startTime) / iterations\n}\n\n/**\n * 清理测试数据\n */\nfunction cleanup(): void {\n  // 注意：在生产环境中不要清理注册表\n  // ComponentRegistry.clear()\n}\n\n// 如果直接运行此文件，执行测试\nif (typeof window !== 'undefined' && (window as any).__TEST_DATA_SOURCE_MAPPER__) {\n  testDataSourceMapper()\n}\n\n// 导出测试函数\nexport {\n  testComponentRegistration,\n  testDataSourceMapping,\n  testMappingValidation,\n  testMappingStats,\n  testStaticParamMapping,\n  performanceTest,\n  cleanup\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\core\\types.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":92,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'definition' is defined but never used.","line":92,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":55},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":93,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'id' is defined but never used.","line":95,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 核心类型定义\n * 简洁明了的类型系统\n */\n\nimport type { Component } from 'vue'\nimport type { ComponentInteractionDefinition } from './interaction-types'\n\n// 权限类型定义\nexport type ComponentPermission = '不限' | 'TENANT_ADMIN' | 'TENANT_USER' | 'SYS_ADMIN'\n\n/**\n * 指标项类型定义\n * 用于存储从设备模板配置的指标信息\n */\nexport interface MetricItem {\n  /** 指标唯一ID */\n  id: string\n  /** 指标名称 */\n  name: string\n  /** 指标字段键 */\n  key: string\n  /** 指标单位 */\n  unit?: string\n  /** 指标描述 */\n  description?: string\n  /** 数据类型 */\n  dataType?: 'number' | 'string' | 'boolean' | 'object'\n}\n\nexport interface ComponentDefinition {\n  type: string\n  name: string\n  description: string\n  category: string\n  subCategory?: string // 子分类，用于更细粒度的分组\n  mainCategory?: string // 主分类：系统、曲线\n  icon: string // 改为string类型，直接使用SVG字符串\n  component: Component\n  configComponent?: Component\n  config?: Record<string, any> // 组件配置\n  tags?: string[] // 组件标签\n  version?: string // 组件版本\n  author?: string // 组件作者\n  permission?: ComponentPermission // 权限字段：不限、TENANT_ADMIN、TENANT_USER、SYS_ADMIN\n  isRegistered?: boolean // 是否注册字段：true-注册，false-不注册，默认true\n  supportedDataSources?: string[] // 支持的数据源类型\n  examples?: Array<{\n    name: string\n    description: string\n    config: Record<string, any>\n  }> // 示例配置\n  documentation?: Record<string, any> // 文档信息\n  properties?: Record<\n    string,\n    {\n      type: string\n      default: any\n      description: string\n      label?: string\n      placeholder?: string\n      min?: number\n      max?: number\n      step?: number\n      options?: Array<{ label: string; value: any }>\n    }\n  >\n\n  // ============ 通用属性 - 所有新组件必须包含 ============\n\n  /** 设备ID - 用于设备关联和模板配置 (新组件必填，现有组件兼容) */\n  deviceId?: string\n\n  /** 指标列表 - 存储从模板配置的指标信息 (新组件必填，现有组件兼容) */\n  metricsList?: MetricItem[]\n\n  // ============ 配置驱动的动态数据源重构新增字段 ============\n\n  /** 静态参数需求声明 */\n  staticParams?: StaticParamRequirement[]\n\n  /** 数据源需求声明 */\n  dataSources?: DataSourceRequirement[]\n\n  // ============ 交互系统配置 ============\n\n  /** 交互能力定义 */\n  interaction?: ComponentInteractionDefinition\n}\n\nexport interface IComponentRegistry {\n  register(id: string, definition: ComponentDefinition): void\n  get(id: string): ComponentDefinition | undefined\n  getAll(): ComponentDefinition[]\n  has(id: string): boolean\n}\n\nexport type IConfigComponent = Component\n\n// 保持向后兼容\n// ============ 配置驱动的动态数据源重构新增类型 ============\n\n/**\n * 静态参数需求定义\n * 用于声明组件需要的静态配置参数\n */\nexport interface StaticParamRequirement {\n  /** 参数唯一标识 */\n  key: string\n  /** 参数名称 */\n  name: string\n  /** 参数类型 */\n  type: 'string' | 'number' | 'boolean' | 'object' | 'array'\n  /** 参数描述 */\n  description: string\n  /** 默认值 */\n  defaultValue?: any\n  /** 是否必填 */\n  required?: boolean\n  /** 参数验证规则 */\n  validation?: {\n    min?: number\n    max?: number\n    pattern?: string\n    options?: Array<{ label: string; value: any }>\n  }\n  /** UI 渲染提示 */\n  ui?: {\n    component?: 'input' | 'select' | 'number' | 'switch' | 'textarea' | 'color' | 'slider'\n    placeholder?: string\n    label?: string\n    group?: string\n  }\n}\n\n/**\n * 数据源需求定义\n * 用于声明组件需要的动态数据源\n */\nexport interface DataSourceRequirement {\n  /** 数据源唯一标识 */\n  key: string\n  /** 数据源名称 */\n  name: string\n  /** 数据源描述 */\n  description: string\n  /** 支持的数据源类型 */\n  supportedTypes: Array<'static' | 'api' | 'websocket' | 'mqtt' | 'database'>\n  /** 字段映射规则 */\n  fieldMappings: Record<\n    string,\n    {\n      /** 目标字段名 */\n      targetField: string\n      /** 字段类型 */\n      type: 'value' | 'object' | 'array'\n      /** 是否必填 */\n      required: boolean\n      /** 默认值 */\n      defaultValue?: any\n      /** 数据转换函数 */\n      transform?: string // 函数字符串，用于序列化\n    }\n  >\n  /** 是否必填 */\n  required?: boolean\n}\n\n/**\n * 数据源信息接口\n * 数据源中心的标准契约\n */\nexport interface DataSourceInfo {\n  /** 数据源唯一ID */\n  id: string\n  /** 数据源名称 */\n  name: string\n  /** 数据源类型 */\n  type: 'static' | 'api' | 'websocket' | 'mqtt' | 'database'\n  /** 数据源描述 */\n  description?: string\n  /** 数据源状态 */\n  status: 'active' | 'inactive' | 'error'\n  /** 数据结构示例 */\n  schema?: Record<string, any>\n  /** 配置信息 */\n  config?: Record<string, any>\n  /** 最后更新时间 */\n  lastUpdated?: Date\n}\n\n/**\n * 组件配置结构\n * 用于存储组件的完整配置信息\n */\nexport interface WidgetConfiguration {\n  /** 静态参数配置 */\n  staticParams: Record<string, any>\n  /** 数据源绑定配置 */\n  dataSourceBindings: Record<\n    string,\n    {\n      /** 绑定的数据源ID */\n      dataSourceId: string\n      /** 字段映射配置 */\n      fieldMappings: Record<string, string>\n    }\n  >\n  /** 配置元数据 */\n  metadata?: {\n    version: string\n    createdAt: Date\n    updatedAt: Date\n  }\n}\n\nexport interface IComponentDefinition extends ComponentDefinition {\n  id: string\n  meta: {\n    name: string\n    title: string\n    description: string\n    category: string\n    icon?: string\n    version: string\n    poster?: string\n  }\n  defaultSize: {\n    width: number\n    height: number\n  }\n  minSize?: {\n    width: number\n    height: number\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\debug.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\hooks\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\hooks\\use-interaction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\hooks\\useComponentTree.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ComponentCategory' is defined but never used.","line":14,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ComponentCategory' is defined but never used.","line":14,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'component' is defined but never used.","line":18,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card 2.1 组件树形结构 Hook\n * 提供组件分类、筛选和树形结构生成功能\n */\n\nimport { ref, computed, onMounted, shallowRef, readonly } from 'vue'\nimport {\n  initializeCard2System,\n  getComponentTree,\n  getComponentsByCategory as getComponentsByCategoryFromIndex,\n  getCategories\n} from '../index'\nimport type { ComponentDefinition } from '../core/types'\nimport type { ComponentTree, ComponentCategory } from '../core/auto-registry'\n\nexport interface ComponentTreeOptions {\n  autoInit?: boolean\n  filter?: (component: ComponentDefinition) => boolean\n  sortBy?: 'name' | 'type' | 'category'\n  sortOrder?: 'asc' | 'desc'\n}\n\nexport interface FilteredComponentTree extends ComponentTree {\n  filteredComponents: ComponentDefinition[]\n  appliedFilters: {\n    search?: string\n    mainCategory?: string\n    subCategory?: string\n  }\n}\n\nexport function useComponentTree(options: ComponentTreeOptions = {}) {\n  const { autoInit = true, filter, sortBy = 'name', sortOrder = 'asc' } = options\n\n  // 状态管理\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  const componentTree = shallowRef<ComponentTree>({ categories: [], components: [], totalCount: 0 })\n\n  // 筛选状态\n  const searchQuery = ref('')\n  const selectedMainCategory = ref<string>('')\n  const selectedSubCategory = ref<string>('')\n\n  /**\n   * 初始化组件树\n   */\n  const initialize = async () => {\n    if (isLoading.value) return\n\n    isLoading.value = true\n    error.value = null\n\n    try {\n      await initializeCard2System()\n      const tree = getComponentTree()\n      componentTree.value = tree\n    } catch (err) {\n      error.value = err instanceof Error ? err.message : '初始化失败'\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  /**\n   * 筛选组件\n   */\n  const filteredComponents = computed(() => {\n    let components = componentTree.value.components\n\n    // 应用自定义筛选器\n    if (filter) {\n      components = components.filter(filter)\n    }\n\n    // 应用搜索筛选\n    if (searchQuery.value) {\n      const query = searchQuery.value.toLowerCase()\n      components = components.filter(\n        comp =>\n          comp.name.toLowerCase().includes(query) ||\n          comp.description.toLowerCase().includes(query) ||\n          comp.type.toLowerCase().includes(query)\n      )\n    }\n\n    // 应用分类筛选\n    if (selectedMainCategory.value) {\n      components = components.filter(comp => comp.mainCategory === selectedMainCategory.value)\n    }\n\n    if (selectedSubCategory.value) {\n      components = components.filter(comp => comp.subCategory === selectedSubCategory.value)\n    }\n\n    // 排序\n    components.sort((a, b) => {\n      let aValue: string\n      let bValue: string\n\n      switch (sortBy) {\n        case 'name':\n          aValue = a.name\n          bValue = b.name\n          break\n        case 'type':\n          aValue = a.type\n          bValue = b.type\n          break\n        case 'category':\n          aValue = a.mainCategory || ''\n          bValue = b.mainCategory || ''\n          break\n        default:\n          aValue = a.name\n          bValue = b.name\n      }\n\n      const comparison = aValue.localeCompare(bValue)\n      return sortOrder === 'asc' ? comparison : -comparison\n    })\n\n    return components\n  })\n\n  /**\n   * 获取筛选后的组件树\n   */\n  const getFilteredTree = computed((): FilteredComponentTree => {\n    return {\n      ...componentTree.value,\n      filteredComponents: filteredComponents.value,\n      appliedFilters: {\n        search: searchQuery.value || undefined,\n        mainCategory: selectedMainCategory.value || undefined,\n        subCategory: selectedSubCategory.value || undefined\n      }\n    }\n  })\n\n  /**\n   * 按分类获取组件\n   */\n  const getComponentsByCategory = (mainCategory?: string, subCategory?: string) => {\n    return getComponentsByCategoryFromIndex(mainCategory, subCategory)\n  }\n\n  /**\n   * 获取所有分类\n   */\n  const categories = computed(() => getCategories())\n\n  /**\n   * 获取可用的主分类\n   */\n  const availableMainCategories = computed(() => {\n    const categories = new Set<string>()\n    componentTree.value.components.forEach(comp => {\n      if (comp.mainCategory) {\n        categories.add(comp.mainCategory)\n      }\n    })\n    return Array.from(categories).sort()\n  })\n\n  /**\n   * 获取可用的子分类\n   */\n  const availableSubCategories = computed(() => {\n    const categories = new Set<string>()\n    componentTree.value.components.forEach(comp => {\n      if (comp.subCategory && (!selectedMainCategory.value || comp.mainCategory === selectedMainCategory.value)) {\n        categories.add(comp.subCategory)\n      }\n    })\n    return Array.from(categories).sort()\n  })\n\n  /**\n   * 清除筛选条件\n   */\n  const clearFilters = () => {\n    searchQuery.value = ''\n    selectedMainCategory.value = ''\n    selectedSubCategory.value = ''\n  }\n\n  /**\n   * 重置到初始状态\n   */\n  const reset = () => {\n    clearFilters()\n    componentTree.value = { categories: [], components: [], totalCount: 0 }\n    error.value = null\n  }\n\n  // 自动初始化\n  if (autoInit) {\n    onMounted(() => {\n      initialize()\n    })\n  }\n\n  return {\n    // 状态\n    isLoading: readonly(isLoading),\n    error: readonly(error),\n    componentTree: readonly(componentTree),\n\n    // 筛选状态\n    searchQuery,\n    selectedMainCategory,\n    selectedSubCategory,\n\n    // 计算属性\n    filteredComponents,\n    getFilteredTree,\n    categories,\n    availableMainCategories,\n    availableSubCategories,\n\n    // 方法\n    initialize,\n    getComponentsByCategory,\n    clearFilters,\n    reset\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\hooks\\useVisualEditorIntegration.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'registerUniversalDataVizConfig' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registerUniversalDataVizConfig' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'definition' is defined but never used.","line":16,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'hasUniversalDataViz' is assigned a value but never used.","line":114,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasUniversalDataViz' is assigned a value but never used.","line":114,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card 2.1 Visual Editor 集成 Hook\n * 提供与 Visual Editor 的桥接功能\n */\n\nimport { computed, ref, readonly, onMounted } from 'vue'\nimport { initializeCard2System, getComponentRegistry } from '../index'\nimport { useComponentTree } from './useComponentTree'\nimport type { ComponentDefinition } from '../core/types'\nimport type { WidgetType, WidgetDefinition } from '@/components/visual-editor/types'\nimport { $t } from '@/locales'\nimport { registerUniversalDataVizConfig } from '../components/universal-data-viz/register-config'\n\nexport interface VisualEditorIntegrationOptions {\n  autoInit?: boolean\n  componentFilter?: (definition: ComponentDefinition) => boolean\n  enableI18n?: boolean\n}\n\nexport interface Card2Widget extends WidgetDefinition {\n  definition: ComponentDefinition\n  isCard2Component: true\n}\n\n// 组件ID到国际化键的映射\nconst COMPONENT_I18N_KEYS: Record<string, string> = {\n  // Display 类组件\n  'version-info': 'card.version',\n  'access-num': 'card.deviceTotal',\n  'alarm-count': 'card.alarmCount',\n  'alarm-info': 'card.alarmInfo',\n  'app-download': 'card.appDownload',\n  'cpu-usage': 'card.cpuUsage',\n  'disk-usage': 'card.diskUsage',\n  'memory-usage': 'card.memoryUsage',\n  information: 'card.information',\n  news: 'card.news',\n  'off-line': 'card.offlineDeviceCount',\n  'on-line': 'card.onlineDeviceCount',\n  'operation-guide-card': 'card.operationGuide',\n  'recently-visited': 'card.recentlyVisited.title',\n  'reported-data': 'card.reportedData.title',\n  'tenant-count': 'card.tenantCount.title',\n\n  // Chart 类组件\n  'online-trend': 'card.onlineTrend',\n  'system-metrics-history': 'card.systemMetricsHistory.title',\n  'tenant-chart': 'card.tenantChart.title',\n  'chart-bar': 'card.barChart',\n  'chart-curve': 'card.curve',\n  'chart-digit': 'card.digitalIndicator',\n\n  // Card 2.1 组件\n  'digit-indicator': 'card.digitalIndicator',\n  'multi-data-test': '多数据测试',\n  'bar-chart': 'card.barChart',\n  'universal-data-viz': '通用数据可视化'\n}\n\nexport function useVisualEditorIntegration(options: VisualEditorIntegrationOptions = {}) {\n  const { autoInit = true, componentFilter = () => true, enableI18n = true } = options\n\n  // 使用组件树 Hook\n  const componentTree = useComponentTree({\n    autoInit,\n    filter: componentFilter\n  })\n\n  // 初始化状态\n  const isInitialized = ref(false)\n  const initializationError = ref<string | null>(null)\n\n  // 自动初始化\n  if (autoInit) {\n    onMounted(() => {\n      initialize()\n    })\n  }\n\n  /**\n   * 初始化集成\n   */\n  const initialize = async () => {\n    if (isInitialized.value) return\n\n    try {\n      await initializeCard2System()\n      await componentTree.initialize()\n\n      // 注意：组件数据需求注册现在由 Card2.1 系统统一处理\n      // registerUniversalDataVizConfig() - 已移至 Card2.1 系统初始化中\n\n      isInitialized.value = true\n    } catch (error) {\n      initializationError.value = error instanceof Error ? error.message : '初始化失败'\n      throw error\n    }\n  }\n\n  /**\n   * 将 Card 2.1 组件转换为 Visual Editor Widget\n   */\n  const availableWidgets = computed(() => {\n    if (!isInitialized.value) {\n      return []\n    }\n\n    const components = componentTree.filteredComponents.value\n    if (!Array.isArray(components)) {\n      return []\n    }\n\n    // 特别检查是否包含 universal-data-viz\n    const hasUniversalDataViz = components.some(comp => comp.type === 'universal-data-viz')\n    return components.map(definition => {\n      // 获取显示名称（支持国际化）\n      let displayName = definition.name\n      if (enableI18n) {\n        const i18nKey = COMPONENT_I18N_KEYS[definition.type]\n        if (i18nKey) {\n          try {\n            displayName = $t(i18nKey as any) || definition.name\n          } catch {\n            // 国际化失败，使用默认名称\n            displayName = definition.name\n          }\n        }\n      }\n\n      const widget: Card2Widget = {\n        type: definition.type as WidgetType,\n        name: displayName,\n        description: definition.description || '',\n        icon: definition.icon,\n        category: definition.category,\n        version: '2.1.0',\n        source: 'card2' as const,\n        isCard2Component: true as const,\n        definition,\n\n        // ✅ 添加 Visual Editor 所需的布局配置\n        defaultLayout: {\n          canvas: {\n            width: definition.config?.style?.width || 300,\n            height: definition.config?.style?.height || 200\n          },\n          gridstack: {\n            w: Math.ceil((definition.config?.style?.width || 300) / 150), // 网格单元宽度\n            h: Math.ceil((definition.config?.style?.height || 200) / 150) // 网格单元高度\n          }\n        },\n\n        // ✅ 添加默认属性配置\n        defaultProperties: definition.config || {},\n\n        // ✅ 添加元数据\n        metadata: {\n          isCard2Component: true,\n          card2ComponentId: definition.type,\n          card2Definition: definition,\n          card2Data: null // 将在数据绑定时填充\n        }\n      }\n\n      return widget\n    })\n  })\n\n  /**\n   * 检查是否为 Card 2.1 组件\n   */\n  const isCard2Component = (type: string): boolean => {\n    const components = componentTree.filteredComponents.value\n    return Array.isArray(components) && components.some(comp => comp.type === type)\n  }\n\n  /**\n   * 获取组件定义 - 返回转换后的 WidgetDefinition\n   */\n  /**\n   * 获取组件实例\n   */\n  const getComponent = (type: string) => {\n    const registry = getComponentRegistry()\n    const componentDef = registry.get(type)\n    return componentDef ? componentDef.component : null\n  }\n\n  const getComponentDefinition = (type: string): Card2Widget | undefined => {\n    // ✅ 修复：从转换后的 availableWidgets 中查找，而不是原始的 componentTree\n    return availableWidgets.value.find(widget => widget.type === type)\n  }\n\n  /**\n   * 按分类获取组件\n   */\n  const getWidgetsByCategory = (mainCategory?: string, subCategory?: string) => {\n    const components = componentTree.getComponentsByCategory(mainCategory, subCategory)\n    if (!Array.isArray(components)) return []\n\n    return components.map(definition => {\n      const i18nKey = COMPONENT_I18N_KEYS[definition.type]\n      const displayName = enableI18n && i18nKey ? $t(i18nKey as any) : definition.name\n\n      return {\n        type: definition.type as WidgetType,\n        name: displayName,\n        description: definition.description || '',\n        icon: definition.icon,\n        category: definition.category,\n        version: '2.1.0',\n        source: 'card2' as const,\n        isCard2Component: true as const,\n        definition\n      } as Card2Widget\n    })\n  }\n\n  /**\n   * 搜索组件\n   */\n  const searchWidgets = (query: string) => {\n    componentTree.searchQuery.value = query\n    return availableWidgets.value\n  }\n\n  /**\n   * 获取组件统计信息\n   */\n  const getStats = computed(() => {\n    const components = componentTree.filteredComponents.value\n    const stats = {\n      total: Array.isArray(components) ? components.length : 0,\n      byCategory: {} as Record<string, number>,\n      bySubCategory: {} as Record<string, number>\n    }\n\n    if (Array.isArray(components)) {\n      components.forEach(comp => {\n        // 统计主分类\n        const mainCat = comp.mainCategory || '未分类'\n        stats.byCategory[mainCat] = (stats.byCategory[mainCat] || 0) + 1\n\n        // 统计子分类\n        const subCat = comp.subCategory || '未分类'\n        stats.bySubCategory[subCat] = (stats.bySubCategory[subCat] || 0) + 1\n      })\n    }\n\n    return stats\n  })\n\n  /**\n   * 获取集成状态\n   */\n  const getStatus = () => {\n    return {\n      isInitialized: isInitialized.value,\n      isLoading: componentTree.isLoading.value,\n      error: componentTree.error.value,\n      componentCount: Array.isArray(componentTree.filteredComponents.value)\n        ? componentTree.filteredComponents.value.length\n        : 0,\n      componentTree: componentTree.componentTree.value\n    }\n  }\n\n  return {\n    // 状态\n    isInitialized: readonly(isInitialized),\n    initializationError: readonly(initializationError),\n    isLoading: componentTree.isLoading,\n    error: componentTree.error,\n\n    // 数据\n    availableWidgets,\n    componentTree: componentTree.componentTree,\n    filteredComponents: componentTree.filteredComponents,\n    categories: componentTree.categories,\n\n    // 方法\n    initialize,\n    isCard2Component,\n    getComponentDefinition,\n    getComponent,\n    getWidgetsByCategory,\n    searchWidgets,\n    getStats,\n    getStatus,\n\n    // 筛选控制\n    searchQuery: componentTree.searchQuery,\n    selectedMainCategory: componentTree.selectedMainCategory,\n    selectedSubCategory: componentTree.selectedSubCategory,\n    clearFilters: componentTree.clearFilters,\n    reset: componentTree.reset\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\hooks\\useWidgetProps.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'reactive' is defined but never used.","line":7,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'reactive' is defined but never used.","line":7,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":57,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":21},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":57,"column":23,"nodeType":"BlockStatement","messageId":"unexpected","endLine":57,"endColumn":25,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[1403,1403],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'transformError' is defined but never used.","line":105,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'sourceField' is assigned a value but never used.","line":136,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'sourceField' is assigned a value but never used.","line":136,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":136,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":180,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":180,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":180,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5185,5185],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * useWidgetProps Hook\n * 配置驱动的动态数据源重构方案的核心Hook\n * 连接\"配置\"和\"组件渲染\"的唯一桥梁\n */\n\nimport { ref, onUnmounted, watch, reactive } from 'vue'\nimport type { Ref } from 'vue'\nimport type { ComponentDefinition, WidgetConfiguration } from '../core/types'\nimport { dataSourceCenter } from '../core/data-sources'\nimport type { DataSourceSubscription } from '../core/data-source-center'\n\n// Hook 的返回值结构\nexport interface UseWidgetPropsReturn {\n  /** 传递给组件的最终props */\n  props: Ref<Record<string, any>>\n  /** 是否正在加载数据 */\n  isLoading: Ref<boolean>\n  /** 加载或订阅过程中发生的错误 */\n  error: Ref<Error | null>\n  /** 手动刷新数据 */\n  refresh: () => Promise<void>\n}\n\n/**\n * useWidgetProps Hook\n * @param definition 组件定义（响应式）\n * @param configuration 组件配置（响应式）\n * @returns Hook返回值\n */\nexport function useWidgetProps(\n  definition: Ref<ComponentDefinition>,\n  configuration: Ref<WidgetConfiguration>\n): UseWidgetPropsReturn {\n  // 状态初始化\n  const props = ref<Record<string, any>>({})\n  const isLoading = ref(true)\n  const error = ref<Error | null>(null)\n\n  // 用于存储所有数据源的取消订阅函数\n  const subscriptions: DataSourceSubscription[] = []\n\n  /**\n   * 数据处理函数\n   * 负责所有的数据解析和订阅逻辑\n   */\n  const resolveProps = async (): Promise<void> => {\n    try {\n      // 清空旧状态\n      isLoading.value = true\n      error.value = null\n\n      // 取消所有旧的订阅\n      subscriptions.forEach(subscription => {\n        try {\n          subscription.unsubscribe()\n        } catch (err) {}\n      })\n      subscriptions.length = 0 // 清空数组\n\n      const newProps: Record<string, any> = {}\n\n      // 1. 处理静态参数（同步）\n      const staticParams = definition.value.staticParams || []\n      for (const param of staticParams) {\n        const configValue = configuration.value.staticParams[param.key]\n        newProps[param.key] = configValue !== undefined ? configValue : param.defaultValue\n      }\n\n      // 2. 处理动态数据源（异步）\n      const dataSources = definition.value.dataSources || []\n      const dataSourcePromises: Promise<void>[] = []\n\n      for (const dataSourceDef of dataSources) {\n        const bindingConfig = configuration.value.dataSourceBindings[dataSourceDef.key]\n\n        if (bindingConfig && bindingConfig.dataSourceId) {\n          const promise = new Promise<void>((resolve, reject) => {\n            const dataSource = dataSourceCenter.getDataSource(bindingConfig.dataSourceId)\n\n            if (!dataSource) {\n              // 使用默认值而不是报错\n              for (const [sourceField, mapping] of Object.entries(dataSourceDef.fieldMappings)) {\n                const targetField = bindingConfig.fieldMappings[sourceField] || mapping.targetField\n                newProps[targetField] = mapping.defaultValue\n              }\n              resolve()\n              return\n            }\n\n            // 订阅数据源\n            const subscription = dataSource.subscribe(data => {\n              try {\n                // 执行字段映射转换\n                for (const [sourceField, mapping] of Object.entries(dataSourceDef.fieldMappings)) {\n                  const targetField = bindingConfig.fieldMappings[sourceField] || mapping.targetField\n                  let value = data[sourceField]\n\n                  // 应用数据转换\n                  if (mapping.transform && value !== undefined) {\n                    try {\n                      // 简单的函数字符串执行（生产环境中应该使用更安全的方式）\n                      const transformFunc = new Function('value', `return ${mapping.transform}`)\n                      value = transformFunc(value)\n                    } catch (transformError) {\n                      value = mapping.defaultValue\n                    }\n                  }\n\n                  // 如果值为undefined，使用默认值\n                  if (value === undefined) {\n                    value = mapping.defaultValue\n                  }\n\n                  newProps[targetField] = value\n                }\n\n                // 更新props（触发响应式更新）\n                props.value = { ...newProps }\n              } catch (mappingError) {\n                error.value = mappingError as Error\n              }\n            })\n\n            if (subscription) {\n              subscriptions.push(subscription)\n              resolve()\n            } else {\n              reject(new Error(`数据源订阅失败: ${bindingConfig.dataSourceId}`))\n            }\n          })\n\n          dataSourcePromises.push(promise)\n        } else {\n          // 没有绑定配置，使用默认值\n          for (const [sourceField, mapping] of Object.entries(dataSourceDef.fieldMappings)) {\n            newProps[mapping.targetField] = mapping.defaultValue\n          }\n        }\n      }\n\n      // 等待所有数据源订阅完成\n      await Promise.all(dataSourcePromises)\n\n      // 初始设置props\n      props.value = newProps\n\n      // 加载完成\n      isLoading.value = false\n    } catch (err) {\n      error.value = err as Error\n      isLoading.value = false\n    }\n  }\n\n  /**\n   * 手动刷新数据\n   */\n  const refresh = async (): Promise<void> => {\n    await resolveProps()\n  }\n\n  // 监听配置变化 - 使用 immediate: true 确保组件挂载时立即执行\n  watch(\n    [definition, configuration],\n    () => {\n      resolveProps()\n    },\n    {\n      deep: true,\n      immediate: true // 🔑 关键修复：确保在组件挂载时立即执行，解决刷新后数据丢失问题\n    }\n  )\n\n  // 清理副作用\n  onUnmounted(() => {\n    subscriptions.forEach(subscription => {\n      try {\n        subscription.unsubscribe()\n      } catch (err) {}\n    })\n    subscriptions.length = 0\n  })\n\n  return {\n    props,\n    isLoading,\n    error,\n    refresh\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\index.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":44,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'stats' is assigned a value but never used.","line":44,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'registeredComponents' is assigned a value but never used.","line":47,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registeredComponents' is assigned a value but never used.","line":47,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'componentTree' is assigned a value but never used.","line":53,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'componentTree' is assigned a value but never used.","line":53,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":26},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary catch clause.","line":56,"column":7,"nodeType":"CatchClause","messageId":"unnecessaryCatchClause","endLine":58,"endColumn":6}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * @file Card 2.1 系统入口\n * 使用自动注册系统，支持目录扫描和动态加载\n *\n * 📚 开发文档：\n * - README.md - 完整开发指南\n * - AI_MIGRATION_PROMPT.md - AI迁移提示词\n * - AI_PROMPT_TEMPLATE.md - 简化提示词模板\n * - MIGRATION_TODO.md - 迁移进度跟踪\n */\n\nimport { componentRegistry } from './core/registry'\nimport { AutoRegistry } from './core/auto-registry'\nimport { ComponentLoader } from './core/component-loader'\nimport { componentDataRequirementsRegistry } from '@/components/visual-editor/core/component-data-requirements'\n\n// 创建自动注册系统\nconst autoRegistry = new AutoRegistry(componentRegistry)\nconst componentLoader = new ComponentLoader()\n\n// 初始化状态\nlet isInitialized = false\nlet initializationPromise: Promise<void> | null = null\n\n/**\n * 初始化 Card 2.1 系统\n * 自动扫描并注册所有组件\n */\nexport async function initializeCard2System() {\n  if (isInitialized) {\n    return\n  }\n\n  if (initializationPromise) {\n    return initializationPromise\n  }\n\n  initializationPromise = (async () => {\n    try {\n      // 1. 加载组件模块\n      const componentModules = await componentLoader.loadComponents()\n\n      // 2. 获取组件统计信息\n      const stats = componentLoader.getComponentStats(componentModules)\n\n      // 3. 自动注册组件（包含权限过滤）\n      const registeredComponents = await autoRegistry.autoRegister(componentModules)\n\n      // 4. 注册预设的数据需求\n      componentDataRequirementsRegistry.registerPresets()\n\n      // 6. 获取组件树形结构\n      const componentTree = autoRegistry.getComponentTree()\n\n      isInitialized = true\n    } catch (error) {\n      throw error\n    } finally {\n      initializationPromise = null\n    }\n  })()\n\n  return initializationPromise\n}\n\n/**\n * 获取组件注册表\n */\nexport function getComponentRegistry() {\n  return componentRegistry\n}\n\n/**\n * 获取组件树形结构\n */\nexport function getComponentTree() {\n  if (!isInitialized) {\n    return { categories: [], components: [], totalCount: 0 }\n  }\n  return autoRegistry.getComponentTree()\n}\n\n/**\n * 按分类获取组件\n */\nexport function getComponentsByCategory(mainCategory?: string, subCategory?: string) {\n  if (!isInitialized) {\n    return []\n  }\n  return autoRegistry.getComponentsByCategory(mainCategory, subCategory)\n}\n\n/**\n * 获取所有分类\n */\nexport function getCategories() {\n  if (!isInitialized) {\n    return []\n  }\n  return autoRegistry.getCategories()\n}\n\n/**\n * 重新应用权限过滤\n * 当用户权限发生变化时调用此函数\n */\nexport function reapplyPermissionFilter() {\n  if (!isInitialized) {\n    return\n  }\n  autoRegistry.reapplyPermissionFilter()\n}\n\n/**\n * 获取所有组件（包括无权限的，用于调试）\n */\nexport function getAllComponents() {\n  if (!isInitialized) {\n    return []\n  }\n  return autoRegistry.getAllComponents()\n}\n\n// 导出核心模块\nexport { componentRegistry }\nexport { AutoRegistry, ComponentLoader }\nexport type { ComponentTree, ComponentCategory } from './core/auto-registry'\n\n// 导出权限相关工具\nexport * from './core/permission-utils'\nexport type { ComponentPermission } from './core/types'\n\n// 导出 Hooks\nexport * from './hooks'\n\n// 默认导出注册表（保持向后兼容）\nexport default componentRegistry\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\integration\\visual-editor-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\types\\interaction-component.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":112,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'state' is defined but never used.","line":112,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":67},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":117,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'eventType' is defined but never used.","line":117,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'data' is defined but never used.","line":117,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":71},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":122,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'result' is defined but never used.","line":122,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":62},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":127,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":127,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":84},{"ruleId":"no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":133,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'reason' is defined but never used.","line":134,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":139,"endColumn":6},{"ruleId":"no-unused-vars","severity":1,"message":"'component' is defined but never used.","line":244,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":244,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":245,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'component' is defined but never used.","line":251,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":251,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'component' is defined but never used.","line":256,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":256,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件交互接口标准化\n * 定义所有支持交互的Card2组件必须实现的接口\n */\n\nimport type {\n  InteractionConfig,\n  InteractionEventType,\n  InteractionResponseResult,\n  ComponentInteractionState\n} from '../core/interaction-types'\n\n/**\n * 交互能力组件接口\n * 所有支持交互的Card2组件都应该实现此接口\n */\nexport interface InteractionCapableComponent {\n  /**\n   * 组件唯一标识符\n   */\n  componentId: string\n\n  /**\n   * 是否允许外部控制\n   * 当为false时，组件拒绝所有外部交互\n   */\n  allowExternalControl?: boolean\n\n  /**\n   * 交互白名单\n   * 只允许列表中的组件对本组件进行交互\n   */\n  interactionWhitelist?: string[]\n\n  /**\n   * 交互黑名单\n   * 拒绝列表中的组件对本组件进行交互\n   */\n  interactionBlacklist?: string[]\n\n  /**\n   * 支持的事件类型\n   * 组件声明自己支持哪些交互事件\n   */\n  supportedEvents?: InteractionEventType[]\n\n  /**\n   * 当前交互状态\n   */\n  interactionState?: ComponentInteractionState\n\n  /**\n   * 交互配置列表\n   */\n  interactionConfigs?: InteractionConfig[]\n\n  /**\n   * 是否显示交互指示器\n   */\n  showInteractionIndicator?: boolean\n}\n\n/**\n * 交互组件标准Props\n * 所有交互组件都应该接受这些props\n */\nexport interface InteractionProps {\n  /**\n   * 组件ID - 由Visual Editor传入\n   */\n  componentId?: string\n\n  /**\n   * 交互配置列表 - 从配置系统传入\n   */\n  interactionConfigs?: InteractionConfig[]\n\n  /**\n   * 是否允许外部控制\n   */\n  allowExternalControl?: boolean\n\n  /**\n   * 交互权限配置\n   */\n  interactionPermissions?: {\n    whitelist?: string[]\n    blacklist?: string[]\n    allowedEvents?: InteractionEventType[]\n  }\n\n  /**\n   * 是否显示交互指示器\n   */\n  showInteractionIndicator?: boolean\n\n  /**\n   * 是否在预览模式\n   * 预览模式下激活交互，编辑模式下禁用\n   */\n  previewMode?: boolean\n}\n\n/**\n * 交互组件标准事件\n * 所有交互组件都应该发出这些事件\n */\nexport interface InteractionEmits {\n  /**\n   * 交互状态变化\n   */\n  (e: 'interaction-state-change', state: ComponentInteractionState): void\n\n  /**\n   * 交互事件触发\n   */\n  (e: 'interaction-event', eventType: InteractionEventType, data?: any): void\n\n  /**\n   * 交互执行结果\n   */\n  (e: 'interaction-result', result: InteractionResponseResult): void\n\n  /**\n   * 交互错误\n   */\n  (e: 'interaction-error', error: { message: string; code?: string; details?: any }): void\n\n  /**\n   * 交互被拒绝\n   */\n  (\n    e: 'interaction-rejected',\n    reason: {\n      sourceComponentId?: string\n      eventType: InteractionEventType\n      reason: 'permission_denied' | 'event_not_supported' | 'external_control_disabled'\n      message: string\n    }\n  ): void\n}\n\n/**\n * 交互权限检查结果\n */\nexport interface InteractionPermissionCheck {\n  /**\n   * 是否允许交互\n   */\n  allowed: boolean\n\n  /**\n   * 拒绝原因\n   */\n  reason?: string\n\n  /**\n   * 拒绝代码\n   */\n  code?: 'EXTERNAL_CONTROL_DISABLED' | 'COMPONENT_BLACKLISTED' | 'COMPONENT_NOT_WHITELISTED' | 'EVENT_NOT_SUPPORTED'\n}\n\n/**\n * 交互上下文信息\n */\nexport interface InteractionContext {\n  /**\n   * 源组件ID（触发交互的组件）\n   */\n  sourceComponentId?: string\n\n  /**\n   * 目标组件ID（接收交互的组件）\n   */\n  targetComponentId: string\n\n  /**\n   * 事件类型\n   */\n  eventType: InteractionEventType\n\n  /**\n   * 事件数据\n   */\n  eventData?: any\n\n  /**\n   * 时间戳\n   */\n  timestamp: number\n\n  /**\n   * 是否为用户直接操作\n   */\n  isUserAction: boolean\n}\n\n/**\n * 交互能力组件配置\n */\nexport interface InteractionCapabilityConfig {\n  /**\n   * 是否启用交互能力\n   */\n  enabled: boolean\n\n  /**\n   * 默认权限设置\n   */\n  defaultPermissions: {\n    allowExternalControl: boolean\n    supportedEvents: InteractionEventType[]\n  }\n\n  /**\n   * 是否启用交互调试\n   */\n  enableDebug: boolean\n\n  /**\n   * 性能配置\n   */\n  performance: {\n    /**\n     * 事件防抖时间（毫秒）\n     */\n    debounceTime: number\n\n    /**\n     * 最大同时执行的交互数量\n     */\n    maxConcurrentInteractions: number\n  }\n}\n\n/**\n * 交互组件工厂配置\n */\nexport interface InteractionComponentFactory {\n  /**\n   * 创建交互能力的组件包装器\n   */\n  createInteractionWrapper<T extends Record<string, any>>(\n    component: T,\n    config?: Partial<InteractionCapabilityConfig>\n  ): T & InteractionCapableComponent\n\n  /**\n   * 验证组件是否支持交互\n   */\n  validateInteractionSupport(component: any): boolean\n\n  /**\n   * 获取组件支持的事件类型\n   */\n  getSupportedEvents(component: any): InteractionEventType[]\n}\n","usedDeprecatedRules":[]},{"filePath":"E:\\wbh\\things2\\thingspanel-frontend-community\\src\\card2.1\\types\\setting-config.ts","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'INPUT' is defined but never used.","line":101,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":8},{"ruleId":"no-unused-vars","severity":1,"message":"'TEXTAREA' is defined but never used.","line":103,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'INPUT_NUMBER' is defined but never used.","line":105,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'COLOR_PICKER' is defined but never used.","line":107,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'SLIDER' is defined but never used.","line":109,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'SWITCH' is defined but never used.","line":111,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'SELECT' is defined but never used.","line":113,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":9},{"ruleId":"no-unused-vars","severity":1,"message":"'CHECKBOX' is defined but never used.","line":115,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'RADIO_GROUP' is defined but never used.","line":117,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'DATE_PICKER' is defined but never used.","line":119,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'value' is defined but never used.","line":177,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'config' is defined but never used.","line":189,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":189,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Card2.1 组件设置配置类型定义\n * 实现统一的三文件结构标准和属性绑定机制\n */\n\n/**\n * 设置项配置接口\n * 对应您提供的 Setting 设计，用于定义组件配置界面的每个设置项\n */\nexport interface Setting {\n  /** 控件类型，如 'input', 'color-picker', 'slider' */\n  type: string\n  /** UI上显示的标签 */\n  label: string\n  /** 绑定的 customConfig.customize 中的属性路径 */\n  field: string\n  /** 设置项分组 */\n  group?: string\n  /** 占位符文本 */\n  placeholder?: string\n  /** 默认值 */\n  defaultValue?: any\n  /** 最小值（数字类型） */\n  min?: number\n  /** 最大值（数字类型） */\n  max?: number\n  /** 步长（数字类型） */\n  step?: number\n  /** 下拉选项 */\n  options?: Array<{ label: string; value: any; description?: string }>\n  /** 控件的其他配置，如 placeholder, options 等 */\n  [key: string]: any\n}\n\n/**\n * 组件的默认样式、属性和初始行为\n * 对应您提供的 CustomConfig 设计\n * @template T - 组件特有的 customize 对象类型\n */\nexport interface CustomConfig<T = Record<string, any>> {\n  /** 组件的唯一类型标识符 */\n  type: string\n  /** 组件根级别的通用变换属性 */\n  root: {\n    transform: {\n      rotate: number\n      scale: number\n    }\n  }\n  /** 组件核心的、独特的自定义样式和功能属性 */\n  customize: T\n}\n\n/**\n * 最终由渲染引擎使用的完整组件配置对象\n * 对应您提供的 DataConfig 设计\n * @template T - 组件特有的 customize 对象类型\n */\nexport interface DataConfig<T = Record<string, any>> {\n  /** 组件实例的唯一ID */\n  id: string\n  /** 组件的显示名称 */\n  name: string\n  /** Vue组件名称，源字段 */\n  field: string\n  /** 接收联动的目标组件配置 */\n  components: TargetComponent[]\n  /** 组件的自定义配置 */\n  customConfig: CustomConfig<T>\n}\n\n/**\n * 联动中的目标组件\n * 对应您提供的 TargetComponent 设计\n */\nexport interface TargetComponent {\n  /** 目标组件的ID */\n  id: string\n  /** 接收联动数据的字段 */\n  field: string\n}\n\n/**\n * 组件设置配置\n * 将 Setting 和 CustomConfig 整合，定义组件的完整配置结构\n */\nexport interface ComponentSettingConfig<T = Record<string, any>> {\n  /** 组件类型标识符 */\n  componentType: string\n  /** 设置项列表 */\n  settings: Setting[]\n  /** 默认自定义配置 */\n  customConfig: CustomConfig<T>\n}\n\n/**\n * 支持的控件类型枚举\n */\nexport enum SettingControlType {\n  /** 文本输入框 */\n  INPUT = 'input',\n  /** 文本域 */\n  TEXTAREA = 'textarea',\n  /** 数字输入框 */\n  INPUT_NUMBER = 'input-number',\n  /** 颜色选择器 */\n  COLOR_PICKER = 'color-picker',\n  /** 滑块 */\n  SLIDER = 'slider',\n  /** 开关 */\n  SWITCH = 'switch',\n  /** 下拉选择 */\n  SELECT = 'select',\n  /** 多选框 */\n  CHECKBOX = 'checkbox',\n  /** 单选框组 */\n  RADIO_GROUP = 'radio-group',\n  /** 日期选择器 */\n  DATE_PICKER = 'date-picker'\n}\n\n/**\n * 属性数据类型映射\n */\nexport type PropertyDataTypeFromSetting =\n  | 'string' // input, textarea, select, radio-group\n  | 'number' // input-number, slider\n  | 'boolean' // switch, checkbox\n  | 'color' // color-picker\n  | 'date' // date-picker\n\n/**\n * 根据设置项类型推断属性数据类型\n * @param setting 设置项配置\n * @returns 属性数据类型\n */\nexport function inferPropertyDataType(setting: Setting): PropertyDataTypeFromSetting {\n  switch (setting.type) {\n    case SettingControlType.INPUT:\n    case SettingControlType.TEXTAREA:\n    case SettingControlType.SELECT:\n    case SettingControlType.RADIO_GROUP:\n      return 'string'\n\n    case SettingControlType.INPUT_NUMBER:\n    case SettingControlType.SLIDER:\n      return 'number'\n\n    case SettingControlType.SWITCH:\n    case SettingControlType.CHECKBOX:\n      return 'boolean'\n\n    case SettingControlType.COLOR_PICKER:\n      return 'color'\n\n    case SettingControlType.DATE_PICKER:\n      return 'date'\n\n    default:\n      return 'string'\n  }\n}\n\n/**\n * 设置项验证规则\n */\nexport interface SettingValidationRule {\n  /** 是否必填 */\n  required?: boolean\n  /** 最小长度/值 */\n  min?: number\n  /** 最大长度/值 */\n  max?: number\n  /** 正则表达式验证 */\n  pattern?: string\n  /** 自定义验证函数 */\n  validator?: (value: any) => boolean | string\n}\n\n/**\n * 扩展的设置项配置（包含验证）\n */\nexport interface EnhancedSetting extends Setting {\n  /** 验证规则 */\n  validation?: SettingValidationRule\n  /** 是否只读 */\n  readonly?: boolean\n  /** 是否可见 */\n  visible?: boolean | ((config: any) => boolean)\n  /** 帮助文本 */\n  helpText?: string\n}\n\n/**\n * 创建设置项的辅助函数\n */\nexport function createSetting(type: string, label: string, field: string, options: Partial<Setting> = {}): Setting {\n  return {\n    type,\n    label,\n    field,\n    group: options.group || '基础设置',\n    ...options\n  }\n}\n\n/**\n * 创建自定义配置的辅助函数\n */\nexport function createCustomConfig<T>(\n  type: string,\n  customize: T,\n  transform: { rotate: number; scale: number } = { rotate: 0, scale: 1 }\n): CustomConfig<T> {\n  return {\n    type,\n    root: { transform },\n    customize\n  }\n}\n","usedDeprecatedRules":[]}]
