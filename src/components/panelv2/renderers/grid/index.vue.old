<template>
  <div class="grid-renderer" :class="{ 'edit-mode': mode === 'edit', 'preview-mode': mode === 'preview' }">
    <!-- 错误状态显示 -->
    <div v-if="rendererError" class="error-panel">
      <div class="error-content">
        <h3>渲染器错误</h3>
        <p>{{ rendererError }}</p>
        <button class="retry-btn" @click="retryInitialize">重试</button>
      </div>
    </div>

    <!-- 网格容器 -->
    <div 
      ref="gridContainerRef"
      class="grid-container"
      :class="{ 'loading': isLoading, 'hidden': rendererError }"
    >
      <!-- 加载状态 -->
      <div v-if="isLoading" class="loading-overlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">初始化网格渲染器...</div>
      </div>
    </div>

    <!-- 底部状态栏 -->
    <div v-if="!rendererError" class="status-bar">
      <div class="status-item">
        <span class="status-label">状态:</span>
        <span class="status-value" :class="{ 'loading': isLoading, 'ready': !isLoading }">
          {{ isLoading ? '加载中' : '就绪' }}
        </span>
      </div>
      <div class="status-item">
        <span class="status-label">模式:</span>
        <span class="status-value">{{ mode === 'edit' ? '编辑' : '预览' }}</span>
      </div>
      <div class="status-item">
        <span class="status-label">项目:</span>
        <span class="status-value">{{ gridItems.length }}</span>
      </div>
      <div class="status-item">
        <span class="status-label">选中:</span>
        <span class="status-value">{{ selectedIds.length }}</span>
      </div>
      <div class="status-item">
        <span class="status-label">网格:</span>
        <span class="status-value">{{ gridConfig.columns }}列 × {{ gridConfig.rowHeight }}px</span>
      </div>
      <div class="status-item">
        <span class="status-label">版本:</span>
        <span class="status-value">Grid v1.0.0</span>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, watch, onMounted, onUnmounted, nextTick } from 'vue'
import { GridRenderer } from './GridRenderer'
import type { BaseItem, RenderMode } from '../base/types'
import type { GridConfig, GridItem } from './types'
import { GridAdapter, type ExternalPanelData } from '../adapters/GridAdapter'

// Props定义
interface Props {
  items: BaseItem[]
  mode: RenderMode
  selectedIds: string[]
  config?: Partial<GridConfig>
  externalData?: ExternalPanelData | null
}

const props = withDefaults(defineProps<Props>(), {
  items: () => [],
  mode: 'edit',
  selectedIds: () => [],
  config: () => ({}),
  externalData: null
})

// 事件定义
interface Emits {
  'item-select': [ids: string[]]
  'item-update': [id: string, updates: any]
  'item-add': [item: BaseItem]
  'item-remove': [id: string]
  'config-change': [config: GridConfig]
}

const emit = defineEmits<Emits>()

// 默认网格配置
const defaultGridConfig: GridConfig = {
  columns: 12,
  rowHeight: 60,
  gap: 8,
  showGrid: true,
  enableSnap: true,
  snapThreshold: 10,
  minItemWidth: 100,
  minItemHeight: 60,
  padding: 16
}

// 响应式状态
const gridContainerRef = ref<HTMLElement>()
const renderer = ref<GridRenderer | null>(null)
const isLoading = ref(false)
const rendererError = ref<string | null>(null)

// 计算属性
const gridConfig = computed(() => ({
  ...defaultGridConfig,
  ...props.config
}))

// 计算合并后的项目列表
const gridItems = computed(() => {
  let allItems: BaseItem[] = []
  
  // 从props.items获取项目
  if (props.items && props.items.length > 0) {
    allItems = [...props.items]
  }
  
  // 从externalData转换获取项目
  if (props.externalData && (!props.items || props.items.length === 0)) {
    try {
      const convertedItems = GridAdapter.convertPanelToGridItems(props.externalData)
      allItems = convertedItems as BaseItem[]
      console.log('GridRenderer: 从外部数据转换了', convertedItems.length, '个项目')
    } catch (error) {
      console.error('GridRenderer: 外部数据转换失败', error)
    }
  }
  
  return allItems
})

// 防止并发初始化的标志
let initializationPromise: Promise<void> | null = null

// 渲染器初始化
const initializeRenderer = async () => {
  // 如果已经有初始化在进行中，等待它完成
  if (initializationPromise) {
    await initializationPromise
    return
  }

  // 创建新的初始化 Promise
  initializationPromise = performInitialization()
  
  try {
    await initializationPromise
  } finally {
    initializationPromise = null
  }
}

const performInitialization = async () => {
  // 等待 DOM 更新确保 ref 可用
  await nextTick()
  
  if (!gridContainerRef.value) {
    console.warn('Grid container ref not available')
    return
  }

  try {
    isLoading.value = true
    rendererError.value = null

    // 销毁现有渲染器
    if (renderer.value) {
      renderer.value.destroy()
      renderer.value = null
    }

    // 等待DOM更新
    await nextTick()

    // 再次确保容器可用
    if (!gridContainerRef.value) {
      throw new Error('Grid container became unavailable during initialization')
    }

    // 确保容器在 DOM 中且可见
    if (!document.contains(gridContainerRef.value)) {
      throw new Error('Grid container is not in the DOM')
    }

    // 创建新的渲染器实例
    renderer.value = new GridRenderer(gridContainerRef.value, gridConfig.value)

    // 设置事件监听
    setupRendererEvents()

    // 初始化渲染器
    renderer.value.init()

    // 设置模式
    renderer.value.setMode(props.mode)

    // 添加现有项目
    gridItems.value.forEach(item => {
      renderer.value?.addItem(item)
    })

    // 设置选中状态
    if (props.selectedIds.length > 0) {
      renderer.value.selectItems(props.selectedIds)
    }

    console.log('Grid renderer initialized successfully')
  } catch (error) {
    console.error('Failed to initialize grid renderer:', error)
    rendererError.value = error instanceof Error ? error.message : '初始化失败'
  } finally {
    isLoading.value = false
  }
}

// 销毁渲染器
const destroyRenderer = () => {
  try {
    // 取消任何进行中的初始化
    initializationPromise = null
    
    if (renderer.value) {
      renderer.value.destroy()
      renderer.value = null
    }
    
    isLoading.value = false
    rendererError.value = null
  } catch (error) {
    console.error('Error destroying renderer:', error)
  }
}

// 设置渲染器事件
const setupRendererEvents = () => {
  if (!renderer.value) return

  renderer.value.on('item-select', (ids: string[]) => {
    emit('item-select', ids)
  })

  renderer.value.on('item-update', (id: string, updates: any) => {
    emit('item-update', id, updates)
  })

  renderer.value.on('item-add', (item: BaseItem) => {
    emit('item-add', item)
  })

  renderer.value.on('item-remove', (id: string) => {
    emit('item-remove', id)
  })
}

// 处理项目变化
const handleItemChange = (newItems: BaseItem[], oldItems: BaseItem[]) => {
  if (!renderer.value) return

  // 找出新增、删除和更新的项目
  const newItemsMap = new Map(newItems.map(item => [item.id, item]))
  const oldItemsMap = new Map(oldItems.map(item => [item.id, item]))

  // 处理删除的项目
  oldItems.forEach(oldItem => {
    if (!newItemsMap.has(oldItem.id)) {
      renderer.value?.removeItem(oldItem.id)
    }
  })

  // 处理新增和更新的项目
  newItems.forEach(newItem => {
    const oldItem = oldItemsMap.get(newItem.id)
    if (!oldItem) {
      // 新增项目
      renderer.value?.addItem(newItem)
    } else if (JSON.stringify(newItem) !== JSON.stringify(oldItem)) {
      // 更新项目
      const updates = {
        position: newItem.position,
        size: newItem.size,
        config: newItem.config,
        title: newItem.title,
        locked: newItem.locked,
        hidden: newItem.hidden
      }
      renderer.value?.updateItem(newItem.id, updates)
    }
  })
}

// 处理选择变化
const handleSelectionChange = (newIds: string[], oldIds: string[]) => {
  if (!renderer.value) return
  
  if (JSON.stringify(newIds.sort()) !== JSON.stringify(oldIds.sort())) {
    renderer.value.selectItems(newIds)
  }
}

// 处理模式变化
const handleModeChange = (newMode: RenderMode) => {
  if (!renderer.value) return
  
  renderer.value.setMode(newMode)
}

// 处理配置变化
const handleConfigChange = (newConfig: Partial<GridConfig>) => {
  if (!renderer.value) return
  
  renderer.value.updateConfig(newConfig)
  emit('config-change', renderer.value.getConfig())
}

// 重试初始化
const retryInitialize = () => {
  rendererError.value = null
  initializeRenderer()
}

// 监听器
watch(() => props.items, handleItemChange, { deep: true })
watch(() => gridItems.value, (newItems, oldItems) => {
  if (!renderer.value) {
    // 如果渲染器未初始化，先初始化
    initializeRenderer()
    return
  }
  
  if (newItems.length !== oldItems?.length) {
    // 项目数量发生变化，重新初始化渲染器
    initializeRenderer()
  } else {
    handleItemChange(newItems, oldItems || [])
  }
}, { deep: true })
watch(() => props.selectedIds, handleSelectionChange)
watch(() => props.mode, handleModeChange)
watch(() => props.config, handleConfigChange, { deep: true })
watch(() => props.externalData, (newData, oldData) => {
  // 只有当外部数据真正改变时才重新初始化
  if (JSON.stringify(newData) !== JSON.stringify(oldData)) {
    initializeRenderer()
  }
}, { deep: true })

// 生命周期
onMounted(() => {
  // 延迟初始化以确保所有组件都已挂载
  setTimeout(() => {
    initializeRenderer()
  }, 100)
})

onUnmounted(() => {
  destroyRenderer()
})
</script>

<style scoped>
.grid-renderer {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  background: #f5f5f5;
  position: relative;
}

.grid-renderer.edit-mode {
  border: 2px dashed #1890ff;
}

.grid-renderer.preview-mode {
  border: 1px solid #d9d9d9;
}

.grid-container {
  flex: 1;
  position: relative;
  overflow: auto;
  background: #fff;
}

.grid-container.loading {
  pointer-events: none;
}

.grid-container.hidden {
  display: none;
}

.loading-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.loading-spinner {
  width: 32px;
  height: 32px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #1890ff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 12px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-text {
  color: #666;
  font-size: 14px;
}

.error-panel {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #fff2f0;
  border: 1px solid #ffccc7;
}

.error-content {
  text-align: center;
  padding: 24px;
}

.error-content h3 {
  color: #ff4d4f;
  margin: 0 0 12px 0;
  font-size: 16px;
}

.error-content p {
  color: #666;
  margin: 0 0 16px 0;
  font-size: 14px;
}

.retry-btn {
  background: #1890ff;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
}

.retry-btn:hover {
  background: #40a9ff;
}

.status-bar {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 8px 16px;
  background: #fafafa;
  border-top: 1px solid #d9d9d9;
  font-size: 12px;
  flex-wrap: wrap;
}

.status-item {
  display: flex;
  align-items: center;
  gap: 4px;
}

.status-label {
  color: #666;
  font-weight: 500;
}

.status-value {
  color: #333;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.status-value.loading {
  color: #1890ff;
}

.status-value.ready {
  color: #52c41a;
}
</style>