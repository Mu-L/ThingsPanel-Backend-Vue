---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: false
"always use 中文"
---
"always use 中文"
"always use 中文"
# Your rule content

- You can @ files here
- You can use markdown but dont have to
#always use 中文
# Project Rules for tp-tenant (Vue 3 + TypeScript + Naive UI + UnoCSS)

## Framework & Core Patterns
- **Use Vue 3 Composition API exclusively via `<script setup>` syntax.** Avoid Options API.
- Utilize Vue 3 reactivity functions (`ref`, `reactive`, `computed`, `watch`) correctly.
- Define component props using `defineProps<MyProps>()` and emits using `defineEmits<{(e: 'myEvent', payload: Type): void}>()`.

## UI Library & Styling
- **Use Naive UI (`naive-ui`)** as the primary component library. Import components as needed (likely auto-imported via `unplugin-vue-components`). Follow Naive UI's API and conventions.
- **Use UnoCSS utility classes** (likely based on `@unocss/preset-uno` for Tailwind-like syntax) as the primary method for styling. Avoid writing custom CSS/Sass unless necessary for complex overrides or animations not achievable with utilities.
- Reference Naive UI theme variables via CSS variables when needing custom styles aligned with the theme.
- Use **Iconify icons** via the UnoCSS preset (`i-...`), `@iconify/vue` component, or Naive UI's `@vicons/*` components. Prefer consistency with existing project usage.

## State Management
- **Use Pinia (`defineStore`)** for global/feature state.
- Define stores in `src/stores` (or the project's established location), named like `use[Name]Store.ts`.
- Structure Pinia stores clearly (state, getters, actions). Type everything strictly. Access state via store properties/getters; use actions for modifications.

## Routing
- **Use Vue Router 4+**.
- Adhere to the routing setup managed by **`@elegant-router/vue`** and likely file-based routing via **`@soybeanjs/vite-plugin-vue-page-route`**. Follow established conventions for defining views/pages and their route metadata (e.g., in file comments or frontmatter).
- Use lazy loading for all route components: `component: () => import('@/views/MyPageView.vue')`.

## API & Data Fetching
- Use the project's Axios setup, likely via the **`@sa/axios` workspace package** or a configured instance (e.g., in `src/service/request`). Follow existing patterns for making API calls.
- Define API functions typically in `src/service/api` or feature-specific service/composable files.
- **Strictly type API request payloads and response data**, ideally placing definitions in `src/typings/api` or co-located files.

## TypeScript & Types
- Enforce **TypeScript `strict` mode**. **Strictly avoid `any`**; use `unknown` or specific types. Justify rare exceptions with comments.
- Always use **`import type`** for type-only imports.
- Define shared application types in `src/typings` or `src/types`. Co-locate component/feature-specific types in `types.ts` files.

## Structure & Naming
- **Follow the existing project structure** inherited from Soybean Admin / ThingsPanel (likely feature-based or type-based, e.g., `src/views`, `src/components`, `src/features`, `src/composables`).
- Component files: `PascalCase.vue`. Composable files: `useCamelCase.ts`. Service files: `camelCase.service.ts` or similar based on project convention.
- Keep components focused; extract logic into **composables** (`src/composables` or feature folders).

## Key Libraries & Conventions
- **i18n:** Use `vue-i18n`. Use the `$t()` function or `useI18n` composable for translations with keys defined in locale files.
- **Utility Functions:** Prefer using functions from **`lodash-es`** where appropriate for common tasks (ensure tree-shaking works). Use utility functions from `@sa/utils` workspace package.
- **Date/Time:** Prefer using **`dayjs`** for new date/time manipulations over `moment`. Follow existing usage patterns if `moment` is prevalent in specific areas.
- **Internal Packages:** Be aware of and utilize workspace packages like `@sa/axios`, `@sa/color-palette`, `@sa/hooks`, `@sa/materials`, `@sa/utils`, `@sa/scripts`, `@sa/uno-preset`.

## Testing
- Write tests using the project's established testing framework and conventions **[If testing framework (e.g., Vitest/Jest) is used - specify here]**.
- Focus unit tests on composables, utilities, and store logic.
- Write component tests verifying interactions and rendering using the chosen libraries.

## Code Quality & Collaboration
- Code **must** pass **ESLint** checks (using `@soybeanjs/eslint-config`) and **Prettier** formatting before committing. Use `pnpm lint` and `pnpm format`.
- Adhere to `simple-git-hooks` and `lint-staged` configurations for pre-commit checks.
- Write clear commit messages following the project's convention (likely Conventional Commits via `sa git-commit`).
- Avoid adding new external dependencies without team discussion. Prioritize using existing libraries (`naive-ui`, `lodash-es`, internal `@sa/*` packages).