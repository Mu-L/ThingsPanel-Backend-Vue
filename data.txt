ThingsPanel 架构重构开发计划                                                                            │
     │                                                                                                         │
     │ 🎯 核心目标                                                                                             │
     │                                                                                                         │
     │ 解决架构评审报告中识别的严重分层问题和循环依赖,建立清晰的单向依赖架构体系。                             │
     │                                                                                                         │
     │ 📊 重构优先级策略                                                                                       │
     │                                                                                                         │
     │ 阶段一：依赖倒置 - 切断反向依赖 (P0 - 关键)                                                             │
     │                                                                                                         │
     │ 目标: 消除 core 层对上层模块的所有直接引用                                                              │
     │                                                                                                         │
     │ 1.1 重构 VisualEditorBridge.ts                                                                          │
     │                                                                                                         │
     │ - 问题: core 层直接导入 visual-editor 的 store                                                          │
     │ - 方案: 应用依赖注入模式                                                                                │
     │   - 在 core 定义 IEditorContext 接口                                                                    │
     │   - visual-editor 实现该接口并注入到 core                                                               │
     │   - 移除 import { useEditorStore } 直接引用                                                             │
     │                                                                                                         │
     │ 1.2 移除 InteractionCardWizard.vue 反向依赖                                                             │
     │                                                                                                         │
     │ - 问题: core 层 UI 组件引用 card2.1 和 visual-editor                                                    │
     │ - 方案:                                                                                                 │
     │   - 将 InteractionCardWizard.vue 从 src/core/interaction-system/components/ 移至 src/components/common/ │
     │   - 提取业务逻辑到 src/core/interaction-system/InteractionService.ts                                    │
     │   - UI 组件通过 props 和 callbacks 与 core 服务通信                                                     │
     │                                                                                                         │
     │ 1.3 重构 SystemInitializer.ts                                                                           │
     │                                                                                                         │
     │ - 问题: 直接导入 @/card2.1/core/OptimizedInitializationManager                                          │
     │ - 方案:                                                                                                 │
     │   - 定义 ISubSystemInitializer 接口                                                                     │
     │   - card2.1 实现接口并通过注册机制加入初始化流程                                                        │
     │                                                                                                         │
     │ 阶段二：接口抽象 - 建立契约层 (P0 - 关键)                                                               │
     │                                                                                                         │
     │ 2.1 创建 Core 抽象接口层                                                                                │
     │                                                                                                         │
     │ 在 src/core/interfaces/ 新建:                                                                           │
     │ - IExposableProperties.ts - 组件属性暴露接口                                                            │
     │ - IEditorContext.ts - 编辑器上下文接口                                                                  │
     │ - IComponentAdapter.ts - 组件适配器接口                                                                 │
     │ - IDataSourceProvider.ts - 数据源提供者接口                                                             │
     │                                                                                                         │
     │ 2.2 Card2.1 适配器实现                                                                                  │
     │                                                                                                         │
     │ 创建 src/card2.1/integration/core-adapter.ts:                                                           │
     │ - Card2ComponentAdapter 实现 IExposableProperties                                                       │
     │ - 内部调用 PropertyExposureManager,对外暴露标准接口                                                     │
     │ - 将 card2.1 特定实现与 core 解耦                                                                       │
     │                                                                                                         │
     │ 2.3 Visual Editor 适配器实现                                                                            │
     │                                                                                                         │
     │ 创建 src/components/visual-editor/integration/core-adapter.ts:                                          │
     │ - EditorContextAdapter 实现 IEditorContext                                                              │
     │ - 桥接 editor store 和 core 层需求                                                                      │
     │                                                                                                         │
     │ 阶段三：职责分离 - 明确边界 (P1 - 重要)                                                                 │
     │                                                                                                         │
     │ 3.1 重构配置发现机制                                                                                    │
     │                                                                                                         │
     │ - 问题: ConfigDiscovery.ts 职责不清,主动扫描其他模块                                                    │
     │ - 方案:                                                                                                 │
     │   - 移动到应用初始化层 (src/bootstrap/ComponentRegistry.ts)                                             │
     │   - 使用发布-订阅模式,各模块主动注册组件                                                                │
     │   - visual-editor 被动接收注册的组件                                                                    │
     │                                                                                                         │
     │ 3.2 数据流标准化                                                                                        │
     │                                                                                                         │
     │ - 强制执行 visual-editor → core → card2.1 单向数据流                                                    │
     │ - 所有数据操作通过 SimpleDataBridge 统一接口                                                            │
     │ - 禁止跨层直接调用                                                                                      │
     │                                                                                                         │
     │ 3.3 UI 组件分层整理                                                                                     │
     │                                                                                                         │
     │ - core 层移除所有 Vue 组件                                                                              │
     │ - 仅保留纯 TypeScript 服务和工具                                                                        │
     │ - UI 组件移至 src/components/ 或 feature 目录                                                           │
     │                                                                                                         │
     │ 阶段四：文件结构重组 (P2 - 改进)                                                                        │
     │                                                                                                         │
     │ 4.1 Core 层清理                                                                                         │
     │                                                                                                         │
     │ src/core/                                                                                               │
     │ ├── interfaces/           # 新增：所有抽象接口                                                          │
     │ ├── services/            # 重组：纯业务逻辑服务                                                         │
     │ │   ├── data/           # 数据相关服务                                                                  │
     │ │   ├── interaction/    # 交互相关服务                                                                  │
     │ │   └── script/         # 脚本引擎服务                                                                  │
     │ ├── types/              # 类型定义                                                                      │
     │ └── utils/              # 工具函数                                                                      │
     │                                                                                                         │
     │ 4.2 Integration 层新建                                                                                  │
     │                                                                                                         │
     │ src/integration/                                                                                        │
     │ ├── card2-core-adapter.ts      # card2.1 → core 适配                                                    │
     │ ├── editor-core-adapter.ts     # visual-editor → core 适配                                              │
     │ └── system-bootstrap.ts        # 系统启动整合                                                           │
     │                                                                                                         │
     │ 4.3 Components 层重组                                                                                   │
     │                                                                                                         │
     │ src/components/                                                                                         │
     │ ├── interaction/         # 从 core 移出的交互 UI                                                        │
     │ ├── data-config/        # 从 core 移出的配置 UI                                                         │
     │ ├── visual-editor/      # 保持不变                                                                      │
     │ └── common/             # 共享 UI 组件                                                                  │
     │                                                                                                         │
     │ 阶段五：测试与验证 (P1 - 重要)                                                                          │
     │                                                                                                         │
     │ 5.1 架构合规性测试                                                                                      │
     │                                                                                                         │
     │ - 编写 ESLint 规则检测反向依赖                                                                          │
     │ - 添加 CI 检查确保分层不被破坏                                                                          │
     │                                                                                                         │
     │ 5.2 集成测试更新                                                                                        │
     │                                                                                                         │
     │ - 更新所有涉及重构模块的测试                                                                            │
     │ - 验证适配器层正确工作                                                                                  │
     │                                                                                                         │
     │ 5.3 功能回归测试                                                                                        │
     │                                                                                                         │
     │ - 用户手动测试所有交互功能                                                                              │
     │ - 验证数据绑定系统正常工作                                                                              │
     │                                                                                                         │
     │ 🔧 技术实施细节                                                                                         │
     │                                                                                                         │
     │ 依赖注入示例                                                                                            │
     │                                                                                                         │
     │ // src/core/interfaces/IEditorContext.ts                                                                │
     │ export interface IEditorContext {                                                                       │
     │   getCurrentMode(): 'edit' | 'preview'                                                                  │
     │   getComponentConfig(id: string): any                                                                   │
     │ }                                                                                                       │
     │                                                                                                         │
     │ // src/core/services/data/DataService.ts                                                                │
     │ export class DataService {                                                                              │
     │   constructor(private editorContext?: IEditorContext) {}                                                │
     │                                                                                                         │
     │   // 使用注入的上下文而非直接导入                                                                       │
     │ }                                                                                                       │
     │                                                                                                         │
     │ 适配器模式示例                                                                                          │
     │                                                                                                         │
     │ // src/card2.1/integration/core-adapter.ts                                                              │
     │ import { IExposableProperties } from '@/core/interfaces'                                                │
     │ import { propertyExposureManager } from '../core/PropertyExposureManager'                               │
     │                                                                                                         │
     │ export class Card2ComponentAdapter implements IExposableProperties {                                    │
     │   getExposableProperties(context: any) {                                                                │
     │     // 转换内部格式为 core 接口格式                                                                     │
     │     return propertyExposureManager.getWhitelistedProperties(...)                                        │
     │   }                                                                                                     │
     │ }                                                                                                       │
     │                                                                                                         │
     │ 📈 成功指标                                                                                             │
     │                                                                                                         │
     │ 1. ✅ Core 层零反向依赖                                                                                  │
     │ 2. ✅ 所有模块间通过接口通信                                                                             │
     │ 3. ✅ UI 组件完全移出 core 层                                                                            │
     │ 4. ✅ 循环依赖警告清零                                                                                   │
     │ 5. ✅ 现有功能完整保留                                                                                   │
     │                                                                                                         │
     │ ⚠️ 风险与缓解                                                                                           │
     │                                                                                                         │
     │ 风险: 大规模重构可能破坏现有功能                                                                        │
     │ 缓解:                                                                                                   │
     │ - 分阶段执行,每阶段后完整测试                                                                           │
     │ - 保留旧代码分支作为回退选项                                                                            │
     │ - 优先重构最严重的反向依赖                                                                              │
     │                                                                                                         │
     │ 风险: 开发周期较长                                                                                      │
     │ 缓解:                                                                                                   │
     │ - P0 任务优先,快速解决核心问题                                                                          │
     │ - P2 任务可后续迭代完成                                                                                 │
     │                                                                                                         │
     │ 📅 预估工期                                                                                             │
     │                                                                                                         │
     │ - 阶段一: 3-5天 (关键路径)                                                                              │
     │ - 阶段二: 3-4天 (关键路径)                                                                              │
     │ - 阶段三: 2-3天                                                                                         │
     │ - 阶段四: 2-3天                                                                                         │
     │ - 阶段五: 2天 (贯穿各阶段)                                                                              │
     │                                                                                                         │
     │ 总计: 约 12-17 天开发周期
